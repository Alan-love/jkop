
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class abstract:

func createDefault(ctx as LoggingContext) static as this:
	return new HTTPClientOperation() {
		ctx ctx
	}

func executeWithClient(client as this, request as HTTPClientRequest?, listener as HTTPClientListener?) static:
	client.executeRequest(request, listener)

class MyListener is HTTPClientListener
{
	pvar response as HTTPClientResponse?
	pvar buffer as buffer?
	pvar errorHandler as function<void,string>?
	pvar ctx as LoggingContext?

	func onResponseReceived(response as HTTPClientResponse) override as bool
	{
		this.response = response
		return true
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		this.buffer = Buffer.append(this.buffer, buffer)
		return true
	}

	func onAborted override
	{
	}

	func onStatus(message as string?) override
	{
		if message:
			Log.debug(ctx, message)
	}

	func onError(message as string) override
	{
		Log.error(ctx, message)
		if errorHandler:
			errorHandler(message)
	}

	func onResponseCompleted override
	{
	}
}

func execute(ctx as LoggingContext, client as this, request as HTTPClientRequest?, listener as function<void,HTTPClientResponse?>?, errorHandler as function<void,string>? = null) static
{
	var ll = new MyListener()
	ll.setCtx(ctx)
	ll.setErrorHandler(errorHandler)
	executeWithClient(client, request, ll)
	if listener:
		listener(ll.getResponse())
}

func executeForBuffer(ctx as LoggingContext, client as this, request as HTTPClientRequest?, listener as function<void,HTTPClientResponse?,buffer?>?, errorHandler as function<void,string>? = null) static
{
	var ll = new MyListener()
	ll.setCtx(ctx)
	ll.setErrorHandler(errorHandler)
	executeWithClient(client, request, ll)
	if listener:
		listener(ll.getResponse(), ll.getBuffer())
}

func executeForString(ctx as LoggingContext, client as this, request as HTTPClientRequest?, listener as function<void,HTTPClientResponse?,string?>?, errorHandler as function<void,string>? = null) static
{
	var ll = new MyListener()
	ll.setCtx(ctx)
	ll.setErrorHandler(errorHandler)
	executeWithClient(client, request, ll)
	if listener:
		listener(ll.getResponse(), String.forUTF8Buffer(ll.getBuffer() ?? Buffer.allocate(0)))
}

func executeRequest(request as HTTPClientRequest?, listener as HTTPClientListener?) abstract
