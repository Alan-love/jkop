
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_posix"
{
	lang "c" {{{
		#include <uninstd.h>
		#include <sys/types.h>
		#include <pwd.h>
	}}}
}

class PosixUser public
{
	pvar pwName as string?
	pvar pwUid as int
	pvar pwGid as int
	pvar pwGecos as string?
	pvar pwDir as string?
	pvar pwShell as string?
}

func getpwnam(username as string) static as PosixUser?
{
	IFDEF "target_posix" {
		var name as string? = null
		var gecos as string? = null
		var dir as string? = null
		var shell as string? = null
		var uid as int
		var gid as int
		lang "c" (username) {{{
			struct passwd pwd;
			struct passwd *result = NULL;
			char buffer[8192 * 4];
			getpwnam_r(username, &pwd, buffer, 8192*4, & result);
			if(result != NULL) {
				name = result->pw_name;
				gecos = result->pw_gecos;
				dir = result->pw_dir;
				shell = result->pw_shell;
				uid = result->pw_uid;
				gid = result->pw_gid;
			}
		}}}
		assert name
		var v = new PosixUser()
		v.setPwName(name)
		v.setPwUid(uid)
		v.setPwGid(gid)
		v.setPwGecos(gecos)
		v.setPwDir(dir)
		v.setPwShell(shell)
		return v
	}
	ELSE {
		nop username
		ERROR NOT_SUPPORTED
	}
}

func getpwuid(uid as int) static as PosixUser?
{
	IFDEF "target_posix" {
		var name as string? = null
		var gecos as string? = null
		var dir as string? = null
		var shell as string? = null
		var uid as int
		var gid as int
		lang "c" (uid) {{{
			struct passwd pwd;
			struct passwd *result = NULL;
			char buffer[8192 * 4];
			getpwuid_r(uid, &pwd, buffer, 8192*4, & result);
			if(result != NULL) {
				name = result->pw_name;
				gecos = result->pw_gecos;
				dir = result->pw_dir;
				shell = result->pw_shell;
				uid = result->pw_uid;
				gid = result->pw_gid;
			}
		}}}
		assert name
		var v = new PosixUser()
		v.setPwName(name)
		v.setPwUid(uid)
		v.setPwGid(gid)
		v.setPwGecos(gecos)
		v.setPwDir(dir)
		v.setPwShell(shell)
		return v
	}
	ELSE {
		nop uid
		ERROR NOT_SUPPORTED
	}
}

func setuid(uid as int) static as bool
{
	IFDEF "target_posix" {
		var v = false
		lang "c" (uid) {{{
			if(setuid(uid) == 0) {
				v = 1;
			}
		}}}
		return v
	}
	ELSE {
		nop uid
		ERROR NOT_SUPPORTED
	}
}

func setgid(gid as int) static as bool
{
	IFDEF "target_posix" {
		var v = false
		lang "c" (gid) {{{
			if(setgid(gid) == 0) {
				v = 1;
			}
		}}}
		return v
	}
	ELSE {
		nop gid
		ERROR NOT_SUPPORTED
	}
}

func seteuid(uid as int) static as bool
{
	IFDEF "target_posix" {
		var v = false
		lang "c" (uid) {{{
			if(seteuid(uid) == 0) {
				v = 1;
			}
		}}}
		return v
	}
	ELSE {
		nop uid
		ERROR NOT_SUPPORTED
	}
}

func setegid(gid as int) static as bool
{
	IFDEF "target_posix" {
		var v = false
		lang "c" (gid) {{{
			if(setegid(gid) == 0) {
				v = 1;
			}
		}}}
		return v
	}
	ELSE {
		nop gid
		ERROR NOT_SUPPORTED
	}
}

func getuid static as int
{
	IFDEF "target_posix" {
		return lang "c" as int {{{ getuid() }}}
	}
	ELSE {
		ERROR NOT_SUPPORTED
	}
}

func geteuid static as int
{
	IFDEF "target_posix" {
		return lang "c" as int {{{ geteuid() }}}
	}
	ELSE {
		ERROR NOT_SUPPORTED
	}
}

func getgid static as int
{
	IFDEF "target_posix" {
		return lang "c" as int {{{ getgid() }}}
	}
	ELSE {
		ERROR NOT_SUPPORTED
	}
}

func getegid static as int
{
	IFDEF "target_posix" {
		return lang "c" as int {{{ getegid() }}}
	}
	ELSE {
		ERROR NOT_SUPPORTED
	}
}
