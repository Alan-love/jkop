
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

const SIGHUP = 1
const SIGINT = 2
const SIGQUIT = 3
const SIGILL = 4
const SIGTRAP = 5
const SIGABRT = 6
const SIGFPE = 8
const SIGKILL = 9
const SIGSEGV = 11
const SIGPIPE = 13
const SIGALRM = 14
const SIGTERM = 15

func signalNumberToString(signum as int) static as string
{
	if signum == SIGHUP:
		return "SIGHUP"
	if signum == SIGINT:
		return "SIGINT"
	if signum == SIGQUIT:
		return "SIGQUIT"
	if signum == SIGILL:
		return "SIGILL"
	if signum == SIGTRAP:
		return "SIGTRAP"
	if signum == SIGABRT:
		return "SIGABRT"
	if signum == SIGFPE:
		return "SIGFPE"
	if signum == SIGKILL:
		return "SIGKILL"
	if signum == SIGSEGV:
		return "SIGSEGV"
	if signum == SIGPIPE:
		return "SIGPIPE"
	if signum == SIGALRM:
		return "SIGALRM"
	if signum == SIGTERM:
		return "SIGTERM"
	return "SIGUNKNOWN"
}

func trapSignal(signum as int, enabled as bool) static as bool
{
	IFDEF "target_sushi" {
		var n = enabled ? 1 : 0
		var o = lang "lua" as int {{{ _os:trap_signal(signum, n) }}}
		if o == 1:
			return true
		return false
	}
	ELSE {
		if enabled {
			setSignalHandler(signum, func {
			})
		}
		else {
			setSignalHandler(signum, null)
		}
		return true
	}
}

func setSignalHandler(signum as int, handler as function<void>?) static
{
	IFDEF "target_node_js" {
		var str = signalNumberToString(signum)
		var hh = handler
		if not hh:
			hh = func {
			}
		[magical:process]!.on!(str, hh)
	}
	ELSE {
		nop signum
		nop handler
		ERROR NOT_IMPLEMENTED
	}
}
