
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.env
import jk.json
import jk.thread
import jk.console
import jk.webclient
import jk.events

class:

func forHandler(handler as BufferEventHandler) static as this:
	return new this() {
		handler handler
	}

prop handler as BufferEventHandler
prop ctx as LoggingContext = new ConsoleApplicationContext()

func getBaseUrl as string
{
	var api = EnvironmentVariable.get("AWS_LAMBDA_RUNTIME_API")
	if String.isEmpty(api):
		Error.throw("environmentVariableMissing", "AWS_LAMBDA_RUNTIME_API")
	return "http://" .. api
}

func getInvocationUrl as string:
	return getBaseUrl() .. "/2018-06-01/runtime/invocation/next"

func getResponseUrl(requestId as string) as string:
	return getBaseUrl() .. "/2018-06-01/runtime/invocation/" .. requestId .. "/response"

func getErrorUrl(requestId as string) as string:
	return getBaseUrl() .. "/2018-06-01/runtime/invocation/" .. requestId .. "/error"

func getRequestId(headers as KeyValueList<string,string>) as string?
{
	foreach pair in headers.asVector() {
		if String.equalsIgnoreCase(pair.key, "Lambda-Runtime-Aws-Request-Id"):
			return pair.value
	}
	return null
}

func responseToBuffer(response as object) as buffer
{
	if response is buffer:
		return response as! buffer
	if response is string:
		return String.toUTF8Buffer(response as! string)
	var str = JSONEncoder.toString(response)
	return String.toUTF8Buffer(str)
}

func execute async
{
	var webClient = WebClient.instance()
	loop {
		var body as buffer?
		var requestId as string?
		try {
			var invocationUrl = getInvocationUrl()
			var reqq = await webClient.executeQuery(ctx, "GET", invocationUrl, null, null)
			if String.isEmpty(reqq.statusCode):
				Error.throw("noResponseStatusFromLambdaRuntimeApi", invocationUrl)
			var reqid = getRequestId(reqq.headers)
			if String.isEmpty(reqid):
				Error.throw("emptyRequestIdFromLambdaRuntimeapi", invocationUrl)
			if String.startsWith(reqq.statusCode, "2") == false:
				Log.warning(ctx, "Error status from Lambda runtime API: `" .. reqq.statusCode .. "'. Ignoring it.")
			body = reqq.body
			requestId = reqid
		}
		catch e {
			Log.error(ctx, "Error while calling lambda invocation URL: `" .. String.asValueOrEmptyString(e) .. "'. Trying again in one second..")
			CurrentThread.sleepSeconds(1)
			continue
		}
		if body == null || requestId == null {
			Log.error(ctx, "Invalid request received from lambda invocation URL. Trying again in one second..")
			CurrentThread.sleepSeconds(1)
			continue
		}
		Log.debug(ctx, "Handling request with ID: `" .. requestId .. "'")
		try {
			var response = handler.handleBufferEvent(body)
			var rb = responseToBuffer(response)
			await webClient.executeQuery(ctx, "POST", getResponseUrl(requestId), null, rb)
		}
		catch e {
			var eo = new DynamicMap()
			if e is ExceptionWithError {
				var ewe = e as! ExceptionWithError
				eo.setString("errorType", ewe.getErrorCode())
				eo.setString("errorMessage", String.asValueOrNull(ewe.getErrorDetail()))
			}
			else {
				eo.setString("errorType", "unknownError")
				eo.setString("errorMessage", String.asValueOrNull(e))
			}
			var errorJson = JSONEncoder.toString(eo)
			Log.error(ctx, errorJson)
			await webClient.executeQuery(ctx, "POST", getErrorUrl(requestId), null, String.toUTF8Buffer(errorJson))
		}
	}
}
