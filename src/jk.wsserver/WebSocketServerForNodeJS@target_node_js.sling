
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.lang.js
import jk.webserver

class is WebSocketServer:

depend "npm:ws:8.16.0"

var wss as dynamic?

func attachToWebServer(server as WebServer) async override throws Exception
{
	var nws = JsCommonModule.require("ws")
	var nodeServer = server as WebServerForNodeJS
	if not nodeServer:
		Error.throw("webServerIsNotNodeServer", server)
	var ss = nodeServer.getNodeServerInstance()
	wss = new (nws.WebSocketServer)({
		server ss
	})
	wss.on!("connection", func(ws as dynamic) async {
		var ff = factory
		var protocol = ff()
		protocol.sendFunction = func(data as buffer) async throws Exception => ws.send!(data)
		protocol.closeFunction = func(status as int, reason as string?) async {
			if ctx.isInDebugMode():
				Log.debug(ctx, "Close function called. Closing connection.")
			ws.terminate!(status, reason)
		}
		ws.on!("message", func(message as dynamic?) async {
			var buffer = Buffer.asValueOrNull(message)
			if buffer {
				try {
					await protocol.onMessageReceived(buffer)
				}
				catch e as Exception {
					Log.error(ctx, e.toString())
					ws.terminate!(1000, "Error")
				}
			}
		})
		ws.on!("close", func(code as dynamic?, reason as dynamic?) async {
			var str as string?
			if reason is buffer:
				str = String.forUTF8Buffer(reason as! buffer)
			if not str:
				str = String.asValueOrNull(reason)
			try {
				await protocol.onConnectionClosed(Integer.asValueOrDefaultValue(code), str)
			}
			catch e as Exception {
				Log.error(ctx, e.toString())
			}
		})
		ws.on!("error", func(error as dynamic?) async => await protocol.onConnectionError(Error.forCode("webSocketConnectionError", null, error)))
		try {
			await protocol.onConnectionOpened()
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
			ws.terminate!(1000, "Error")
		}
	})
	wss.on!("close", func => Log.debug(ctx, "Web socket server closed."))
	wss.on!("error", func(error as dynamic?) => Log.error(ctx, Error.forCode("webSocketServerError", null, error).toStringWithDebug(ctx.isInDebugMode())))
}
