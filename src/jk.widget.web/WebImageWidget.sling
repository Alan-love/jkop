
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.webclient

class is AsynchronousImageWidget #widget:

var widgetImage as Image

func forPlaceholderImage(context as GuiApplicationContext, image as Image) static as this
{
	var v = new this(context)
	v.setWidgetPlaceholderImage(image)
	return v
}

pvar widgetUseOverlay = false

ctor(context as GuiApplicationContext):
	base(context)

func setWidgetImageResource(resName as string)
{
	var img = onStartLoading(false)
	if img:
		img.setWidgetImageResource(resName)
	onEndLoading()
}

func getWidgetImage as Image:
	return widgetImage

func setWidgetImage(image as Image)
{
	var img = onStartLoading(false)
	widgetImage = image
	if img:
		img.setWidgetImage(image)
	onEndLoading()
}

func setWidgetImageUrl(url as string, headers as KeyValueList<string,string>, body as buffer) async virtual
{
	Log.debug(context, VALUE "__THIS__" .. ": Start loading image: `" .. url .."'")
	var img = onStartLoading(widgetUseOverlay)
	IFDEF "target_html" {
		if not headers {
			var path #used = url
			var imgo = new ImageForBrowser()
			var image as object
			lang "js" {{{
				image = new Image();
				image.src = path;
			}}}
			imgo.image = image
			img.setWidgetImage(imgo)
			widgetImage = imgo
			return
		}
	}
	var imgo = await doQueryImage(context, url, headers, body)
	onEndLoading()
	widgetImage = imgo
	img.setWidgetImage(imgo)
}

func doQueryImage(context as GuiApplicationContext, url as string, headers as KeyValueList<string,string>, body as buffer) async as Image
{
	var client = WebClient.instance()
	var response = await client.executeQuery(context, "GET", url, headers, body)
	var rbody = response.body
	if rbody == null || Buffer.getSize(rbody) < 1 {
		Log.error(context, VALUE "__THIS__" .. ": FAILED loading image: `" .. url .."'")
		Error.throw("failedToDownloadImage", url)
	}
	var mimeType as string
	var hdrv = response.headers.asVector()
	foreach hdr in hdrv {
		if String.equalsIgnoreCase(hdr.key, "content-type") {
			var vv = hdr.value
			if vv {
				var sc = String.getIndexOfCharacter(vv, ';')
				if sc < 0 {
					mimeType = vv
				}
				else {
					mimeType = String.getEndOfString(vv, sc)
				}
			}
		}
	}
	var imgo = context.getImageForBufferSync(rbody, mimeType)
	if not imgo {
		Log.error(context, VALUE "__THIS__" .. ": Failed to create image from the returned data")
		Error.throw("failedToCreateImage", null)
	}
	return imgo
}
