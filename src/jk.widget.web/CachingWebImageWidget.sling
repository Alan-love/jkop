
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.time
import jk.log
import jk.gfx.util
import jk.webclient

class is WebImageWidget #widget:

class CachedImage
{
	prop image as Image
	prop timeStamp as long
	prop ttl as long

	ctor:
		timeStamp = SystemClock.asSeconds()

	func isAvailable as bool:
		return image && ((SystemClock.asSeconds() - timeStamp) < ttl)

	func checkTTL
	{
		if (SystemClock.asSeconds() - timeStamp) >= ttl {
			timeStamp = SystemClock.asSeconds()
			image = null
		}
	}
}

prop widgetImageRounded as bool = false

var cacheMap static private as DynamicMap
var ttl static private as long = 60 * 5

func setTTL(seconds as long) static
{
	assert seconds >= 60
	ttl = seconds
}

func removeCachedImage(url as string, rounded as bool) static
{
	assert cacheMap && String.isNotEmpty(url)
	var key = (rounded) ? url .. "_rounded" : url .. "_raw"
	cacheMap.remove(key)
}

func queryImage(context as GuiApplicationContext, url as string, headers as KeyValueList<string,string>, body as buffer, rounded as bool) async private as Image
{
	if not cacheMap:
		cacheMap = new DynamicMap()
	var key = (rounded) ? url .. "_rounded" : url .. "_raw"
	var cachedImage = cacheMap.get(key) as CachedImage
	if not cachedImage {
		cachedImage = new CachedImage()
		cachedImage.ttl = ttl
		cacheMap.setObject(key, cachedImage)
	}
	cachedImage.checkTTL()
	if cachedImage.isAvailable():
		return cachedImage.image
	Log.debug(context, VALUE "__THIS__" .. ": Start loading image: `" .. url .."'")
	var image = await doQueryImage(context, url, headers, body)
	if rounded {
		cachedImage.image = ImageUtil.createCircularImageSync(image)
	}
	else {
		cachedImage.image = image
	}
	return cachedImage.image
}

func setWidgetImageUrl(url as string, headers as KeyValueList<string,string>, body as buffer) async override
{
	var img = onStartLoading(getWidgetUseOverlay())
	var imgo = await queryImage(context, url, headers, body, widgetImageRounded)
	onEndLoading()
	img.setWidgetImage(imgo)
}
