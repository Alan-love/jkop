
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.sql
import jk.log

class is SQLiteDatabase:

var sqldatabase as [magical:android.database.sqlite.SQLiteDatabase]?

class Statement is SQLStatement
{
	var error as string?
	var sql as string?
	var paramidx = 1
	var sqlstatement as [magical:android.database.sqlite.SQLiteStatement]?
	var sqldb as [magical:android.database.sqlite.SQLiteDatabase]?
	var params as [magical:@[java.util.Collection<java.lang.String>]]?

	dtor:
		clear()

	func clear
	{
		if sqlstatement {
			IFDEF "target_java" {
				lang "java" {{{
					paramidx = 1;
					sqlstatement.clearBindings();
					sqlstatement = null;
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					paramidx = 1
					sqlstatement!!.clearBindings()
					sqlstatement = null
				}}}
			}
		}
		else if params {
			IFDEF "target_java" {
				lang "java" {{{
					((java.util.LinkedList)params).clear();
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					(params as? kotlin.collections.ArrayList)!!.clear()
				}}}
			}
		}
	}

	func create(db as [magical:android.database.sqlite.SQLiteDatabase], asql as string) as bool
	{
		assert db
		assert asql
		sql = asql
		var str = String.split(sql, ' ')[0]
		var v = true
		IFDEF "target_java" {
			lang "java" {{{
				try {
					if(jk.lang.String.equalsIgnoreCase("select", str)) {
						sqldb = db;
						params = new java.util.LinkedList<java.lang.String>();
					}
					else {
						sqlstatement = db.compileStatement(sql);
					}
				}
				catch(java.lang.Exception e) {
					v = false;
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				try {
					if(jk.lang.String.equalsIgnoreCase("select", str)) {
						sqldb = db
						params = arrayListOf()
					}
					else {
						sqlstatement = db!!.compileStatement(sql)
					}
				}
				catch(e : kotlin.Exception) {
					v = false
				}
			}}}
		}
		return v
	}

	func addParamString(val as string) override
	{
		if sqlstatement {
			IFDEF "target_java" {
				lang "java" {{{
					sqlstatement.bindString(paramidx, val);
					paramidx++;
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					sqlstatement!!.bindString(paramidx, v)
					paramidx++
				}}}
			}
		}
		else {
			IFDEF "target_java" {
				lang "java" {{{
					params.add(val);
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					params!!.add(v)
				}}}
			}
		}
	}

	func addParamInteger(val as int) override
	{
		if sqlstatement {
			IFDEF "target_java" {
				lang "java" {{{
					sqlstatement.bindLong(paramidx, val);
					paramidx++;
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					sqlstatement!!.bindLong(paramidx, v!!.toLong())
					paramidx++
				}}}
			}
		}
		else {
			IFDEF "target_java" {
				lang "java" {{{
					params.add(java.lang.Integer.toString(val));
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					params!!.add(v.toString())
				}}}
			}
		}
	}

	func addParamLongInteger(val as long) override
	{
		if sqlstatement {
			IFDEF "target_java" {
				lang "java" {{{
					sqlstatement.bindLong(paramidx, val);
					paramidx++;
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					sqlstatement!!.bindLong(paramidx, v!!.toLong())
					paramidx++
				}}}
			}
		}
		else {
			IFDEF "target_java" {
				lang "java" {{{
					params.add(java.lang.Long.toString(val));
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					params!!.add(v!!.toString())
				}}}
			}
		}
	}

	func addParamDouble(val as double) override
	{
		if sqlstatement {
			IFDEF "target_java" {
				lang "java" {{{
					sqlstatement.bindDouble(paramidx, val);
					paramidx++;
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					sqlstatement!!.bindDouble(paramidx, v!!.toDouble())
					paramidx++
				}}}
			}
		}
		else {
			IFDEF "target_java" {
				lang "java" {{{
					params.add(java.lang.Double.toString(val));
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					params!!.add(v!!.toString())
				}}}
			}
		}
	}

	func addParamBlob(val as buffer) override
	{
		if sqlstatement {
			IFDEF "target_java" {
				lang "java" {{{
					sqlstatement.bindBlob(paramidx, val);
					paramidx++;
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					sqlstatement!!.bindBlob(paramidx, v!!.toByteArray())
					paramidx++
				}}}
			}
		}
	}

	func setParamString(name as string, val as string) override:
		addParamString(val)

	func setParamInteger(name as string, val as int) override:
		addParamInteger(val)

	func setParamLongInteger(name as string, val as long) override:
		addParamLongInteger(val)

	func setParamDouble(name as string, val as double) override:
		addParamDouble(val)

	func setParamBlob(name as string, val as buffer) override:
		addParamBlob(val)

	func resetStatement override throws Exception
	{
		if sqlstatement:
			clear()
	}

	func execute as bool
	{
		assert sqlstatement
		var str = String.split(sql, ' ')[0]
		var b as bool
		var err as string?
		IFDEF "target_java" {
			lang "java" {{{
				try {
					if(str.equalsIgnoreCase("insert")) {
						if(sqlstatement.executeInsert() != -1) {
							b = true;
						}
					}
					else if(str.equalsIgnoreCase("update") || str.equalsIgnoreCase("delete")) {
						if(sqlstatement.executeUpdateDelete() > 0) {
							b = true;
						}
					}
					else {
						sqlstatement.execute();
						b = true;
					}
				}
				catch(java.lang.Exception e) {
					err = "SQLite Error " + e;
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				try {
					if(str!!.equals("insert")) {
						if(sqlstatement!!.executeInsert() != -1L) {
							b = true
						}
					}
					else if(str!!.equals("update") || str!!.equals("delete")) {
						if(sqlstatement!!.executeUpdateDelete() > 0) {
							b = true
						}
					}
					else {
						sqlstatement!!.execute()
						b = true
					}
				}
				catch(e : Exception) {
					err = "SQLite Error " + e
				}
			}}}
		}
		if err:
			error = err
		return b
	}

	func executeUpdateDelete as int
	{
		assert sqlstatement
		var v = 0
		var err as string?
		IFDEF "target_java" {
			lang "java" {{{
				try {
					v = sqlstatement.executeUpdateDelete();
				}
				catch(java.lang.Exception e) {
					err = "SQLite Error " + e;
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				try {
					v = sqlstatement!!.executeUpdateDelete()
				}
				catch(e : Exception) {
					err = "SQLite Error " + e
				}
			}}}
		}
		if err:
			error = err
		return v
	}

	func getResult as [magical:android.database.Cursor]
	{
		assert sqldb
		var sqlcursor as [magical:android.database.Cursor]?
		IFDEF "target_java" {
			lang "java" {{{
				sqlcursor = sqldb.rawQuery(sql, (java.lang.String[])params.toArray(new java.lang.String[params.size()]));
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				sqlcursor = sqldb!!.rawQuery(sql, params!!.toArray() as? kotlin.Array<kotlin.String?>)
			}}}
		}
		return sqlcursor
	}
}

class ResultSet is SQLResultSetIterator
{
	var sqlcursor as [magical:android.database.Cursor]

	ctor(stmt as Statement):
		sqlcursor = stmt.getResult()

	func next override throws Exception as DynamicMap
	{
		step()
		var data = new DynamicMap()
		var cols = getColumnNames()
		for(var i = 0 ; i < Vector.getSize(cols) ; i++):
			data.setDynamic(Vector.getValue(cols, i), getColumnValue(i))
		return data
	}

	func nextValues(values as vector<dynamic?>) override throws Exception
	{
		step()
		Vector.clear(values)
		var cols = getColumnCount()
		for(var i = 0 ; i < cols ; i++):
			values += getColumnValue(i)
	}

	func step override throws Exception
	{
		var v as bool
		IFDEF "target_java" {
			v = lang "java" as bool {{{ sqlcursor.moveToNext() }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" as bool {{{ sqlcursor!!.moveToNext() }}}
		}
		if not v:
			Error.throw("noMoreRecords", this)
	}

	func getColumnCount override throws Exception as int
	{
		var v as int
		IFDEF "target_java" {
			v = lang "java" as int {{{ sqlcursor.getColumnCount() }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" as int {{{ sqlcursor!!.getColumnCount() }}}
		}
		return v
	}

	func getColumnName(n as int) override throws Exception as string
	{
		var v as string?
		IFDEF "target_java" {
			v = lang "java" as string {{{ sqlcursor.getColumnName(n) }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" as string {{{ sqlcursor!!.getColumnName(n) }}}
		}
		return v
	}

	func getColumnNames override throws Exception as vector<string>
	{
		var v = new vector<string>
		IFDEF "target_java" {
			lang "java" {{{
				for(java.lang.String name : sqlcursor.getColumnNames()) {
					jk.lang.Vector.appendValue(v, name);
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				var name = ""
				for(name in sqlcursor!!.getColumnNames()) {
					jk.lang.Vector.appendValue(v, name)
				}
			}}}
		}
		return v
	}

	func getColumnValue(n as int) override throws Exception as dynamic?
	{
		var type as int
		IFDEF "target_java" {
			type = lang "java" as int {{{ sqlcursor.getType(n) }}}
		}
		ELSE IFDEF "target_kotlin" {
			type = lang "kotlin" as int {{{ sqlcursor!!.getType(n) }}}
		}
		if type == 1:
			return Integer.asObject(getColumnInt(n))
		if type == 2:
			return Double.asObject(getColumnDouble(n))
		if type == 3 {
			var v as string?
			IFDEF "target_java" {
				v = lang "java" as string {{{ sqlcursor.getString(n) }}}
			}
			ELSE IFDEF "target_kotlin" {
				v = lang "kotlin" as string {{{ sqlcursor!!.getString(n) }}}
			}
			return v
		}
		if type == 4:
			return Buffer.wrapValue(getColumnBuffer(n))
		return null
	}

	func getColumnInt(n as int) override throws Exception as int
	{
		var v as int
		IFDEF "target_java" {
			v = lang "java" as int {{{ sqlcursor.getInt(n) }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" as int {{{ sqlcursor!!.getInt(n) }}}
		}
		return v
	}

	func getColumnDouble(n as int) override throws Exception as double
	{
		var v as double
		IFDEF "target_java" {
			v = lang "java" as double {{{ sqlcursor.getDouble(n) }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" as double {{{ sqlcursor!!.getDouble(n) }}}
		}
		return v
	}

	func getColumnBuffer(n as int) override throws Exception as buffer
	{
		var v as buffer?
		IFDEF "target_java" {
			v = lang "java" as buffer {{{ sqlcursor.getBlob(n) }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" as buffer {{{ sqlcursor!!.getBlob(n).toUByteArray() }}}
		}
		return v
	}

	func close override throws Exception
	{
		if sqlcursor {
			IFDEF "target_java" {
				lang "java" {{{
					sqlcursor.close();
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					sqlcursor!!.close()
				}}}
			}
		}
	}

	func hasNext override as bool
	{
		assert sqlcursor
		var v as bool
		IFDEF "target_java" {
			lang "java" {{{
				if(sqlcursor.getPosition() < sqlcursor.getCount()) {
					v = true;
				}
				else {
					v = false;
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				if(sqlcursor!!.getPosition() < sqlcursor!!.getCount()) {
					v = true
				}
				else {
					v = false
				}
			}}}
		}
		return v
	}

	func getColumnLong(n as int) stub override throws Exception as long
}

func initialize(file as File, openCreate as bool) override throws Exception as bool
{
	assert file
	if openCreate == false && file.isFile() == false {
		Log.error(getLogger(), "Database does not exist: " .. file.getPath())
		return false
	}
	var nativepath = file.getPath()
	if nativepath == null {
		Log.error(getLogger(), "Database file '" .. file.getPath() .. "' is not on a native filesystem. Cannot open.")
		return false
	}
	var v = true
	IFDEF "target_java" {
		lang "java" {{{
			try {
				sqldatabase = android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(nativepath, null);
			}
			catch(Exception e) {
				v = false;
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			try {
				sqldatabase = android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(nativepath, null)
			}
			catch(e : Exception) {
				v = false
			}
		}}}
	}
	if v {
		Log.debug(getLogger(), "Opened Sqlite database: '" .. file.getPath() .. "'")
	}
	else if openCreate {
		Log.error(getLogger(), "Failed to create database. Please check write permissions")
	}
	return v
}

func prepareStatement(sql as string) async override throws Exception as SQLStatement
{
	var stmt = new Statement()
	if not stmt.create(sqldatabase, sql):
		return null
	return stmt
}

func executeQueryStatement(stmt as SQLStatement) override async throws Exception as SQLResultSetIterator
{
	var ss = stmt as Statement
	if not ss {
		Log.debug(getLogger(), "SQLite query: null statement")
		return null
	}
	return new ResultSet(ss)
}

func executeStatement(stmt as SQLStatement) override async throws Exception as bool
{
	assert stmt
	var v as bool
	var ss = stmt as Statement
	if ss:
		v = ss.execute()
	return v
}

func executeUpdateDeleteStatement(stmt as SQLStatement) override async throws Exception as int
{
	var v = 0
	var ss = stmt as Statement
	if ss:
		v = ss.executeUpdateDelete()
	return v
}

func closeConnection async override throws Exception
{
	IFDEF "target_java" {
		lang "java" {{{
			if(sqldatabase != null) {
				sqldatabase.close();
				sqldatabase = null;
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			if(sqldatabase != null) {
				sqldatabase!!.close()
				sqldatabase = null
			}
		}}}
	}
}
