
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sql
import jk.log
import jk.fs

class is SQLDatabase abstract:

description [[
	SQLite database driver.
]]

func instance(ctx as LoggingContext) private static as this
{
	description [[
		Creates an instance of a class that inherits this class based on the target
		platform. Returns null if there is no implementation yet for the target
		platform.
	]]
	IFDEF "target_android" {
		return new SQLiteDatabaseForAndroid() {
			ctx ctx
		}
	}
	ELSE IFDEF "target_ios_objc" {
		return new SQLiteDatabaseIOS() {
			ctx ctx
		}
	}
	ELSE IFDEF "target_dotnet_cs" {
		return new SQLiteDatabaseForDotnetCS() {
			ctx ctx
		}
	}
	ELSE IFDEF "target_node_js" {
		return new SQLiteDatabaseForNodeJS() {
			ctx ctx
		}
	}
	ELSE IFDEF "target_gui" {
		nop ctx
		ERROR NOT_SUPPORTED
	}
	ELSE {
		nop ctx
		ERROR NOT_IMPLEMENTED
	}
}

func forFile(ctx as LoggingContext, file as File, allowCreate as bool = true) static throws Exception as this
{
	description [[
		Creates an instance of this class from the specified File object. If the object
		is not a file and the allowCreate property is set to true, then it will be
		created.
	]]
	var v = instance(ctx)
	if not file.isFile() {
		if allowCreate == false:
			Error.throw("fileDoesNotExist", file)
		var pp = file.getParent()
		if pp.isDirectory() == false:
			pp.createDirectoryRecursive()
		v.initialize(file, true)
	}
	else {
		v.initialize(file, false)
	}
	return v
}

func getDatabaseTypeId override as string
{
	description [[
		Returns a string with value 'sqlite'.
	]]
	return "sqlite"
}

func initialize(file as File, create as bool) virtual throws Exception
{
	description [[
		Initializes the database for the given file.
	]]
}

func checkIfTableExists(table as string) override async throws Exception as bool
{
	description [[
		Returns a boolean value which indicates if the supplied table name exists in the
		database.
	]]
	var stmt = await prepareStatement("SELECT name FROM sqlite_master WHERE type='table' AND name=?;")
	stmt.addParamString(table)
	var sr = await getSingleRowOrNull(stmt)
	if not sr:
		return false
	return String.equals(table, sr.getString("name"))
}

func getAllTableNames override async throws Exception as vector<string>
{
	description [[
		Returns a list of all table names in the database as vector object.
	]]
	var stmt = await prepareStatement("SELECT name FROM sqlite_master WHERE type='table';")
	var it = await executeQueryStatement(stmt)
	var v = new vector<string>
	foreach o in it {
		var name = o.getString("name")
		if String.isNotEmpty(name):
			v += name
	}
	return v
}

func columnToCreateString(cc as SQLTableColumnInfo) virtual as string
{
	description [[
		Creates the column definition part of the create table statement as a string
		with the supplied instance of SQLTableColumnInfo class.
	]]
	var sb = new StringBuilder()
	sb.appendString(cc.name)
	sb.appendCharacter(' ')
	var tt = cc.type
	if tt == SQLTableColumnInfo.TYPE_INTEGER_KEY {
		sb.appendString("INTEGER PRIMARY KEY AUTOINCREMENT")
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG_KEY {
		sb.appendString("BIGINT PRIMARY KEY AUTOINCREMENT")
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING_KEY {
		sb.appendString("TEXT PRIMARY KEY")
	}
	else if tt == SQLTableColumnInfo.TYPE_INTEGER {
		sb.appendString("INTEGER")
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG {
		sb.appendString("BIGINT")
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING {
		sb.appendString("VARCHAR(255)")
	}
	else if tt == SQLTableColumnInfo.TYPE_TEXT {
		sb.appendString("TEXT")
	}
	else if tt == SQLTableColumnInfo.TYPE_BLOB {
		sb.appendString("BLOB")
	}
	else if tt == SQLTableColumnInfo.TYPE_DOUBLE {
		sb.appendString("REAL")
	}
	else {
		Log.error(ctx, "Unknown column type: " .. String.forInteger(tt))
		sb.appendString("UNKNOWN")
	}
	return sb.toString()
}

func prepareCreateTableStatement(table as string, columns as vector<SQLTableColumnInfo>) async override throws Exception as SQLStatement
{
	description [[
		Creates the create table statement as a string with the supplied table name and
		the list of SQLTableColumnInfo objects that defines each column.
	]]
	var sb = new StringBuilder()
	sb.appendString("CREATE TABLE ")
	sb.appendString(table)
	sb.appendString(" (")
	var first = true
	foreach column in columns {
		if first == false:
			sb.appendCharacter(',')
		sb.appendCharacter(' ')
		sb.appendString(columnToCreateString(column))
		first = false
	}
	sb.appendString(" );")
	return await prepareStatement(sb.toString())
}

func prepareDeleteTableStatement(table as string) async override throws Exception as SQLStatement
{
	description [[
		Creates the drop table statement as a string with the supplied table name.
	]]
	var sb = new StringBuilder()
	sb.appendString("DROP TABLE ")
	sb.appendString(table)
	sb.appendString(";")
	return await prepareStatement(sb.toString())
}

func getLastInsertId(table as string) override async throws Exception as long
{
	description [[
		Returns the last insert ID as a long integer with the supplied table name.
	]]
	var v = await getSingleRowOrThrowError(await prepareStatement("SELECT ROWID AS id FROM " .. table .. " ORDER BY ROWID DESC LIMIT 1;"))
	return v.getLongInteger("id")
}

func prepareTypeAsString(tt as int) as string
{
	if tt == SQLTableColumnInfo.TYPE_INTEGER_KEY {
		return "INTEGER PRIMARY KEY AUTOINCREMENT"
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG_KEY {
		return "BIGINT PRIMARY KEY AUTOINCREMENT"
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING_KEY {
		return "TEXT PRIMARY KEY"
	}
	else if tt == SQLTableColumnInfo.TYPE_INTEGER {
		return "INTEGER"
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG {
		return "BIGINT"
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING {
		return "VARCHAR(255)"
	}
	else if tt == SQLTableColumnInfo.TYPE_TEXT {
		return "TEXT"
	}
	else if tt == SQLTableColumnInfo.TYPE_BLOB {
		return "BLOB"
	}
	else if tt == SQLTableColumnInfo.TYPE_DOUBLE {
		return "REAL"
	}
	Log.error(ctx, "Unknown column type: " .. String.forInteger(tt))
	return "UNKNOWN"
}

func checkIfAutoIncrement(table as string) async throws Exception as bool
{
	var stmtx = await prepareStatement("SELECT name FROM sqlite_master WHERE type='table' AND name=? AND sql LIKE '%AUTOINCREMENT%';")
	stmtx.addParamString(table)
	if not await getSingleRowOrNull(stmtx):
		return false
	return true
}

func getType(type as string, pk as string, table as string) async throws Exception as string
{
	if type == "INTEGER" && pk == "1" {
		if not await checkIfAutoIncrement(table):
			return "INTEGER PRIMARY KEY"
		return "INTEGER PRIMARY KEY AUTOINCREMENT"
	}
	else if type == "BIGINT" && pk == "1" {
		if not await checkIfAutoIncrement(table):
			return "BIGINT PRIMARY KEY"
		return "BIGINT PRIMARY KEY AUTOINCREMENT"
	}
	else if type == "TEXT" && pk == "1" {
		return "TEXT PRIMARY KEY"
	}
	return type
}

func checkIfColumnExists(table as string, column as string) override async throws Exception as bool
{
	description [[
		Returns a boolean value which indicates if the supplied column name exists
		within the supplied table in the database.
	]]
	var stmt = await prepareStatement("SELECT name FROM pragma_table_info('" .. table .. "') WHERE name=?;")
	stmt.addParamString(column)
	var v = await getSingleRowOrNull(stmt)
	if not v:
		return false
	return String.equalsIgnoreCase(v.getString("name"), column)
}

func checkIfColumnTypeMatches(table as string, column as SQLTableColumnInfo) override async throws Exception as bool
{
	description [[
		Returns a boolean value which indicates if the type of the supplied column
		within the supplied table matches the data type in database.
	]]
	var stmt = await prepareStatement("SELECT type, pk FROM pragma_table_info('" .. table .. "') WHERE name=?;")
	stmt.addParamString(column.name)
	var typk = await getSingleRowOrNull(stmt)
	if not typk:
		return false
	var type = prepareTypeAsString(column.type)
	var vtype = typk.getString("type")
	if not vtype:
		vtype = ""
	var pk = typk.getString("pk")
	if not pk:
		pk = "0"
	var ctype = await getType(vtype, pk, table)
	return String.equalsIgnoreCase(type, ctype)
}

func getIdentityColumnName(table as string) override async throws Exception as string?:
	ERROR NOT_IMPLEMENTED

func getPrimaryKeyColumnName(table as string) override async throws Exception as string?:
	ERROR NOT_IMPLEMENTED

func prepareCreateColumnStatement(table as string, column as SQLTableColumnInfo) async override throws Exception as SQLStatement:
	ERROR NOT_IMPLEMENTED

func prepareUpdateColumnTypeStatement(table as string, column as SQLTableColumnInfo) async override throws Exception as SQLStatement:
	ERROR NOT_IMPLEMENTED
