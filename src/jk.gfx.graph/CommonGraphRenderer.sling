
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.gfx.render
import jk.math

class is Renderer abstract:

const SHOW_VALUE_NONE = 0
const SHOW_VALUE_INT = 1
const SHOW_VALUE_DOUBLE = 2

prop title as string?
prop yTitle as string?
prop xTitle as string?
prop legends as vector<string>?
prop labels as vector<string>?
prop values as array<double>?
prop backgroundColor as Color?
prop showValue as int = SHOW_VALUE_NONE
prop textFont as string?
prop textColor as Color?
prop fontSizeMultiplier as double = 1.0

func getTextFont as string
{
	var v = textFont
	if not v:
		v = "Arial"
	return v
}

func getTextColor as Color
{
	var v = textColor
	if not v:
		v = Color.black()
	return v
}

func getValueDisplayString(n as int) as string?
{
	if not values:
		return null
	if sizeof values < n + 1:
		return null
	if showValue == SHOW_VALUE_INT:
		return String.forInteger(values[n] as int)
	if showValue == SHOW_VALUE_DOUBLE:
		return String.forDouble(values[n])
	return null
}

func render(ctx as RenderingContext, width as double, height as double, ppi as double) implement
{
	if backgroundColor {
		ctx.setFillStyle(backgroundColor)
		ctx.fillRect(0, 0, width, height)
	}
	var margin = 2.0
	var graphx = margin
	var graphy = margin
	var graphwidth = width - margin * 2
	var graphheight = height - margin * 2
	var title = this.title
	if String.isNotEmpty(title) {
		ctx.save()
		var titleFont = FontDescription.forFamily(getTextFont())
		var tfh = height * 0.035 * fontSizeMultiplier
		titleFont.size = Length.forPoints(tfh)
		ctx.setFillStyle(getTextColor())
		ctx.setFont(titleFont, ppi)
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
		ctx.fillText(title, width / 2, tfh / 2, 0)
		ctx.restore()
		graphy += tfh + margin
		graphheight -= (tfh + margin)
	}
	var xTitle = this.xTitle
	if String.isNotEmpty(xTitle) {
		ctx.save()
		var titleFont = FontDescription.forFamily(getTextFont())
		var tfh = height * 0.02 * fontSizeMultiplier
		titleFont.size = Length.forPoints(tfh)
		ctx.setFillStyle(getTextColor())
		ctx.setFont(titleFont, ppi)
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
		ctx.fillText(xTitle, width / 2, height - margin - tfh / 2, 0)
		ctx.restore()
		graphheight -= (tfh + margin)
	}
	var yTitle = this.yTitle
	if String.isNotEmpty(yTitle) {
		ctx.save()
		var titleFont = FontDescription.forFamily(getTextFont())
		var tfh = height * 0.02 * fontSizeMultiplier
		titleFont.size = Length.forPoints(tfh)
		ctx.setFillStyle(getTextColor())
		ctx.setFont(titleFont, ppi)
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
		ctx.translate(margin + tfh / 2, height / 2)
		ctx.rotate(-Math.M_PI / 2)
		ctx.fillText(yTitle, 0, 0, 0)
		ctx.restore()
		graphwidth -= (tfh + margin)
		graphx += tfh + margin
	}
	renderGraph(ctx, graphx, graphy, graphwidth, graphheight, ppi)
}

func renderGraph(ctx as RenderingContext, ox as double, oy as double, width as double, height as double, ppi as double) abstract
