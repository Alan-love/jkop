
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.thread

class is EventLoop abstract:

func createDefault static as this
{
	IFDEF "target_dotnet_cs" {
		return new IOManagerForDotnetCS()
	}
	ELSE IFDEF "target_objc" {
		return new IOManagerSelect()
	}
	ELSE IFDEF "target_std_java	" {
		return new IOManagerForStdJava()
	}
	ELSE IFDEF "target_kotlin" {
		return new IOManagerForKotlin()
	}
	ELSE IFDEF "target_sushi" {
		return new IOManagerForSushi()
	}
	ELSE IFDEF "target_swift" {
		return new IOManagerForSwift()
	}
	ELSE IFDEF "target_node_js" {
		ERROR NOT_SUPPORTED
	}
	ELSE IFDEF "target_browser" {
		ERROR NOT_SUPPORTED
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func setCurrent(iomgr as this) static:
	Thread.setLocalValue("__IOManager", iomgr)

func getCurrent static as this?:
	return try? Thread.getLocalValue("__IOManager") as this

func addWithReadListener(o as object, rrl as function<void>) virtual as IOManagerEntry?
{
	var v = add(o)
	if v:
		v.setReadListener(rrl)
	return v
}

func addWithWriteListener(o as object, wrl as function<void>) virtual as IOManagerEntry?
{
	var v = add(o)
	if v:
		v.setWriteListener(wrl)
	return v
}

func execute(ctx as LoggingContext) as bool
{
	setCurrent(this)
	var v = doExecute(ctx)
	Thread.removeLocalValue("__IOManager")
	return v
}

func add(o as object) abstract as IOManagerEntry?
func stop abstract
func doExecute(ctx as LoggingContext) abstract as bool

func startTimer(delay as long, handler as function<bool>) abstract as IOManagerTimer?
{
	description [[
		Starts a timer with an interval of "delay" microseconds and calls the "handler"
		function for each interval.
	]]
}

func runScheduled(timeout as long, runnable as Runnable) implement
{
	assert timeout >= 0
	var rr = runnable
	startTimer(timeout, func as bool {
		try rr.run()
		return false
	})
}

func runInBackground(runnable as Runnable) implement:
	Thread.start(runnable)
