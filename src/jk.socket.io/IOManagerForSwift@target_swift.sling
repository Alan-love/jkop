
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io
import jk.log
import jk.socket

class is IOManager:

class MyEntry is IOManagerEntry is FileDescriptor
{
	pvar fdo as FileDescriptor?
	pvar master as parent?

	var rrl as function<void>?
	var wrl as function<void>?
	var added = false

	func getFileDescriptor implement as int
	{
		if not fdo:
			return -1
		return fdo.getFileDescriptor()
	}

	func onReadReady
	{
		var rrl = this.rrl
		if rrl:
			rrl()
	}

	func onWriteReady
	{
		var wrl = this.wrl
		if wrl:
			wrl()
	}

	func setListeners(rrl as function<void>?, wrl as function<void>?) implement as bool
	{
		this.rrl = rrl
		this.wrl = wrl
		return update()
	}

	func setReadListener(rrl as function<void>?) implement as bool
	{
		this.rrl = rrl
		return update()
	}

	func setWriteListener(wrl as function<void>?) implement as bool
	{
		this.wrl = wrl
		return update()
	}

	func update as bool
	{
		remove()
		if not fdo || not master:
			return false
		if not rrl && not wrl:
			return true
		if rrl:
			master.addToReadList(this)
		if wrl:
			master.addToWriteList(this)
		added = true
		return true
	}

	func remove implement as bool
	{
		if not added || not master:
			return false
		master.removeFromReadList(this)
		master.removeFromWriteList(this)
		added = false
		return true
	}
}

var exitflag as bool
var running = false
var commpipewritefd = -1
var readlist as vector<IOManagerEntry>? = null
var writelist as vector<IOManagerEntry>? = null
var listActionQueue as vector<ListAction>? = null

ctor
{
	readlist = new vector<IOManagerEntry>
	writelist = new vector<IOManagerEntry>
}

class ListAction
{
	const ADD_TO_READ_LIST = 0
	const REMOVE_FROM_READ_LIST = 1
	const ADD_TO_WRITE_LIST = 2
	const REMOVE_FROM_WRITE_LIST = 3

	var entry public as IOManagerEntry?
	var op public as int

	ctor(entry as IOManagerEntry, op as int)
	{
		this.entry = entry
		this.op = op
	}
}

func addToReadList(entry as IOManagerEntry?)
{
	assert entry
	if listActionQueue {
		listActionQueue += new ListAction(entry, ListAction.ADD_TO_READ_LIST)
		return
	}
	readlist += entry
}

func addToWriteList(entry as IOManagerEntry?)
{
	assert entry
	if listActionQueue {
		listActionQueue += new ListAction(entry, ListAction.ADD_TO_WRITE_LIST)
		return
	}
	writelist += entry
}

func removeFromReadList(entry as IOManagerEntry?)
{
	assert entry
	if listActionQueue {
		listActionQueue += new ListAction(entry, ListAction.REMOVE_FROM_READ_LIST)
		return
	}
	if readlist:
		Vector.removeValue(readlist, entry)
}

func removeFromWriteList(entry as IOManagerEntry?)
{
	assert entry
	if listActionQueue {
		listActionQueue += new ListAction(entry, ListAction.REMOVE_FROM_WRITE_LIST)
		return
	}
	if writelist:
		Vector.removeValue(writelist, entry)
}

func add(o as object) override as IOManagerEntry?
{
	var fdo = o as FileDescriptor
	if not fdo:
		return null
	return new MyEntry().setMaster(this).setFdo(fdo)
}

func executeSelect(ctx as LoggingContext, fdr as [magical:@[inout fd_set]], fdw as [magical:@[inout fd_set]], timeout as int) private as bool #used
{
	var n = 0
	var fd as int
	lang "swift" (fdr, fdw) {{{
		JkSocket.SwiftSocketUtil.fdZero(&fdr)
		JkSocket.SwiftSocketUtil.fdZero(&fdw)
	}}}
	var rc = 0
	var wc = 0
	if readlist: foreach o as FileDescriptor in readlist {
		fd = o.getFileDescriptor()
		if fd < 0 {
			lang "swift" {{{
				JkSocket.SwiftSocketUtil.fdZero(&fdr)
				JkSocket.SwiftSocketUtil.fdZero(&fdw)
			}}}
			return true
		}
		if fd >= 0:
			lang "swift" {{{
				JkSocket.SwiftSocketUtil.fdSet(Int32(fd), &fdr)
			}}}
		if fd > n:
			n = fd
		rc++
	}
	if writelist: foreach o as FileDescriptor in writelist {
		fd = o.getFileDescriptor()
		if fd < 0 {
			lang "swift" {{{
				JkSocket.SwiftSocketUtil.fdZero(&fdr)
				JkSocket.SwiftSocketUtil.fdZero(&fdw)
			}}}
			return true
		}
		if fd >= 0:
			lang "swift" {{{
				JkSocket.SwiftSocketUtil.fdSet(Int32(fd), &fdw)
			}}}
		if fd > n:
			n = fd
		wc++
	}
	var nc = 0
	if n > 0:
		nc = n + 1
	var r #mutated = -1
	if timeout < 0 {
		lang "swift" {{{
			r = Int(select(Int32(nc), &fdr, &fdw, nil, nil))
		}}}
	}
	else {
		lang "swift" (timeout) {{{
			var tv = timeval()
			tv.tv_sec = Int(timeout) / 1000000
			tv.tv_usec = Int32(timeout) % 1000000
			r = Int(select(Int32(nc), &fdr, &fdw, nil, &tv))
		}}}
	}
	var v = false
	if r < 0 {
		var err as string? #mutated
		lang "swift" {{{
			if errno != EINTR {
				let ee = strerror(errno)
				if ee != nil {
					err = Swift.String(utf8String: ee!)
				}
			}
		}}}
		if err:
			Log.error(ctx, "Call to select() returned error status " .. String.forInteger(r) .. ": " .. err)
	}
	else if r > 0 {
		v = true
	}
	return v
}

func doExecute(ctx as LoggingContext) override as bool
{
	exitflag = false
	running = true
	var prd #mutated = -1
	var pfd #mutated = -1
	lang "swift" {{{
		var pipes: [Int32] = [0, 2]
		if pipe(&pipes) != 0 {
			JkLog.Log.error(ctx, "SelectEngine: Failed to create controller pipe")
			return false
		}
		prd = Int(pipes[0])
		pfd = Int(pipes[1])
		if prd < 0 || pfd < 0 {
			JkLog.Log.error(ctx, "SelectEngine: One of the controller pipes was invalid")
			return false
		}
	}}}
	var ee = add(StaticFileDescriptor.forFileDescriptor(prd))
	if ee:
		ee.setReadListener(func {
			var fd = prd
			IFDEF "target_swift" {
				lang "swift" (fd) {{{
					var b = UnsafeMutableRawPointer(bitPattern: 16)
					read(Int32(fd), b, 16)
				}}}
			}
		})
	var fdsetr as [magical:fd_set]? #mutated
	var fdsetw as [magical:fd_set]? #mutated
	lang "swift" (fdsetr, fdsetw) {{{
		fdsetr = fd_set()
		fdsetw = fd_set()
	}}}
	commpipewritefd = pfd
	Log.debug(ctx, "SelectEngine started")
	while exitflag == false {
		lang "swift" (fdsetr, fdsetw) {{{
			if (!self.executeSelect(ctx, &fdsetr!, &fdsetw!, -1)) {
				continue
			}
		}}}
		listActionQueue = new vector<ListAction>
		if readlist: foreach ele as MyEntry in readlist {
			var fd = ele.getFileDescriptor()
			lang "swift" (fd) {{{
				if fd < 0 || JkSocket.SwiftSocketUtil.fdIsSet(Int32(fd), &fdsetr!) {
					if fd >= 0 {
						JkSocket.SwiftSocketUtil.fdClr(Int32(fd), &fdsetr!)
					}
					ele?.onReadReady()
				}
			}}}
		}
		if writelist: foreach ele as MyEntry in writelist {
			var fd = ele.getFileDescriptor()
			lang "swift" (fd) {{{
				if fd < 0 || JkSocket.SwiftSocketUtil.fdIsSet(Int32(fd), &fdsetw!) {
					if fd >= 0 {
						JkSocket.SwiftSocketUtil.fdClr(Int32(fd), &fdsetw!)
					}
					ele?.onWriteReady()
				}
			}}}
		}
		var lq = listActionQueue
		listActionQueue = null
		foreach action as ListAction in lq {
			if action.op == ListAction.ADD_TO_READ_LIST {
				addToReadList(action.entry)
			}
			else if action.op == ListAction.REMOVE_FROM_READ_LIST {
				removeFromReadList(action.entry)
			}
			else if action.op == ListAction.ADD_TO_WRITE_LIST {
				addToWriteList(action.entry)
			}
			else if action.op == ListAction.REMOVE_FROM_WRITE_LIST {
				removeFromWriteList(action.entry)
			}
		}
	}
	lang "swift" {{{
		close(Int32(pipes[0]))
		close(Int32(pipes[1]))
	}}}
	commpipewritefd = -1
	running = false
	Log.debug(ctx, "SelectEngine ended")
	return true
}

func stop override
{
	exitflag = true
	if commpipewritefd >= 0 {
		lang "swift" {{{
			var c = 1
			write(Int32(commpipewritefd), &c, 1)
		}}}
	}
}

func isRunning as bool:
	return running

func startTimer(delay as long, handler as function<bool>) override as IOManagerTimer?:
	ERROR NOT_IMPLEMENTED
