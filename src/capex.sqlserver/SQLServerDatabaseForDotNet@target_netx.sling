
/*
 * This file is part of Jkop
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SQLServerDatabase imports cape imports capex.data:

IFDEF("target_mono") {
	depend "dll:System.Data.dll"
}

class Statement is SQLStatement
{
	func forSql(sql as string) static as this
	{
		assert String.isNotEmpty(sql)
		var v = new this()
		v.sql = SQLAdoNet.convertSQLString(sql)
		return v
	}

	var sql public as string

	func addParamString(val as string) as SQLStatement
	{
		// FIXME: No implementation yet
		return(this)
	}

	func addParamInteger(val as int) as SQLStatement
	{
		// FIXME: No implementation yet
		return(this)
	}

	func addParamDouble(val as double) as SQLStatement
	{
		// FIXME: No implementation yet
		return(this)
	}

	func addParamBlob(val as buffer) as SQLStatement
	{
		// FIXME: No implementation yet
		return(this)
	}

	func resetStatement
	{
		// FIXME: No implementation yet
	}

	func getError as string
	{
		return(null)
	}
}

class ResultSet is SQLResultSetIterator
{
	var reader public as !"System.Data.SqlClient.SqlDataReader"
	var connection public as !"System.Data.SqlClient.SqlConnection"

	dtor:
		close()

	func close override
	{
		if reader {
			reader.Close()
			reader = null
		}
		if connection {
			connection.Close()
			connection = null
		}
	}

	func nextValues(values as vector<object>) override as bool
	{
		assert values
		assert step()
		cape.Vector.clear(values)
		var cols = getColumnCount()
		var n as int
		for(n = 0; n < cols; n++) {
			var o = getColumnObject(n)
			if not o:
				o = ""
			values += o
		}
		return true
	}

	func step override as bool
	{
		lang "cs" {{{
			if(reader == null) {
				return(false);
			}
			if(reader.Read() == false) {
				close();
				return(false);
			}
		}}}
		return true
	}

	func getColumnCount override as int
	{
		var v = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.FieldCount;
			}
		}}}
		return(v)
	}

	func getColumnNames override as vector<string>
	{
		var v = new vector<string>
		var n as int
		var c = getColumnCount()
		for(n = 0; n < c; n++) {
			var nn = getColumnName(n)
			if not nn:
				nn = ""
			v += nn
		}
		return v
	}

	func getColumnName(n as int) override as string
	{
		var v as string = null
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetName(n);
			}
			if(v == null) {
				v = "";
			}
		}}}
		return(v)
	}

	func getColumnObject(n as int) override as object
	{
		assert reader
		var v as string = null
		lang "cs" {{{
			if(reader.IsDBNull(n)) {
				return(null);
			}
			if(reader.GetFieldType(n) == typeof(byte[])) {
				var b = (byte[])reader.GetValue(n);
				return(cape.Buffer.asObject(b));
			}
			var o = reader.GetValue(n);
			if(o == null) {
				return(null);
			}
			v = o.ToString();
			if(v == null) {
				return(null);
			}
		}}}
		return(v)
	}

	func getColumnInt(n as int) override as int
	{
		var v = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetInt32(n);
			}
		}}}
		return(v)
	}

	func getColumnDouble(n as int) override as double
	{
		var v as double = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetDouble(n);
			}
		}}}
		return(v)
	}

	func getColumnBuffer(n as int) override as buffer
	{
		var v as buffer = null
		lang "cs" {{{
			if(reader != null) {
				v = (byte[])reader.GetValue(n);
			}
		}}}
		return(v)
	}

	func next override as cape.DynamicMap
	{
		assert step()
		var names = getColumnNames()
		if not names || cape.Vector.getSize(names) < 1:
			return null
		var v = new cape.DynamicMap()
		var n as int
		for(n = 0; n < cape.Vector.getSize(names); n++) {
			v.set(cape.Vector.get(names, n), getColumnObject(n))
		}
		return v
	}
}

var connectionString as string

func initialize(serverAddress as string, username as string, password as string, database as string) override as bool
{
	setDatabaseName(database)
	connectionString = "Data Source=tcp:" .. serverAddress .. ";Initial Catalog=" .. database .. ";User Id=" .. username .. ";Password=" .. password
	Log.debug(getLogger(), "SQL Server connection string: '" .. connectionString .. "'")
	return(true)
}

func close override
{
	connectionString = null
}

func prepare(sql as string) override as SQLStatement
{
	return(Statement.forSql(sql))
}

func execute(stmt as SQLStatement) override as bool
{
	var ss = stmt as Statement
	assert ss
	var v = true
	var error as string = null
	lang "cs" {{{
		using(System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(connectionString)) {
			try {
				System.Console.WriteLine(ss.sql);
				System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(ss.sql, conn);
				conn.Open();
				// FIXME: Check if there are available parameters to include
				cmd.ExecuteNonQuery();
			}
			catch(System.Exception e) {
				error = e.ToString();
				v = false;
			}
		}
	}}}
	if error:
		Log.error(getLogger(), error)
	return v
}

func query(stmt as SQLStatement) override as SQLResultSetIterator
{
	var ss = stmt as Statement
	assert ss
	var v as ResultSet = null
	var error as string = null
	var reader as !"System.Data.SqlClient.SqlDataReader"
	var connection as !"System.Data.SqlClient.SqlConnection"
	lang "cs" {{{
		connection = new System.Data.SqlClient.SqlConnection(connectionString);
		try {
			System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand(ss.sql, connection);
			connection.Open();
			// FIXME: Check if there are available parameters to include
			reader = cmd.ExecuteReader();
		}
		catch(System.Exception e) {
			error = e.ToString();
			if(reader != null) {
				reader.Close();
				reader.Dispose();
				reader = null;
			}
			if(connection != null) {
				connection.Close();
				connection.Dispose();
				connection = null;
			}
		}
	}}}
	if reader {
		v = new ResultSet()
		v.reader = reader
		v.connection = connection
	}
	if error:
		Log.error(getLogger(), error)
	return v
}

func close(callback as function) override
{
	close()
	if(callback != null) {
		callback()
	}
}

func execute(stmt as SQLStatement, callback as function<void, bool>) override
{
	// FIXME: Do asynchronously
	var v = execute(stmt)
	if callback:
		callback(v)
}

func query(stmt as SQLStatement, callback as function<void, SQLResultSetIterator>) override
{
	// FIXME: Do asynchronously
	var v = query(stmt)
	if callback:
		callback(v)
}

func querySingleRow(stmt as SQLStatement, callback as function<void, DynamicMap>) override
{
	query(stmt, func(it as SQLResultSetIterator) {
		if callback {
			assert it {
				callback(null)
			}
			var v = it.next()
			it.close()
			callback(v)
		}
	})
}

func tableExists(table as string, callback as function<void, bool>) override
{
	var databaseName = getDatabaseName()
	if(table == null || databaseName == null) {
		callback(false)
		return
	}
	var stmt = prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ? AND table_name = ? LIMIT 1;")
	if(stmt == null) {
		callback(false)
		return
	}
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	querySingleRow(stmt, func(sr as DynamicMap) {
		if(sr == null) {
			callback(false)
			return
		}
		if(String.equals(table, sr.getString("TABLE_NAME")) == false) {
			callback(false)
			return
		}
		callback(true)
	})
}
