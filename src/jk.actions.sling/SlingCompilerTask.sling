
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.actions
import jk.process

class:

class BuildTaskProperties public
{
	prop name as string
	prop source as File
	prop compiler as string?
	prop temporaryDirectory as File?
	prop outputDirectory as File
	prop targetPlatform as string
	prop includeDirectories as vector<File>?
	prop customParameters as vector<string>?
}

class WebapiClientGeneratorTaskProperties public
{
	prop compiler as string?
	prop temporaryDirectory as File?
	prop sourcePath as File
	prop destPath as File
}

class BrushTaskProperties public
{
	prop compiler as string?
	prop files as vector<File>
}

func getSupportedPlatformsForCompiler(compiler as string) static throws Exception as vector<string>
{
	var pl = getSlingCompilerProcessLauncher(compiler)
	pl.addToParams("platforms")
	var output = pl.executeToString()
	var v = new vector<string>
	foreach plat in String.split(output, '\n') {
		if String.isNotEmpty(plat):
			v += plat
	}
	return v
}

func getSlingCompilerProcessLauncher(compiler as string?) static throws Exception as ProcessLauncher
{
	var cs = compiler
	if String.isEmpty(cs):
		Error.throw("noSlingCompilerSpecified", cs)
	if String.contains(cs, "/") {
		IFDEF "target_node_js" {
			if String.endsWith(cs, ".js") {
				var pl = ProcessLauncher.forFile(CurrentProcess.getInterpreterFileOrThrowError())
				pl.addToParams(cs)
				return pl
			}
			else {
				return ProcessLauncher.forString(cs)
			}
		}
		ELSE {
			return ProcessLauncher.forString(cs)
		}
	}
	return ProcessLauncher.forString("npx -y @eqela/slingc@" .. cs)
}

func executeSlingCompiler(ctx as LoggingContext, pl as ProcessLauncher, temporaryDirectory as File?) static throws Exception
{
	if var td = temporaryDirectory {
		pl.addToParams("-tmpdir")
		pl.addToParams(td.getPath())
	}
	if ctx.isInDebugMode():
		Log.debug(ctx, "Executing Sling compiler: `" .. String.asValueOrEmptyString(pl) .. "'")
	var r = pl.execute()
	if r != 0:
		Error.throw("errorWhenExecutingSlingCompiler", pl, null)
}

func createBuildTask(ctx as LoggingContext, properties as BuildTaskProperties) static as function<() async throws Exception>:
	return func async throws Exception {
		Log.info(ctx, "Executing " .. properties.targetPlatform .. " build: `" .. properties.source.getPath() .. "' ..")
		var pl = getSlingCompilerProcessLauncher(properties.compiler)
		if ctx.isInDebugMode():
			pl.addToParams("-debug")
		pl.addToParams("build-" .. properties.targetPlatform)
		pl.addToParams(properties.source.getPath())
		pl.addToParams("-output")
		pl.addToParams(properties.outputDirectory.getPath())
		if var includeDirectories = properties.includeDirectories: foreach incdir in includeDirectories {
			pl.addToParams("-include")
			pl.addToParams(incdir.getPath())
		}
		if properties.targetPlatform == "node":
			pl.addToParams("-npm-install")
		if var cps = properties.customParameters: foreach cp in cps:
			pl.addToParams(cp)
		executeSlingCompiler(ctx, pl, properties.temporaryDirectory)
	}

func createWebapiClientGeneratorTask(ctx as LoggingContext, properties as WebapiClientGeneratorTaskProperties) static as function<() async throws Exception>:
	return func async throws Exception {
		Log.info(ctx, "Generating Webapi clients: `" .. properties.sourcePath.getPath() .. "' ..")
		var pl = getSlingCompilerProcessLauncher(properties.compiler)
		if ctx.isInDebugMode():
			pl.addToParams("-debug")
		pl.addToParams("generate-webapi-clients")
		pl.addToParams(properties.sourcePath.getPath())
		pl.addToParams("-output")
		pl.addToParams(properties.destPath.getPath())
		executeSlingCompiler(ctx, pl, properties.temporaryDirectory)
	}

func createBrushTask(ctx as LoggingContext, properties as BrushTaskProperties) static as function<() async throws Exception>:
	return func async throws Exception {
		foreach file in properties.files {
			Log.info(ctx, "Brushing Sling code: `" .. file.getPath() .. "' ..")
			var pl = getSlingCompilerProcessLauncher(properties.compiler)
			if ctx.isInDebugMode():
				pl.addToParams("-debug")
			pl.addToParams("brush")
			pl.addToParams("-edit")
			pl.addToParams(file.getPath())
			if ctx.isInDebugMode():
				Log.debug(ctx, "Executing Sling brush command: `" .. String.asValueOrEmptyString(pl) .. "'")
			var r = pl.execute()
			if r != 0:
				Error.throw("failedToBrushSlingCode", file)
		}
	}
