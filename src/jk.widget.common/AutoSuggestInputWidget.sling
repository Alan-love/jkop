
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is TextInputWidget #widget:

class MyContainerWidget is ContainerWidget #widget
{
	pvar widget as Widget

	func onWidgetHeightChanged(height as int #notLiteral) override
	{
		foreach child in Widget.getChildren(this):
			Widget.move(child, Widget.getAbsoluteX(widget), Widget.getAbsoluteY(widget))
	}

	func computeWidgetLayout(widthConstraint as int #notLiteral) override
	{
		foreach child in Widget.getChildren(this) {
			Widget.layout(child, Widget.getWidth(widget))
			Widget.move(child, Widget.getAbsoluteX(widget), Widget.getAbsoluteY(widget))
		}
		Widget.setLayoutSize(this, widthConstraint, Widget.getHeight(this))
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetContext = ctx
	container = VerticalBoxWidget.forContext(widgetContext)
	setWidgetTextChangeHandler(func {
		onWidgetTextChanged()
	})
}

pvar defaultNoRecordMessage = "No record found"
pvar widgetValueChangeHandler as function
var widgetContext as GuiApplicationContext
var widgetItems as vector<string>
var container as VerticalBoxWidget
var myContainer as MyContainerWidget
var shown = false

func isWidgetShown as bool:
	return shown

func clearItems
{
	assert container
	Widget.removeChildrenOf(container)
}

func setWidgetItems(items as vector<string>):
	widgetItems = items

func getWidgetItems as vector<string>:
	return widgetItems

func createWidgetItem(title as string, isFirst as bool = false, index as int = 0) virtual as Widget
{
	var textColor = widgetContext.getStyleColor(VALUE "__THIS__", "textColor")
	if not textColor:
		textColor = Color.black()
	var backgroundColor = widgetContext.getStyleColor(VALUE "__THIS__", "backgroundColor")
	if not backgroundColor:
		backgroundColor = Color.white()
	var outlineColor = widgetContext.getStyleColor(VALUE "__THIS__", "outlineColor")
	if not outlineColor:
		outlineColor = Color.black()
	var outlineWidth = widgetContext.getStylePixels(VALUE "__THIS__", "outlineWidth")
	if outlineWidth < 1:
		outlineWidth = widgetContext.getHeightValue("1px")
	var padding = widgetContext.getStylePixels(VALUE "__THIS__", "padding")
	if padding < 1:
		padding = widgetContext.getHeightValue("1000um")
	var fontSize = widgetContext.getStylePixels(VALUE "__THIS__", "fontSize")
	if fontSize < 1:
		fontSize = widgetContext.getHeightValue("2mm")
	var t = title
	if String.isEmpty(t):
		t = defaultNoRecordMessage
	var ttitle final = t
	var lbl = LabelWidget.forText(widgetContext, t)
	lbl.setWidgetTextColor(textColor)
	var layer = new LayerWidget(widgetContext)
	var canvas = CanvasWidget.forColor(widgetContext, backgroundColor)
	canvas.setWidgetOutlineColor(outlineColor)
	canvas.setWidgetOutlineWidth(outlineWidth)
	layer.addWidget(canvas)
	layer.addWidget(LayerWidget.forWidget(widgetContext, lbl, padding))
	if String.isNotEmpty(title) {
		Widget.setWidgetClickHandler(layer, func {
			setWidgetText(ttitle)
			if widgetValueChangeHandler:
				widgetValueChangeHandler()
			closePopup()
		})
	}
	return layer
}

func showPopup
{
	assert container
	if shown:
		return
	var thisWidget final = this
	var parentLayer as LayerWidget
	var parent = Widget.getParent(thisWidget)
	while parent {
		if parent is LayerWidget:
			parentLayer = parent as! LayerWidget
		parent = Widget.getParent(parent)
	}
	assert parentLayer:
		ERROR "No LayerWidget was found in the widget tree. Cannot show suggestions dropdown!"
	myContainer = new MyContainerWidget(widgetContext)
	myContainer.setWidget(thisWidget)
	myContainer.addWidget(container)
	IFDEF "target_html" {
		HTMLDOM.addEventListener(HTMLDOM.getDocument(), "click", func {
			closePopup()
		})
	}
	parentLayer.addWidget(myContainer)
	var animationDestY final = Widget.getAbsoluteY(thisWidget)
	var ay final = widgetContext.getHeightValue("3mm")
	Widget.move(container, Widget.getAbsoluteX(thisWidget), (animationDestY + ay) as int)
	var anim = WidgetAnimation.forDuration(widgetContext, 300)
	anim.addCallback(func(completion as double) {
		var bgf = completion * 1.5
		if bgf > 1.0:
			bgf = 1.0
		Widget.move(container, Widget.getAbsoluteX(thisWidget), (animationDestY + ((1.0 - completion) * ay)) as int)
	})
	anim.start()
	shown = true
}

func closePopup
{
	if not shown:
		return
	var anim = WidgetAnimation.forDuration(widgetContext, 300)
	anim.addFadeOut(myContainer, true)
	anim.start()
	shown = false
}

func onWidgetTextChanged virtual
{
	clearItems()
	if String.getLength(getWidgetText()) < 3 {
		closePopup()
		return
	}
	searchStringFromItems(getWidgetText())
	showPopup()
}

func searchStringFromItems(value as string)
{
	if not widgetItems || Vector.isEmpty(widgetItems):
		addItemToList(null)
	foreach item in widgetItems {
		if String.contains(String.toLowerCase(item), String.toLowerCase(value)):
			addItemToList(item)
	}
	if Vector.getSize(Widget.getChildren(container)) < 1:
		addItemToList(null)
}

func addSuggestedItems
{
	if not widgetItems || Vector.isEmpty(widgetItems):
		addItemToList(null)
	var index = 0
	var isFirst = true
	foreach item in widgetItems {
		addItemToList(item, isFirst, index)
		isFirst = false
		index++
	}
}

func addItemToList(item as string, isFirst as bool = false, index as int = 0)
{
	var v = createWidgetItem(item, isFirst, index)
	if v:
		container.addWidget(v)
}
