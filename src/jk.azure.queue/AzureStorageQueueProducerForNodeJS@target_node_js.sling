
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.lang.js

class is AzureStorageQueueProducer:

depend "npm@azure/storage-queue:12.14.0"

prop account as string
prop accountKey as string

func getStorageQueueApi private static as dynamic:
	return JsCommonModule.require("@azure/storage-queue")

func getQueueServiceClient private as dynamic
{
	var api = getStorageQueueApi()
	var accountName = account
	var storageSharedKey = accountKey
	var endpoint = "https://" .. account .. ".queue.core.windows.net"
	var storageSharedKeyCredential = lang "js" (api, accountName, storageSharedKey) as dynamic {{{ new api.StorageSharedKeyCredential(accountName, storageSharedKey) }}}
	return lang "js" (api, endpoint, storageSharedKeyCredential) as dynamic {{{ new api.QueueServiceClient(endpoint, storageSharedKeyCredential) }}}
}

func getQueueClient(queueName as string) private throws Exception as dynamic
{
	var queueServiceClient = getQueueServiceClient()
	var v = queueServiceClient.getQueueClient!(queueName)
	if v == null:
		Error.throw("failedToGetQueueClient", null)
	return v
}

func createQueue(queueName as string) override async throws Exception as string
{
	var queueClient = getQueueClient(queueName)
	var createQueueResponse = await queueClient.create!()
	if not createQueueResponse:
		Error.throw("failedToCreateQueue", queueName)
	return String.asValueOrThrowError(createQueueResponse.requestId)
}

func sendMessageToQueue(queueName as string, message as string, ttlSeconds as long = 0) override async throws Exception as string
{
	var queueClient = getQueueClient(queueName)
	var option = {}
	if ttlSeconds > 0:
		option.messageTimeToLive = ttlSeconds
	var sendMessageResponse = await queueClient.sendMessage!(message, option)
	if not sendMessageResponse:
		Error.throw("failedToSendMessageToQueue", queueName)
	return String.asValueOrThrowError(sendMessageResponse.requestId)
}

func deleteQueue(queueName as string) override async throws Exception
{
	var queueClient = getQueueClient(queueName)
	await queueClient.delete!()
}
