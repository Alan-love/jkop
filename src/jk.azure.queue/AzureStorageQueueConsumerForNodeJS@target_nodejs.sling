
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.nodejs
import jk.lang

class is AzureStorageQueueConsumer:

depend "npm@azure/storage-queue:12.14.0"

prop account as string
prop accountKey as string

ctor(account as string, accountKey as string)
{
	this.account = account
	this.accountKey = accountKey
}

func getStorageQueueApi private static as dynamic:
	return NodeModule.require("@azure/storage-queue")

func getQueueServiceClient private as dynamic
{
	var api = getStorageQueueApi()
	var accountName = account
	var storageSharedKey = accountKey
	var endpoint = "https://"..account..".queue.core.windows.net"
	var storageSharedKeyCredential = lang "js" dynamic {{{ new api.StorageSharedKeyCredential(accountName, storageSharedKey) }}}
	return lang "js" dynamic {{{ new api.QueueServiceClient(endpoint, storageSharedKeyCredential) }}}
}

func getQueueClient(queueName as string) private as dynamic
{
	var queueServiceClient = getQueueServiceClient()
	if not queueServiceClient:
		Error.throw("queueServiceClientError", queueServiceClient)
	return queueServiceClient.getQueueClient(queueName)
}

func peekMessages(queueName as string, numberOfMessages as int = 1) override async as QueuePeekMessagesList
{
	var queueClient = getQueueClient(queueName)
	var option = {
		numberOfMessages numberOfMessages
	}
	var messages = await queueClient.peekMessages(option)
	var list = new QueuePeekMessagesList()
	var peekMessages = messages.peekedMessageItems
	for (var n=0; n <= (Integer.asInteger(peekMessages.length) - 1); n++) {
		var v = new QueuePeekMessagesModel()
		v.messageId = String.asString(peekMessages[n].messageId)
		v.insertedOn = String.asString(peekMessages[n].insertedOn)
		v.expiresOn = String.asString(peekMessages[n].expiresOn)
		v.dequeueCount = Integer.asInteger(peekMessages[n].dequeueCount)
		v.messageText = String.asString(peekMessages[n].messageText)
		list.addObjectToVectorField("list", v)
	}
	return list
}

func receiveMessage(queueName as string) override async as ReceivedMessageModel
{
	var queueClient = getQueueClient(queueName)
	var messages = await queueClient.receiveMessages()
	var receivedMessageItem = messages.receivedMessageItems[0]
	var v = new ReceivedMessageModel()
	if receivedMessageItem {
		v.messageId = String.asString(receivedMessageItem.messageId)
		v.insertedOn = String.asString(receivedMessageItem.insertedOn)
		v.expiresOn = String.asString(receivedMessageItem.expiresOn)
		v.popReceipt = String.asString(receivedMessageItem.popReceipt)
		v.nextVisibleOn = String.asString(receivedMessageItem.nextVisibleOn)
		v.dequeueCount = Integer.asInteger(receivedMessageItem.dequeueCount)
		v.messageText = String.asString(receivedMessageItem.messageText)
	}
	return v
}

func acknowledgeMessage(queueName as string, messageId as string, popReceipt as string) override async
{
	if String.isEmpty(messageId):
		Error.throw("emptyMessageId", null)
	if String.isEmpty(popReceipt):
		Error.throw("emptyPopReceipt", null)
	var queueClient = getQueueClient(queueName)
	await queueClient.deleteMessage(messageId, popReceipt)
}
