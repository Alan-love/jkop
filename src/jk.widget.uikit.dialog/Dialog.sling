
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.app.ui
import jk.widget
import jk.widget.common

class:

func message(context as GuiApplicationContext, message as string, widgetClickHandler as function = null) static
{
	assert context
	var popup = new PopupWidget(context)
	var dialog = new MessageDialogWidget(context)
	dialog.setWidgetText(message)
	dialog.setWidgetClickHandler(func {
		popup.hidePopup()
		if widgetClickHandler:
			widgetClickHandler()
	})
	dialog.setWidgetPopup(popup)
	popup.setWidgetContent(dialog)
	popup.showPopup(null)
}

func error(context as GuiApplicationContext, message as string, widgetClickHandler as function = null) static
{
	var popup = new PopupWidget(context)
	var dialog = new MessageDialogWidget(context)
	dialog.setWidgetPositiveDialog(false)
	dialog.setWidgetText(message)
	dialog.setWidgetPopup(popup)
	dialog.setWidgetClickHandler(func {
		popup.hidePopup()
		if widgetClickHandler:
			widgetClickHandler()
	})
	popup.setWidgetContent(dialog)
	popup.showPopup(null)
}

func yesno(context as GuiApplicationContext, message as string, widgetPositiveClickHandler as function, widgetNegativeClickHandler as function = null) static
{
	var popup = new PopupWidget(context)
	var dialog = new YesNoDialogWidget(context)
	dialog.setWidgetText(message)
	dialog.setWidgetPositiveClickHandler(func {
		popup.hidePopup()
		widgetPositiveClickHandler()
	})
	dialog.setWidgetNegativeClickHandler(func {
		popup.hidePopup()
		if widgetNegativeClickHandler:
			widgetNegativeClickHandler()
	})
	dialog.setWidgetPopup(popup)
	popup.setWidgetContent(dialog)
	popup.showPopup(null)
}

func content(context as GuiApplicationContext, widget as Widget) static as PopupWidget
{
	var popup = new PopupWidget(context)
	var dialog = new DialogFrameWidget(context)
	dialog.addWidget(LayerWidget.forWidget(context, widget, context.getStylePixels("jkop-kit", "padding", "4mm")))
	dialog.setWidgetPopup(popup)
	popup.setWidgetContent(dialog)
	popup.showPopup(null)
	return popup
}
