
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.lang.js

class is BlockCipher:

prop key as string
prop iv as string

func getIvBuffer as buffer:
	return String.toUTF8Buffer(iv)

func getBlockSize override as int:
	return 16

func encryptBlock(src as buffer, dest as buffer) override throws Exception
{
	var cipher = JsCommonModule.require("crypto").createCipheriv!("aes-128-ecb", key, null)
	cipher!.setAutoPadding!(false)
	var v = lang "js" as buffer {{{ Buffer.concat([ cipher.update(src), cipher.final() ]) }}}
	Buffer.copyFrom(dest, v, 0, 0, Buffer.getSize(v))
}

func decryptBlock(src as buffer, dest as buffer) override throws Exception
{
	var decipher = JsCommonModule.require("crypto").createDecipheriv!("aes-128-ecb", key, null)
	decipher!.setAutoPadding!(false)
	var v = lang "js" as buffer {{{ Buffer.concat([ decipher.update(src), decipher.final() ]) }}}
	Buffer.copyFrom(dest, v, 0, 0, Buffer.getSize(v))
}
