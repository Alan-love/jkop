
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class abstract:

func encryptString(data as string, cipher as this) static throws Exception as buffer:
	return encryptBuffer(String.toUTF8Buffer(data), cipher)

func decryptString(data as buffer, cipher as this) static throws Exception as string
{
	var db = decryptBuffer(data, cipher)
	return String.forUTF8Buffer(db)
}

func encryptBuffer(data as buffer, cipher as this) static throws Exception as buffer
{
	var bw = new BufferWriter()
	var ww = BlockCipherWriter.create(bw, cipher)
	var r = ww.write(data)
	ww.close()
	if r < Buffer.getSize(data):
		Error.throw("failedToWriteToBlockCipherWriter", data)
	return bw.getBuffer()
}

func decryptBuffer(data as buffer, cipher as this) static throws Exception as buffer
{
	var br = BufferReader.forBuffer(data)
	var rr = BlockCipherReader.create(br, cipher)
	var db = Buffer.allocate(Buffer.getSize(data))
	var ll = rr.read(db)
	var nptr as buffer? = db
	if Buffer.getSize(db) > ll:
		nptr = Buffer.resize(db, ll)
	if not nptr:
		nptr = Buffer.allocate(0)
	return nptr
}

func getBlockSize abstract as int
func encryptBlock(src as buffer, dest as buffer) abstract throws Exception
func decryptBlock(src as buffer, dest as buffer) abstract throws Exception
