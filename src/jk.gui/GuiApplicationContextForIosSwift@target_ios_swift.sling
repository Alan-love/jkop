
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.gfx
import jk.process
import [magical:UIKit]

class is GuiApplicationContext:

func getApplicationDataDirectory override throws Exception as File?:
	ERROR NOT_IMPLEMENTED

func getResourceImage(id as string) override throws Exception as Image
{
	if String.isEmpty(id):
		Error.throw("emptyIdForResourceImage")
	var cp = CurrentProcess.getExecutableFileOrThrowError()
	var bundleDir = cp.getParent()
	var f = bundleDir.entry(id .. ".png")
	if f.isFile() == false:
		f = bundleDir.entry(id .. ".jpg")
	if not f.isFile():
		Error.throw("notFile", f)
	return ImageForIosSwift.forFile(f)
}

class MyAlertDelegate implements [magical:UIAlertViewDelegate]
{
	IFDEF "target_ios_swift"
	{
		extend [magical:NSObject]

		ctor override:
			nop
	}

	pvar callback as function<void>?
	pvar okCallback as function<void>?
	pvar cancelCallback as function<void>?

	func onDismissed(index as int)
	{
		if index == 0 && cancelCallback != null {
			cancelCallback()
			return
		}
		if index == 1 && okCallback != null {
			okCallback()
			return
		}
		if callback != null:
			callback()
	}

	lang "swift" {{{
		func alertView(_ alertView: UIAlertView, didDismissWithButtonIndex buttonIndex: Int)
		{
			self.onDismissed(buttonIndex)
		}
	}}}
}

var myDelegate as MyAlertDelegate?

func getMyAlertDelegate private as MyAlertDelegate
{
	if not myDelegate:
		myDelegate = new MyAlertDelegate()
	return myDelegate
}

func showMessageDialog(title as string, message as string, callback as function<void>? = null) override
{
	var dg as MyAlertDelegate?
	if callback != null {
		dg = getMyAlertDelegate()
		dg.setCallback(callback)
	}
	lang "swift" {{{
		let alert = UIAlertView(title: title, message: message, delegate: dg, cancelButtonTitle: nil, otherButtonTitles:"OK")
		alert.show()
	}}}
}

func showConfirmDialog(title as string, message as string, okcallback as function<void>?, cancelcallback as function<void>?) override
{
	var dg as MyAlertDelegate?
	if okcallback != null || cancelcallback != null {
		dg = getMyAlertDelegate()
		dg.setOkCallback(okcallback)
		dg.setCancelCallback(cancelcallback)
	}
	lang "swift" {{{
		let alert = UIAlertView(title: title, message: message, delegate:dg, cancelButtonTitle: nil, otherButtonTitles:"No", "Yes")
		alert.show()
	}}}
}

func showErrorDialog(message as string, callback as function<void>? = null) override
{
	var dg as MyAlertDelegate?
	if callback != null {
		dg = getMyAlertDelegate()
		dg.setCallback(callback)
	}
	lang "swift" {{{
		let alert = UIAlertView(title: "ERROR", message: message, delegate: dg, cancelButtonTitle: nil, otherButtonTitles:"OK")
		alert.show()
	}}}
}

func getScreenTopMargin override as int
{
	var v as int #mutated = 0
	lang "swift" {{{
		let statusBarSize = UIApplication.shared.statusBarFrame.size
		v = Int(min(statusBarSize.width, statusBarSize.height))
	}}}
	return v
}

func getScreenWidth override as int:
	return lang "swift" as int {{{ Swift.Int(UIScreen.main.bounds.size.width) }}}

func getScreenHeight override as int:
	return lang "swift" as int {{{ Swift.Int(UIScreen.main.bounds.size.height) }}}

func getScreenDensity override as int:
	return IOSDeviceInfo.forCurrentDevice().dpi / getScreenScaleFactor()

func getScreenScaleFactor as double:
	return lang "swift" as double {{{ Swift.Double(UIScreen.main.nativeScale) }}}

func getHeightValue(spec as string) override as int:
	return jk.gfx.Length.asPixels(spec, getScreenDensity())

func getWidthValue(spec as string) override as int:
	return jk.gfx.Length.asPixels(spec, getScreenDensity())

class MyTimerObject is GuiApplicationContext.TimerObject
{
	prop timer as [magical:@[Foundation.Timer]]

	func cancel implement:
		lang "swift" {{{
			timer.invalidate()
		}}}
}

func startTimer(timeout as long, callback as function<void>) override as GuiApplicationContext.TimerObject
{
	var timer = lang "swift" (timeout, callback) as [magical:@[Foundation.Timer]] {{{
		Timer.scheduledTimer(withTimeInterval: Swift.Double(timeout) / 1000.0, repeats: false) { _ in
			callback()
		}
	}}}
	return new MyTimerObject() {
		timer timer
	}
}

func executeAsyncDelay(timeout as long) async override throws Exception:
	lang "swift" {{{
		try await _Concurrency.Task.sleep(for: .milliseconds(timeout))
	}}}

func enableKeepAwakeMode override
{
	// FIXME: [UIApplication sharedApplication].idleTimerDisabled = YES;
}

func disableKeepAwakeMode override
{
	// FIXME: [UIApplication sharedApplication].idleTimerDisabled = NO;
}
