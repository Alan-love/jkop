
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.log
import jk.thread
import jk.socket.io

class is WorkerManager:

prop ctx as LoggingContext

func executeWorker(worker as object, input as buffer, handler as function<void,buffer>) as bool
{
	assert worker
	var workerBuffer as buffer
	if worker is string {
		var id = worker as! string
		assert String.isNotEmpty(id):
			Log.error(ctx, "Empty worker ID given to executeWorker")
		var appdir = assert CommonPath.getAppDirectory():
			Log.error(ctx, "Failed to determine app directory")
		var file = appdir.entry(id .. ".lz")
		if not file.isFile() {
			file = appdir.entry(id .. ".lua")
			if not file.isFile():
				file = appdir.entry(id)
		}
		assert file.isFile():
			Log.error(ctx, "No such worker was found: `" .. id .. "'")
		assert workerBuffer = file.getContentsBuffer():
			Log.error(ctx, "Failed to read worker file: `" .. file.getPath() .. "'")
	}
	else if worker is File {
		var file = worker as! File
		assert workerBuffer = file.getContentsBuffer():
			Log.error(ctx, "Failed to read file: `" .. file.getPath() .. "'")
	}
	else if worker is buffer {
		workerBuffer = worker as! buffer
	}
	else {
		Log.error(ctx, "Unsupported worker object type given to executeWorker")
		return false
	}
	var iomgr = assert IOManager.getCurrent():
		Log.error(ctx, "There is no current IO manager. Unable to execute workers.")
	var thread = assert SushiThread.forCode(workerBuffer):
		Log.error(ctx, "Failed to create a sushi thread.")
	var reader = assert thread.startPiped(input):
		Log.error(ctx, "Failed to start piped sushi thread.")
	var ee = assert iomgr.add(reader) {
		Log.error(ctx, "Failed to register reader with IO manager.")
		if reader is Closable:
			(reader as! Closable).close()
	}
	ee.setReadListener(func {
		var buffer = malloc 8192
		var r = reader.read(buffer)
		if r < 1 {
			ee.remove()
			if reader is Closable:
				(reader as! Closable).close()
		}
		else if handler {
			if r == sizeof buffer {
				handler(buffer)
			}
			else {
				handler(Buffer.resize(buffer, r))
			}
		}
	})
	return true
}
