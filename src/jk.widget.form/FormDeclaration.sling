
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json
import jk.gfx
import jk.log

class:

func forDescription(context as LoggingContext, desc as string) static as this
{
	var v = new this()
	assert v.parseDescription(context, desc)
	return v
}

class Element public
{
	func forType(type as string) static as this
	{
		var v = new this()
		v.setPropertyString("type", type)
		return v
	}

	func forProperties(properties as DynamicMap) static as this
	{
		var v = new this()
		v.setProperties(properties)
		return v
	}

	pvar properties as DynamicMap
	pvar children as vector<this>

	func getId as string
	{
		assert properties
		return properties.getString("id")
	}

	func getType as string
	{
		assert properties
		return properties.getString("type")
	}

	func getLabel as string
	{
		assert properties
		return properties.getString("label")
	}

	func isType(type as string) as bool
	{
		assert properties
		assert type
		if properties.getString("type") == type:
			return true
		return false
	}

	func setPropertyObject(key as string, value as object)
	{
		assert key
		if not properties:
			properties = new DynamicMap()
		properties.setObject(key, value)
	}

	func setPropertyString(key as string, value as string):
		setPropertyString(key, value)

	func setPropertyInteger(key as string, value as int):
		setPropertyString(key, String.forInteger(value))

	func setPropertyDouble(key as string, value as double):
		setPropertyString(key, String.forDouble(value))

	func setPropertyBoolean(key as string, value as bool):
		setPropertyString(key, String.forBoolean(value))

	func getPropertyObject(key as string) as object
	{
		assert properties
		return properties.get(key)
	}

	func getPropertyDynamicVector(key as string) as DynamicVector
	{
		assert properties
		return properties.getDynamicVector(key)
	}

	func getPropertyVector(key as string) as vector
	{
		assert properties
		return properties.getVector(key)
	}

	func getPropertyString(key as string) as string
	{
		assert properties
		return properties.getString(key)
	}

	func getPropertyInteger(key as string) as int
	{
		assert properties
		return properties.getInteger(key)
	}

	func getPropertyDouble(key as string) as double
	{
		assert properties
		return properties.getDouble(key)
	}

	func getPropertyBoolean(key as string) as bool
	{
		assert properties
		return properties.getBoolean(key)
	}

	func addToChildren(element as this)
	{
		assert element
		if not children:
			children = new vector<this>
		children += element
	}
}

var root as Element
var stack as Stack<Element>

ctor
{
	clear()
}

func clear
{
	stack = new Stack<Element>()
	root = startVerticalContainer()
}

func getRoot as Element
{
	return root
}

func addElement(element as Element) as Element
{
	var current = stack.peek()
	if current:
		current.addToChildren(element)
	return element
}

func startVerticalContainer as Element #deprecated
{
	var v = Element.forType("VerticalContainer")
	addElement(v)
	stack.push(v)
	return v
}

func endVerticalContainer as Element #deprecated
{
	var cc = stack.peek()
	if cc && cc.isType("VerticalContainer"):
		stack.pop()
	return cc
}

func startHorizontalContainer as Element #deprecated
{
	var v = Element.forType("HorizontalContainer")
	addElement(v)
	stack.push(v)
	return v
}

func endHorizontalContainer as Element #deprecated
{
	var cc = stack.peek()
	if cc && cc.isType("HorizontalContainer"):
		stack.pop()
	return cc
}

func startGroup(id as string, title as string, description as string) as Element #deprecated
{
	var v = Element.forType("GroupContainer")
	v.setPropertyString("id", id)
	v.setPropertyString("title", title)
	v.setPropertyString("description", description)
	addElement(v)
	stack.push(v)
	return v
}

func endGroup as Element #deprecated
{
	var cc = stack.peek()
	if cc && cc.isType("GroupContainer"):
		stack.pop()
	return cc
}

func startTab(id as string, label as string) as Element #deprecated
{
	var v = Element.forType("TabContainer")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	addElement(v)
	stack.push(v)
	return v
}

func endTab as Element #deprecated
{
	var cc = stack.peek()
	if cc && cc.isType("TabContainer"):
		stack.pop()
	return cc
}

func addTextInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("TextInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addRawTextInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("RawTextInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addPasswordInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("PasswordInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addNameInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("NameInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addEmailAddressInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("EmailAddressInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addPhoneNumberInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("PhoneNumberInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addStreetAddressInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("StreetAddressInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addMultipleChoiceInputAsArray(id as string, label as string, description as string, values as array<string>) as Element #deprecated
{
	var vvs = new KeyValueList<string,string>()
	foreach value in values {
		var comps = String.split(value, ':', 2)
		var kk = Vector.get(comps, 0)
		var vv = Vector.get(comps, 1)
		if vv == null:
			vv = kk
		vvs.add(kk, vv)
	}
	return addMultipleChoiceInput(id, label, description, vvs)
}

func addMultipleChoiceInput(id as string, label as string, description as string, values as KeyValueList<string,string>) as Element #deprecated
{
	var v = Element.forType("MultipleChoiceInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	var vv = new DynamicVector()
	var it = values.iterate()
	while it {
		var kvp = it.next()
		if not kvp:
			break
		var m = new DynamicMap()
		m.setString("key", kvp.key)
		m.setString("value", kvp.value)
		vv.appendObject(m)
	}
	v.setPropertyObject("values", vv)
	return addElement(v)
}

func addDateInput(id as string, label as string, description as string, skipYears as int) as Element #deprecated
{
	var v = Element.forType("DateInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	v.setPropertyInteger("skipYears", skipYears)
	return addElement(v)
}

func addPhotoCaptureInput(id as string, label as string, description as string, defImage as Image) as Element #deprecated
{
	var v = Element.forType("PhotoCaptureInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	v.setPropertyObject("defaultImage", defImage)
	return addElement(v)
}

func addCodeInput(id as string, label as string, description as string, rows as int) as Element #deprecated
{
	var v = Element.forType("CodeInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	v.setPropertyInteger("rows", rows)
	return addElement(v)
}

func addTextAreaInput(id as string, label as string, description as string, rows as int) as Element #deprecated
{
	var v = Element.forType("TextAreaInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	v.setPropertyInteger("rows", rows)
	return addElement(v)
}

func addStaticTextElement(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("StaticTextElement")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addRadioGroupInput(id as string, label as string, description as string, groupname as string, items as vector<string>) as Element #deprecated
{
	var v = Element.forType("RadioGroupInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	v.setPropertyString("groupName", groupname)
	v.setPropertyObject("items", DynamicVector.forStringVector(items))
	return addElement(v)
}

func addCheckBoxInput(id as string, label as string, description as string, isChecked as bool) as Element #deprecated
{
	var v = Element.forType("CheckBoxInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	v.setPropertyBoolean("isChecked", isChecked)
	return addElement(v)
}

func addStringListInput(id as string, label as string, description as string) as Element #deprecated
{
	var v = Element.forType("StringListInput")
	v.setPropertyString("id", id)
	v.setPropertyString("label", label)
	v.setPropertyString("description", description)
	return addElement(v)
}

func addFieldsTo(context as LoggingContext, fields as vector, element as Element) as bool
{
	assert fields
	foreach field as DynamicMap in fields {
		Log.debug(context, "Form field: `" .. JSONEncoder.encode(field) .. "'")
		var e = Element.forProperties(field)
		var childFields = e.getPropertyVector("fields")
		if childFields:
			addFieldsTo(context, childFields, e)
		element.addToChildren(e)
	}
	return true
}

func parseDescription(context as LoggingContext, desc as string) as bool
{
	clear()
	var data = assert JSONParser.parseString(desc) as DynamicMap:
		Log.error(context, "Failed to parse form description: `" .. desc .. "'")
	assert addFieldsTo(context, data.getVector("fields"), root):
		Log.error(context, "Failed to generate form from field list")
	return true
}
