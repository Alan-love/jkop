
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.test

class is TestSuite:

func initialize override
{
	testSuiteName = "Vector tests"
	addToTestCases(new TestCase() {
		name "Test vector methods"
		handler func async {
			var vc = new vector<string>
			var astr = "a"
			Vector.appendValue(vc, astr)
			TestCaseUtil.ASSERT(Vector.getSize(vc) == 1)
			TestCaseUtil.ASSERT(Vector.containsValue(vc, astr))
			TestCaseUtil.ASSERT(Vector.getValue(vc, 0) == astr)
			Vector.insertValue(vc, "b", 1)
			TestCaseUtil.ASSERT(Vector.getSize(vc) == 2)
			TestCaseUtil.ASSERT(Vector.getValue(vc, 1) == "b")
			Vector.setValue(vc, 1, "c")
			TestCaseUtil.ASSERT(Vector.getValue(vc, 1) == "c")
			Vector.removeIndex(vc, 0)
			TestCaseUtil.ASSERT(Vector.getSize(vc) == 1)
			TestCaseUtil.ASSERT(Vector.getValue(vc, 0) == "c")
			TestCaseUtil.ASSERT(Vector.isEmpty(vc) == false)
			Vector.clear(vc)
			TestCaseUtil.ASSERT(Vector.isEmpty(vc))
			Vector.appendValue(vc, "a")
			Vector.appendValue(vc, "b")
			Vector.appendValue(vc, "c")
			Vector.appendValue(vc, "d")
			Vector.removeRange(vc, 1, 2)
			TestCaseUtil.ASSERT(Vector.getSize(vc) == 2)
			TestCaseUtil.ASSERT(Vector.getValue(vc, 0) == "a")
			TestCaseUtil.ASSERT(Vector.getValue(vc, 1) == "d")
			Vector.clear(vc)
			Vector.appendValue(vc, "d")
			Vector.appendValue(vc, "a")
			Vector.appendValue(vc, "c")
			Vector.appendValue(vc, "b")
			Vector.sortAsStrings(vc)
			TestCaseUtil.ASSERT(Vector.getValue(vc, 0) == "a")
			TestCaseUtil.ASSERT(Vector.getValue(vc, 1) == "b")
			TestCaseUtil.ASSERT(Vector.getValue(vc, 2) == "c")
			TestCaseUtil.ASSERT(Vector.getValue(vc, 3) == "d")
		}
	})
}
