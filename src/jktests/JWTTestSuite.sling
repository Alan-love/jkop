
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.jwt
import jk.test
import jk.time
import jk.slon
import jk.random
import jk.base64

class is TestSuite:

func generateRandom64ByteKey as string
{
	var v = Buffer.allocate(64)
	for(var n = 0 ; n < 64 ; n++):
		v[n] = Random.getSharedInstance().nextIntegerWithMaximum(256) as! uint8
	return Base64Encoder.encode(v)
}

func initialize override
{
	testSuiteName = "JWT Tests"
	addToTestCases(new TestCase() {
		name "Test HS256 functionality"
		handler func(ctx as LoggingContext) async throws Exception {
			var key = generateRandom64ByteKey()
			Log.info(ctx, "[HS256] Using key: " .. key)
			var jwt = new JWT() {
				claims new DynamicMap()
			}
			jwt.setAudience("http://test.audience")
			jwt.setExpirationTime(SystemClock.asUTCSeconds() + 60)
			var odata = SLONEncoder.toString(jwt.claims)
			TestCaseUtil.ASSERT(String.isNotEmpty(odata))
			Log.info(ctx, "[HS256] Original claims: " .. odata)
			var token = jwt.generateTokenWithHS256(String.toUTF8Buffer(key))
			TestCaseUtil.ASSERT(String.isNotEmpty(token))
			Log.info(ctx, "[HS256] Token: " .. token)
			var njwt = JWT.decode(token, new map {
				hs256 String.toUTF8Buffer(key)
			})
			var ndata = SLONEncoder.toString(njwt.claims)
			TestCaseUtil.ASSERT(String.isNotEmpty(ndata))
			Log.info(ctx, "[HS256] Decoded claims: " .. ndata)
			var wrongKey = generateRandom64ByteKey()
			TestCaseUtil.ASSERT(String.equals(key, wrongKey) == false)
			Log.info(ctx, "[HS256] Using wrong key: " .. wrongKey)
			TestCaseUtil.EXPECT_EXCEPTION(JWT.decode(token, new map {
				hs256 String.toUTF8Buffer(wrongKey)
			}))
		}
	})
}
