
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.env
import jk.test

class is TestSuite:

func initialize override
{
	testSuiteName = "File System Tests"
	addToTestCases(new TestCase() {
		name "Test move file"
		handler func async {
			var tf1 = TemporaryFile.create()
			var tf2 = TemporaryFile.create()
			TestCaseUtil.ASSERT(tf1.isFile())
			TestCaseUtil.ASSERT(tf2.isFile())
			TestCaseUtil.EXPECT_EXCEPTION(tf1.move(tf2, false))
			tf1.move(tf2, true)
			TestCaseUtil.ASSERT(tf1.isFile() == false)
			TestCaseUtil.ASSERT(tf2.isFile() == true)
			tf2.remove()
			TestCaseUtil.ASSERT(tf2.isFile() == false)
		}
	})
	addToTestCases(new TestCase() {
		name "Test rename file"
		handler func async {
			var td = TemporaryDirectory.create()
			TestCaseUtil.ASSERT(td.isDirectory() == true)
			var tf1 = td.entry("file1")
			var tf2 = td.entry("file2")
			var tf3 = td.entry("file3")
			tf1.setContentsUTF8("data")
			TestCaseUtil.ASSERT(tf1.getContentsUTF8() == "data")
			tf1.rename("file2", false)
			TestCaseUtil.ASSERT(tf1.isFile() == false)
			TestCaseUtil.ASSERT(tf2.isFile() == true)
			TestCaseUtil.ASSERT(tf2.getContentsUTF8() == "data")
			tf3.touch()
			TestCaseUtil.ASSERT(tf3.isFile() == true)
			TestCaseUtil.ASSERT(tf3.getContentsUTF8() == "")
			TestCaseUtil.EXPECT_EXCEPTION(tf2.rename("file3", false))
			TestCaseUtil.ASSERT(tf2.isFile() == true)
			TestCaseUtil.ASSERT(tf3.isFile() == true)
			TestCaseUtil.ASSERT(tf3.getContentsUTF8() == "")
			tf2.rename("file3", true)
			TestCaseUtil.ASSERT(tf2.isFile() == false)
			TestCaseUtil.ASSERT(tf3.isFile() == true)
			TestCaseUtil.ASSERT(tf3.getContentsUTF8() == "data")
			td.removeRecursive()
			TestCaseUtil.ASSERT(tf3.isFile() == false)
			TestCaseUtil.ASSERT(td.isDirectory() == false)
		}
	})
}
