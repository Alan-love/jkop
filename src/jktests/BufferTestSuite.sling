
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.test

class is TestSuite:

func initialize override
{
	testSuiteName = "Buffer Tests"
	addToTestCases(new TestCase() {
		name "Test getting of buffer size"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			TestCaseUtil.ASSERT(Buffer.getSize(buff) == 11)
		}
	})
	addToTestCases(new TestCase() {
		name "Test getting of int8 on buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			TestCaseUtil.ASSERT(Buffer.getInt8(buff, 2) == 108)
		}
	})
	addToTestCases(new TestCase() {
		name "Test setting of byte on buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			var byteOn4thIndexBefore = Buffer.getInt8(buff, 4)
			Buffer.setByte(buff, 4, 100 as uint8)
			var byteOn4thIndexAfter = Buffer.getInt8(buff, 4)
			TestCaseUtil.ASSERT(byteOn4thIndexBefore == 111 && byteOn4thIndexAfter == 100)
		}
	})
	addToTestCases(new TestCase() {
		name "Test resizing of buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			var strSizeBefore = Buffer.getSize(buff)
			var strResized = Buffer.resize(buff, 5)
			var strSizeAfter = Buffer.getSize(strResized)
			TestCaseUtil.ASSERT(strSizeBefore == 11 && strSizeAfter == 5)
		}
	})
	addToTestCases(new TestCase() {
		name "Test copying of buffer"
		handler func async {
			var strA = "Hello World"
			var strABuffer = String.toUTF8Buffer(strA)
			var byteInIndex1Before = Buffer.getInt8(strABuffer, 1)
			var strB = "Testing Copy Form Func"
			var strBBuffer = String.toUTF8Buffer(strB)
			var byteInIndex3 = Buffer.getInt8(strBBuffer, 3)
			Buffer.copyFrom(strABuffer, strBBuffer, 1, 1, 1)
			var byteInIndex1After = Buffer.getInt8(strABuffer, 1)
			TestCaseUtil.ASSERT(byteInIndex1Before == 101)
			TestCaseUtil.ASSERT(byteInIndex3 == 116)
			TestCaseUtil.ASSERT(byteInIndex1After == 101)
		}
	})
	addToTestCases(new TestCase() {
		name "Test getting of int16LE on buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			TestCaseUtil.ASSERT(Buffer.getInt16LE(buff, 4) == 8303)
		}
	})
	addToTestCases(new TestCase() {
		name "Test getting of int16BE on buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			TestCaseUtil.ASSERT(Buffer.getInt16BE(buff, 4) == 28448)
		}
	})
	addToTestCases(new TestCase() {
		name "Test getting of int32LE on buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			TestCaseUtil.ASSERT(Buffer.getInt32LE(buff, 4) == 1867980911)
		}
	})
	addToTestCases(new TestCase() {
		name "Test getting of int32BE on buffer"
		handler func async {
			var str = "Hello World"
			var buff = String.toUTF8Buffer(str)
			TestCaseUtil.ASSERT(Buffer.getInt32BE(buff, 4) == 1864390511)
		}
	})
	addToTestCases(new TestCase() {
		name "Test buffer literals"
		handler func async {
			var buffer = new buffer { 0x00, 0x01, 0x02, 0x03, 0x04 }
			TestCaseUtil.ASSERT(Buffer.getSize(buffer) == 5)
			TestCaseUtil.ASSERT(Buffer.getInt8(buffer, 0) == 0x00)
			TestCaseUtil.ASSERT(Buffer.getInt8(buffer, 1) == 0x01)
			TestCaseUtil.ASSERT(Buffer.getInt8(buffer, 2) == 0x02)
			TestCaseUtil.ASSERT(buffer[0] == 0x00)
			TestCaseUtil.ASSERT(buffer[1] == 0x01)
			TestCaseUtil.ASSERT(buffer[2] == 0x02)
			TestCaseUtil.ASSERT(buffer[3] == 0x03)
			TestCaseUtil.ASSERT(buffer[4] == 0x04)
		}
	})
	addToTestCases(new TestCase() {
		name "Test forInt methods"
		handler func async {
			var b1 = Buffer.forInt16BE(0x0102 as uint16)
			TestCaseUtil.ASSERT(b1[0] == 0x01)
			var b2 = Buffer.forInt16LE(0x0304 as uint16)
			TestCaseUtil.ASSERT(b2[0] == 0x04)
			var b3 = Buffer.forInt32BE(0x01020304 as uint32)
			TestCaseUtil.ASSERT(b3[0] == 0x01)
			var b4 = Buffer.forInt32LE(0x01020304 as uint32)
			TestCaseUtil.ASSERT(b4[0] == 0x04)
			var b5 = Buffer.forInt64BE(0x0102030405060708)
			TestCaseUtil.ASSERT(b5[0] == 0x01)
			var b6 = Buffer.forInt64LE(0x0102030405060708)
			TestCaseUtil.ASSERT(b6[0] == 0x08)
			var ff = 0xcafebabe as float
			var b7 = Buffer.forFloat32BE(ff)
			TestCaseUtil.ASSERT(b7[0] == 0x4f)
			var b8 = Buffer.forFloat32LE(ff)
			TestCaseUtil.ASSERT(b8[0] == 0xbb)
			var b9 = Buffer.forDouble64BE(123.456)
			TestCaseUtil.ASSERT(b9[0] == 0x40)
			var b10 = Buffer.forDouble64LE(123.456)
			TestCaseUtil.ASSERT(b10[0] == 0x77)
		}
	})
}
