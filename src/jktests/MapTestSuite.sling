
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.test

class is TestSuite:

func initialize override
{
	testSuiteName = "Map Tests"
	addToTestCases(new TestCase() {
		name "Test map Methods"
		handler func async {
			var map = new map<string,string>
			Map.set(map, "key", "value")
			TestCaseUtil.ASSERT(Map.count(map) == 1)
			Map.set(map, "secondKey", "secondValue")
			var nmap = Map.dup(map)
			TestCaseUtil.ASSERT(Map.count(nmap) == 2)
			TestCaseUtil.ASSERT(Map.count(map) == 2)
			TestCaseUtil.ASSERT(Map.containsKey(map, "key"))
			TestCaseUtil.ASSERT(Map.containsKey(map, "secondKey"))
			TestCaseUtil.ASSERT(Map.containsKey(map, "thirdKey") == false)
			TestCaseUtil.ASSERT(Map.containsValue(map, "value"))
			TestCaseUtil.ASSERT(Map.containsValue(map, "secondValue"))
			TestCaseUtil.ASSERT(Map.containsValue(map, "thirdValue") == false)
			TestCaseUtil.ASSERT(Map.getValue(map, "key") == "value")
			TestCaseUtil.ASSERT(Map.getValue(map, "secondKey") == "secondValue")
			Map.remove(map, "key")
			TestCaseUtil.ASSERT(Map.count(map) == 1)
			TestCaseUtil.ASSERT(Map.containsKey(map, "key") == false)
			TestCaseUtil.ASSERT(Map.containsValue(map, "value") == false)
			TestCaseUtil.ASSERT(Map.getValue(map, "key") == null)
			Map.clear(map)
			var asMap = Map.asValueOrThrowError({
				data "value"
			})
			TestCaseUtil.ASSERT(Map.getValue(asMap, "data1") == null)
			TestCaseUtil.ASSERT(Map.count(map) == 0)
		}
	})
}
