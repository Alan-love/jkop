
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.test

class is TestSuite:

func initialize override
{
	testSuiteName = "String Tests"
	addToTestCases(new TestCase() {
		name "Test String Operations"
		handler func async {
			var str = "My Test String"
			TestCaseUtil.ASSERT(String.forInteger(12345) == "12345")
			TestCaseUtil.ASSERT(String.forLongInteger(1550113105) == "1550113105")
			TestCaseUtil.ASSERT(String.forIntegerHex(6869) == "1ad5")
			TestCaseUtil.ASSERT(String.forIntegerOctal(6869) == "15325")
			TestCaseUtil.ASSERT(String.forCharacter('h') == "h")
			TestCaseUtil.ASSERT(String.forFloat(3.01f) == "3.01")
			TestCaseUtil.ASSERT(String.forDouble(3.22) == "3.22")
			TestCaseUtil.ASSERT(String.getLength(str) == 14)
			TestCaseUtil.ASSERT(String.appendString(str, ": AA") == "My Test String: AA")
			TestCaseUtil.ASSERT(String.toUpperCase(str) == "MY TEST STRING")
			TestCaseUtil.ASSERT(String.toLowerCase(str) == "my test string")
			TestCaseUtil.ASSERT(String.getChar(str, 1) == 'y')
			TestCaseUtil.ASSERT(String.equals(str, "My Test String"))
			TestCaseUtil.ASSERT(String.equalsIgnoreCase(str, "my test string"))
			TestCaseUtil.ASSERT(String.compare("aa", "bb") == -1)
			TestCaseUtil.ASSERT(String.compare("aaa", "aa") == 1)
			TestCaseUtil.ASSERT(String.compareIgnoreCase("aa", "BB") == -1)
			TestCaseUtil.ASSERT(String.getHashCode(str) != 0)
			TestCaseUtil.ASSERT(String.getHashCode(str) == String.getHashCode(str))
			TestCaseUtil.ASSERT(String.getHashCode("aaa") != String.getHashCode("bbb"))
			TestCaseUtil.ASSERT(String.getIndexOfCharacter(str, 'M') == 0)
			TestCaseUtil.ASSERT(String.getIndexOfString(str, "M") == 0)
			TestCaseUtil.ASSERT(String.getLastIndexOfCharacter(str, 'T') == 3)
			TestCaseUtil.ASSERT(String.getLastIndexOfString(str, "g") == 13)
			TestCaseUtil.ASSERT(String.getEndOfString(str, 3) == "Test String")
			TestCaseUtil.ASSERT(String.getSubString(str, 3, 4) == "Test")
			TestCaseUtil.ASSERT(String.contains(str, "My"))
			TestCaseUtil.ASSERT(String.contains(str, "MyX") == false)
			TestCaseUtil.ASSERT(String.startsWith(str, "My"))
			TestCaseUtil.ASSERT(String.endsWith(str, "ing"))
			TestCaseUtil.ASSERT(String.strip(" A ") == "A")
			TestCaseUtil.ASSERT(String.replaceCharacter(str, 'M', 'm') == "my Test String")
			TestCaseUtil.ASSERT(String.replaceString(str, "My", "mY") == "mY Test String")
			var chars = String.toCharArray(str)
			TestCaseUtil.ASSERT(sizeof chars == 14)
			TestCaseUtil.ASSERT(Double.forString("4.001") == 4.001)
			TestCaseUtil.ASSERT(String.forUTF8Buffer(String.toUTF8Buffer(str)) == str)
			TestCaseUtil.ASSERT(String.forCharArray(chars, 0, 14) == str)
			TestCaseUtil.ASSERT(String.forCharArray(chars, 1, 12) == "y Test Strin")
			TestCaseUtil.ASSERT(String.getIndexOfString("", "Hello World") == -1)
			TestCaseUtil.ASSERT(String.getIndexOfString("Hello World", "Hello World") == 0)
			TestCaseUtil.ASSERT(String.getIndexOfString("xHello World", "Hello World") == 1)
			TestCaseUtil.ASSERT(String.getIndexOfString("Hello", "") == 0)
			TestCaseUtil.ASSERT(String.getIndexOfString("", "") == 0)
			TestCaseUtil.ASSERT(String.getIndexOfCharacter("", 'c') == -1)
			TestCaseUtil.ASSERT(String.getIndexOfCharacter("Hello World", 'H') == 0)
			TestCaseUtil.ASSERT(String.getIndexOfCharacter("xHello World", 'H') == 1)
			TestCaseUtil.ASSERT(String.getIndexOfCharacter("Hello", 0 as char) == -1)
		}
	})
	addToTestCases(new TestCase() {
		name "Test Code String"
		handler func async {
			var str = "\n/* xxx\n * testing\n */\n"
			var it = String.iterateAsCharacterIterator(str)
			var start = it.getCurrentPosition()
			TestCaseUtil.ASSERT(it.getCurrentChar() < 1)
			TestCaseUtil.ASSERT(it.getNextChar() == '\n')
			TestCaseUtil.ASSERT(it.getCurrentChar() == '\n')
			var pos = it.getCurrentPosition()
			TestCaseUtil.ASSERT(it.getNextChar() == '/')
			TestCaseUtil.ASSERT(it.getNextChar() == '*')
			it.setCurrentPosition(pos)
			TestCaseUtil.ASSERT(it.getCurrentChar() == '\n')
			TestCaseUtil.ASSERT(it.getNextChar() == '/')
			TestCaseUtil.ASSERT(it.getNextChar() == '*')
			TestCaseUtil.ASSERT(it.getNextChar() == ' ')
			TestCaseUtil.ASSERT(it.getNextChar() == 'x')
			TestCaseUtil.ASSERT(it.getNextChar() == 'x')
			TestCaseUtil.ASSERT(it.getNextChar() == 'x')
			TestCaseUtil.ASSERT(it.getNextChar() == '\n')
			TestCaseUtil.ASSERT(it.getNextChar() == ' ')
			it.setCurrentPosition(start)
			TestCaseUtil.ASSERT(it.getCurrentChar() < 1)
			TestCaseUtil.ASSERT(it.getNextChar() == '\n')
		}
	})
	addToTestCases(new TestCase() {
		name "Test Simple String"
		handler func async {
			var str = "Simple Test"
			var it = String.iterateAsCharacterIterator(str)
			TestCaseUtil.ASSERT(it.getNextChar() == 'S')
			TestCaseUtil.ASSERT(it.getNextChar() == 'i')
			TestCaseUtil.ASSERT(it.getNextChar() == 'm')
			TestCaseUtil.ASSERT(it.getNextChar() == 'p')
			TestCaseUtil.ASSERT(it.getCurrentChar() == 'p')
			it.moveToPreviousChar()
			TestCaseUtil.ASSERT(it.getCurrentChar() == 'm')
			it.moveToPreviousChar()
			TestCaseUtil.ASSERT(it.getCurrentChar() == 'i')
			TestCaseUtil.ASSERT(it.getNextChar() == 'm')
			TestCaseUtil.ASSERT(it.getNextChar() == 'p')
			TestCaseUtil.ASSERT(it.getNextChar() == 'l')
			TestCaseUtil.ASSERT(it.getNextChar() == 'e')
			TestCaseUtil.ASSERT(it.getNextChar() == ' ')
			TestCaseUtil.ASSERT(it.getNextChar() == 'T')
			TestCaseUtil.ASSERT(it.getNextChar() == 'e')
			TestCaseUtil.ASSERT(it.getNextChar() == 's')
			TestCaseUtil.ASSERT(it.getNextChar() == 't')
			TestCaseUtil.ASSERT(it.getNextChar() < 1)
		}
	})
	addToTestCases(new TestCase() {
		name "Test Multibyte String"
		handler func async {
			var str = "Häviääkö?"
			TestCaseUtil.ASSERT(String.getLength(str) == 9)
			TestCaseUtil.ASSERT(String.getChar(str, 0) == 'H')
			TestCaseUtil.ASSERT(String.getChar(str, 1) == 'ä')
			TestCaseUtil.ASSERT(String.getChar(str, 2) == 'v')
			var it = String.iterateAsCharacterIterator(str)
			TestCaseUtil.ASSERT(it.getNextChar() == 'H')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getNextChar() == 'v')
			TestCaseUtil.ASSERT(it.getNextChar() == 'i')
			var pos = it.getCurrentPosition()
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getCurrentChar() == 'ä')
			it.moveToPreviousChar()
			TestCaseUtil.ASSERT(it.getCurrentChar() == 'ä')
			it.moveToPreviousChar()
			TestCaseUtil.ASSERT(it.getCurrentChar() == 'i')
			it.moveToPreviousChar()
			TestCaseUtil.ASSERT(it.getNextChar() == 'i')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getNextChar() == 'k')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ö')
			TestCaseUtil.ASSERT(it.getNextChar() == '?')
			TestCaseUtil.ASSERT(it.getNextChar() < 1)
			it.setCurrentPosition(pos)
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ä')
			TestCaseUtil.ASSERT(it.getNextChar() == 'k')
			TestCaseUtil.ASSERT(it.getNextChar() == 'ö')
			TestCaseUtil.ASSERT(it.getNextChar() == '?')
			TestCaseUtil.ASSERT(it.getNextChar() < 1)
		}
	})
}
