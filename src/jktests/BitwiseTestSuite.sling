
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.sha
import jk.test

class is TestSuite:

func initialize override
{
	testSuiteName = "Bitwise Tests"
	addToTestCases(new TestCase() {
		name "Bitwise Operations"
		handler func(ctx as LoggingContext) async throws Exception {
			var bits64 = 0x1020304050607080
			var mask = 0xFF00000000000000
			var a = bits64 & mask
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(a) == "1000000000000000")
			var b = bits64 & 0x00FF000000000000
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(b) == "20000000000000")
			var c = bits64 & 0x0000FF0000000000
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(c) == "300000000000")
			var d = bits64 & 0x000000FF00000000
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(d) == "4000000000")
			var e = bits64 & 0x00000000FF000000
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(e) == "50000000")
			var f = bits64 & 0x0000000000FF0000
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(f) == "600000")
			var g = bits64 & 0x000000000000FF00
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(g) == "7000")
			var h = bits64 & 0x00000000000000FF
			TestCaseUtil.ASSERT(String.forUnsignedInteger64Hex(h) == "80")
			// "WITH BIT SHIFT"
			TestCaseUtil.ASSERT((a >> 56) as! int == 16)
			TestCaseUtil.ASSERT((b >> 48) as! int == 32)
			TestCaseUtil.ASSERT((c >> 40) as! int == 48)
			TestCaseUtil.ASSERT((d >> 32) as! int == 64)
			TestCaseUtil.ASSERT((e >> 24) as! int == 80)
			TestCaseUtil.ASSERT((f >> 16) as! int == 96)
			TestCaseUtil.ASSERT((g >> 8) as! int == 112)
			TestCaseUtil.ASSERT(h as! int == 128)
		}
	})
}
