
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.socket
import jk.log
import jk.fs

class is ConnectedSocket abstract:

func createInstance(ctx as LoggingContext, cSocket as ConnectedSocket, serverAddress as string? = null, certFile as File? = null, keyFile as File? = null, isServer as bool = false, acceptInvalidCertificate as bool = false, passphrase as string? = null) static as this
{
	IFDEF "target_dotnet_cs" {
		var v = new SSLSocketForDotnetCS() {
			ctx ctx
			acceptInvalidCertificate acceptInvalidCertificate
			requireClientCertificate false
			serverAddress serverAddress
		}
		if not v.open(cSocket, certFile, keyFile, isServer, passphrase):
			Error.throw("failedToCreateSslSocketForConnectedSocket", cSocket)
		return v
	}
	ELSE IFDEF "target_java" {
		var v = new SSLSocketJava() {
			ctx ctx
			acceptInvalidCertificate acceptInvalidCertificate
			requireClientCertificate false
			serverAddress serverAddress
		}
		if not v.open(cSocket, certFile, keyFile, isServer, passphrase):
			Error.throw("failedToCreateSslSocketForConnectedSocket", cSocket)
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = new SSLSocketForKotlin() {
			ctx ctx
			acceptInvalidCertificate acceptInvalidCertificate
			requireClientCertificate false
			serverAddress serverAddress
		}
		if not v.open(cSocket, certFile, keyFile, isServer, passphrase):
			Error.throw("failedToCreateSslSocketForConnectedSocket", cSocket)
		return v
	}
	ELSE IFDEF "target_sushi" {
		var v = new SSLSocketForSushi() {
			ctx ctx
			acceptInvalidCertificate acceptInvalidCertificate
			requireClientCertificate false
			serverAddress serverAddress
		}
		if not v.open(cSocket, certFile, keyFile, isServer, passphrase):
			Error.throw("failedToCreateSslSocketForConnectedSocket", cSocket)
		return v
	}
	ELSE IFDEF "target_node_js" {
		var v = new SSLSocketForNodeJS() {
			ctx ctx
			acceptInvalidCertificate acceptInvalidCertificate
			requireClientCertificate false
			serverAddress serverAddress
		}
		v.open(cSocket, certFile, keyFile, isServer, passphrase)
		return v
	}
	ELSE {
		ERROR "notImplemented"
	}
}

func forClient(ctx as LoggingContext, cSocket as ConnectedSocket, hostAddress as string?, acceptInvalidCertificate as bool = false, passphrase as string? = null) static as this:
	return createInstance(ctx, cSocket, hostAddress, null, null, false, acceptInvalidCertificate, passphrase)

func forServer(ctx as LoggingContext, cSocket as ConnectedSocket, certFile as File? = null, keyFile as File? = null, acceptInvalidCertificate as bool = false, passphrase as string? = null) static as this:
	return createInstance(ctx, cSocket, null, certFile, keyFile, true, acceptInvalidCertificate, passphrase)

prop ctx as LoggingContext
prop acceptInvalidCertificate as bool = false
prop requireClientCertificate as bool = false
prop serverAddress as string?

func close abstract
func read(buffer as buffer) abstract as int
func readWithTimeout(buffer as buffer, timeout as int) abstract as int
func write(buffer as buffer, size as int) abstract as int
func getSocket abstract as ConnectedSocket
