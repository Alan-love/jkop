
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class:

prop ctx as LoggingContext
prop sendFunction as function<(buffer) async throws Exception>?
prop closeFunction as function<(int,string?) async>?

func onConnectionOpened async virtual throws Exception
{
	if ctx.isInDebugMode():
		Log.debug(ctx, "New WebSocket connection received.")
}

func onConnectionClosed(code as int, reason as string?) async virtual throws Exception
{
	if ctx.isInDebugMode():
		Log.debug(ctx, "WebSocket connection closed [CODE: " .. String.asValueOrEmptyString(code) .. " REASON: " .. reason .. "]")
}

func onConnectionError(error as Error) async virtual:
	nop

func onMessageReceived(message as buffer) async virtual throws Exception:
	nop

func sendString(str as string) async virtual throws Exception:
	await sendMessage(String.toUTF8Buffer(str))

func sendMessage(data as buffer) async virtual throws Exception
{
	var sf = sendFunction
	if sf:
		await sf(data)
}

func closeConnection async virtual
{
	var cf = closeFunction
	if cf:
		await cf(1000, null)
}

func closeConnectionWithReason(statusCode as int, reason as string?) async virtual
{
	var cf = closeFunction
	if cf:
		await cf(statusCode, reason)
}
