
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

var isWindowsFlag private static as BooleanObject
var isLinuxFlag private static as BooleanObject
var isMacOSFlag private static as BooleanObject
var isAndroidFlag private static as BooleanObject
var isIOSFlag private static as BooleanObject

func isWindows static as bool
{
	if isWindowsFlag:
		return isWindowsFlag.toBoolean()
	var v = isSystemType("windows")
	isWindowsFlag = Boolean.asObject(v)
	return v
}

func isLinux static as bool
{
	if isLinuxFlag:
		return isLinuxFlag.toBoolean()
	var v = isSystemType("linux")
	isLinuxFlag = Boolean.asObject(v)
	return v
}

func isMacOS static as bool
{
	if isMacOSFlag:
		return isMacOSFlag.toBoolean()
	var v = isSystemType("osx")
	isMacOSFlag = Boolean.asObject(v)
	return v
}

func isOSX static as bool:
	return isMacOS()

func isAndroid static as bool
{
	if isAndroidFlag:
		return isAndroidFlag.toBoolean()
	var v = isSystemType("android")
	isAndroidFlag = Boolean.asObject(v)
	return v
}

func isIOS static as bool
{
	if isIOSFlag:
		return isIOSFlag.toBoolean()
	var v = isSystemType("ios")
	isIOSFlag = Boolean.asObject(v)
	return v
}

func isSystemType(id as string) static as bool
{
	IFDEF "target_cs" {
		IFDEF("target_dotnet4") {
			var v = false
			if(id == "windows") {
				lang "cs" {{{
					if(System.Environment.OSVersion.Platform == System.PlatformID.Win32NT ||
						System.Environment.OSVersion.Platform == System.PlatformID.Win32S ||
						System.Environment.OSVersion.Platform == System.PlatformID.Win32Windows ||
						System.Environment.OSVersion.Platform == System.PlatformID.WinCE ||
						System.Environment.OSVersion.Platform == System.PlatformID.Xbox) {
							v = true;
					}
				}}}
				return(v)
			}
			if(id == "osx") {
				lang "cs" {{{
					if(System.Environment.OSVersion.Platform == System.PlatformID.MacOSX) {
						v = true;
					}
				}}}
				if(v) {
					return(v)
				}
				if(isSystemType("posix") == false) {
					return(false)
				}
				if(File.forPath("/Applications").isDirectory()) {
					return(true)
				}
				return(false)
			}
			if(id == "posix" || id == "linux" || id == "unix") {
				lang "cs" {{{
					if(System.Environment.OSVersion.Platform == System.PlatformID.Unix) {
						v = true;
					}
				}}}
				return(v)
			}
		}
		ELSE {
			if(id == "windows") {
				var c as int
				lang "cs" {{{
					c = System.IO.Path.Directo
					rySeparatorChar;
				}}}
				if(c == '\\') {
					return(true)
				}
				return(false)
			}
			if(id == "osx") {
				if(File.forPath("/Applications").isDirectory()) {
					return(true)
				}
				return(false)
			}
			if(id == "posix" || id == "linux" || id == "unix") {
				if(File.forPath("/bin/sh").isFile()) {
					return(true)
				}
				return(false)
			}
		}
	}
	ELSE IFDEF("target_java") {
		var v = false
		lang "java" {{{
			java.lang.String os = java.lang.System.getProperty("os.name").toLowerCase();
		}}}
		if(id == "windows") {
			lang "java" {{{
				if(os.indexOf("win") >= 0) {
					v = true;
				}
			}}}
			return(v)
		}
		if(id == "osx") {
			lang "java" {{{
				if(os.indexOf("mac") >= 0) {
					v = true;
				}
			}}}
			if(v) {
				return(v)
			}
			if(isSystemType("posix") == false) {
				return(false)
			}
			if(File.forPath("/Applications").isDirectory()) {
				return(true)
			}
			return(false)
		}
		if(id == "posix" || id == "linux" || id == "unix") {
			lang "java" {{{
				if(os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0 || os.indexOf("aix") > 0) {
					v = true;
				}
			}}}
			return(v)
		}
	}
	return(false)
}

func openFile(file as File) static as bool
{
	if isWindows() {
		var pl = ProcessLauncher.forCommand("explorer", [ file.getPath() ])
		if pl.executeSilent() == 0:
			return true
		return false
	}
	if isMacOS() {
		var pl = ProcessLauncher.forCommand("open", [ file.getPath() ])
		if pl.executeSilent() == 0:
			return true
		return false
	}
	if isLinux() {
		var pl = ProcessLauncher.forCommand("xdg-open", [ file.getPath() ])
		if pl.executeSilent() == 0:
			return true
		return false
	}
	return false
}
