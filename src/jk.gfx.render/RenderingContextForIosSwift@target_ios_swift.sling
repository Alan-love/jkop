
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.gfx.render
import [magical:UIKit]
import [magical:CoreGraphics]

class is RenderingContext:

class ColorStop
{
	prop stop as float
	prop color as Color
}

class GradientObject abstract
{
	var colorStops = new vector<ColorStop>

	func addColorStop(stop as double, color as Color):
		colorStops += new ColorStop() {
			stop stop
			color color
		}

	func getCgColors protected as vector<[magical:CGColor]>
	{
		var v = new vector<[magical:CGColor]>
		foreach colorStop in colorStops:
			v += lang "swift" (colorStop) as [magical:CGColor] {{{ colorStop.color.toUIColor().cgColor }}}
		return v
	}

	func createGradient abstract
}

class LinearGradientObject is GradientObject
{
	ctor(cgContext as [magical:CGContext], x0 as double, y0 as double, x1 as double, y1 as double)
	{
		this.cgContext = cgContext
		this.x0 = x0
		this.y0 = y0
		this.x1 = x1
		this.y1 = y1
	}

	var x0 as double
	var y0 as double
	var x1 as double
	var y1 as double
	var cgContext as [magical:CGContext]

	func createGradient override
	{
		lang "swift" {{{
			let start = CGPoint(x: x0, y: y0)
			let end = CGPoint(x: x1, y: y1)
			let gradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: getCgColors().data as CFArray, locations: nil)
			cgContext.drawLinearGradient(gradient!, start: start, end: end, options: CGGradientDrawingOptions.drawsBeforeStartLocation)
		}}}
	}
}

class RadialGradientObject is GradientObject
{
	ctor(cgContext as [magical:CGContext], x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double)
	{
		this.cgContext = cgContext
		this.x0 = x0
		this.y0 = y0
		this.r0 = r0
		this.x1 = x1
		this.y1 = y1
		this.r1 = r1
	}

	var x0 as double
	var y0 as double
	var r0 as double
	var x1 as double
	var y1 as double
	var r1 as double
	var cgContext as [magical:CGContext]

	func createGradient override
	{
		lang "swift" {{{
			let startCenter = CGPoint(x: x0, y: y0)
			let endCenter = CGPoint(x: x1, y: y1)
			let gradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: getCgColors().data as CFArray, locations: nil)
			cgContext.drawRadialGradient(gradient!, startCenter: startCenter, startRadius: CGFloat(r0), endCenter: endCenter, endRadius: CGFloat(r1), options: CGGradientDrawingOptions.drawsBeforeStartLocation)
		}}}
	}
}

class PatternObject
{
	ctor(image as [magical:UIImage], repeat as int, rectObject as [magical:CGRect])
	{
		this.image = image
		this.repeat = repeat
		this.rectObject = rectObject
	}

	var repeat as int
	var rectObject as [magical:CGRect]
	var image as [magical:UIImage]

	func createPattern:
		lang "swift" {{{
			image.drawAsPattern(in: rectObject) 
		}}}
}

func forContext(cgContext as [magical:CGContext]) static as this:
	return new this() {
		cgContext cgContext
	}

prop cgContext as [magical:CGContext]

var rectObject as [magical:CGRect]? #mutated
var pathObject as [magical:UIBezierPath]? #mutated
var font as [magical:UIFont]? #mutated
var textAlign = RenderingContext.ALIGN_LEFT
var lineWidth = 5
var strokeColor as [magical:UIColor]?
var fillColor as [magical:UIColor]?
var textBaseline as int
var offsetX as double
var offsetY as double
var shadowBlur as double

func setFillStyle(style as dynamic?) override
{
	var f as Color?
	if style is string {
		f = Color.instance(style as! string)
	}
	else if style is Color {
		f = style as! Color
	}
	if f {
		fillColor = f.toUIColor()
		lang "swift" {{{
			cgContext.setFillColor(fillColor!.cgColor)
		}}}
	}
}

func setStrokeStyle(style as dynamic?) override
{
	var f as Color?
	if style is string {
		f = Color.instance(style as! string)
	}
	else if style is Color {
		f = style as! Color
	}
	if f {
		strokeColor = f.toUIColor()
		lang "swift" {{{
			strokeColor!.setStroke()
		}}}
	}
}

func setShadowColor(color as Color?) override:
	lang "swift" {{{
		cgContext.setShadow(offset: CGSize(width: offsetX, height: offsetY), blur: CGFloat(shadowBlur), color: color?.toUIColor().cgColor) 
	}}}

func setShadowBlur(blur as double) override:
	shadowBlur = blur

func setShadowOffsetX(offset as double) override:
	offsetX = offset

func setShadowOffsetY(offset as double) override:
	offsetY = offset

func createLinearGradient(x0 as double, y0 as double, x1 as double, y1 as double) override as object:
	return new LinearGradientObject(cgContext, x0, y0, x1, y1)

func asIosImage(img as Image) private throws Exception as ImageForIosSwift
{
	var image = img as ImageForIosSwift
	if not image:
		Error.throw("unsupportedImageObject", img)
	return image
}

func createPattern(img as Image, repeat as int) override throws Exception as object
{
	if not rectObject:
		Error.throw("noRectangleObject")
	var image = asIosImage(img)
	return new PatternObject(image.getBitmap(), repeat, rectObject)
}

func createRadialGradient(x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double) override as object:
	return new RadialGradientObject(cgContext, x0, y0, r0, x1, y1, r1)

func addColorStop(gradient as object, index as double, color as Color) override
{
	var gradientObject = gradient as GradientObject
	if gradientObject:
		gradientObject.addColorStop(index, color)
}

func setLineCap(cap as int) override
{
	if cap == RenderingContext.LINE_CAP_BUTT {
		lang "swift" {{{
			cgContext.setLineCap(CGLineCap.butt)
		}}}
	}
	else if cap == RenderingContext.LINE_CAP_ROUND {
		lang "swift" {{{
			cgContext.setLineCap(CGLineCap.round)
		}}}
	}
	else if cap == RenderingContext.LINE_CAP_SQUARE {
		lang "swift" {{{
			cgContext.setLineCap(CGLineCap.square)
		}}}
	}
}

func setLineJoin(join as int) override
{
	if join == RenderingContext.LINE_JOIN_MITER {
		lang "swift" {{{
			cgContext.setLineJoin(CGLineJoin.miter)
		}}}
	}
	else if join == RenderingContext.LINE_JOIN_BEVEL {
		lang "swift" {{{
			cgContext.setLineJoin(CGLineJoin.bevel)
		}}}
	}
	else if join == RenderingContext.LINE_JOIN_ROUND {
		lang "swift" {{{
			cgContext.setLineJoin(CGLineJoin.round)
		}}}
	}
}

func setLineWidth(width as double) override
{
	lineWidth = width as! float
	lang "swift" {{{
		cgContext.setLineWidth(CGFloat(width)) 
	}}}
}

func setMiterLimit(limit as double) override:
	lang "swift" {{{
		cgContext.setMiterLimit(CGFloat(limit)) 
	}}}

func rect(x as double, y as double, width as double, height as double) override
{
	lang "swift" (x, y, width, height) {{{
		rectObject = CGRect(x: x, y: y, width: width, height: height)
		cgContext.addRect(rectObject!)
	}}}
}

func fillRect(x as double, y as double, width as double, height as double) override
{
	lang "swift" {{{
		cgContext.setShouldAntialias(false)
		cgContext.fill(CGRect(x: x, y: y, width: width, height: height))
		cgContext.setShouldAntialias(true)
	}}}
}

func strokeRect(x as double, y as double, width as double, height as double) override
{
	lang "swift" {{{
		cgContext.stroke(CGRect(x: x, y: y, width: width, height: height))
	}}}
}

func clearRect(x as double, y as double, width as double, height as double) override
{
	lang "swift" {{{
		cgContext.clear(CGRect(x: x, y: y, width: width, height: height))
	}}}
}

func fill override:
	lang "swift" {{{
		cgContext.fillPath() 
	}}}

func stroke override:
	lang "swift" {{{
		cgContext.strokePath() 
	}}}

func beginPath override
{
	lang "swift" {{{
		pathObject = UIBezierPath()
		cgContext.addPath(pathObject!.cgPath)
	}}}
}

func moveTo(x as double, y as double) override:
	lang "swift" {{{
		cgContext.move(to: CGPoint(x: x, y: y)) 
	}}}

func closePath override:
	lang "swift" {{{
		cgContext.closePath() 
	}}}

func lineTo(x as double, y as double) override:
	lang "swift" {{{
		cgContext.addLine(to: CGPoint(x: x, y: y)) 
	}}}

func clip override:
	lang "swift" {{{
		cgContext.clip() 
	}}}

func quadraticCurveTo(cpx as double, cpy as double, x as double, y as double) override:
	lang "swift" {{{
		cgContext.addQuadCurve(to: CGPoint(x: cpx, y: cpy), control: CGPoint(x: x, y: y)) 
	}}}

func bezierCurveTo(cp1x as double, cp1y as double, cp2x as double, cp2y as double, x as double, y as double) override:
	lang "swift" {{{
		cgContext.addCurve(to: CGPoint(x: x, y: y), control1: CGPoint(x: cp1x, y: cp1y), control2: CGPoint(x: cp2x, y: cp2y)) 
	}}}

func arc(x as double, y as double, r as double, sAngle as double, eAngle as double, counterclockwise as bool) override:
	lang "swift" {{{
		cgContext.addArc(center: CGPoint(x: x, y: y), radius: CGFloat(r), startAngle: CGFloat(sAngle), endAngle: CGFloat(eAngle), clockwise: counterclockwise) 
	}}}

func arcTo(x1 as double, y1 as double, x2 as double, y2 as double, r as double) override:
	lang "swift" {{{
		cgContext.addArc(tangent1End: CGPoint(x: x1, y: y1), tangent2End: CGPoint(x: x2, y: y2), radius: CGFloat(r)) 
	}}}

func isPointInPath(x as double, y as double) override as bool
{
	if not pathObject:
		return false
	return lang "swift" (pathObject) as bool {{{ pathObject!.contains(CGPoint(x: x, y: y)) }}}
}

func scale(scalewidth as double, scaleheight as double) override:
	lang "swift" {{{
		cgContext.scaleBy(x: CGFloat(scalewidth), y: CGFloat(scaleheight)) 
	}}}

func rotate(angle as double) override:
	lang "swift" {{{
		cgContext.rotate(by: CGFloat(angle)) 
	}}}

func translate(x as double, y as double) override:
	lang "swift" {{{
		cgContext.translateBy(x: CGFloat(x), y: CGFloat(y)) 
	}}}

func transform(a as double, b as double, c as double, d as double, e as double, f as double) override:
	lang "swift" {{{
		cgContext.concatenate(_: CGAffineTransform(a: CGFloat(a), b: CGFloat(b), c: CGFloat(c), d: CGFloat(d), tx: CGFloat(e), ty: CGFloat(f))) 
	}}}

func setTransform(a as double, b as double, c as double, d as double, e as double, f as double) stub override

func setFont(font as FontDescription, ppi as double) override:
	this.font = try? font.toUiFont(ppi)

func setTextAlign(align as int) override:
	textAlign = align

func setTextBaseline(baseline as int) override:
	textBaseline = baseline

func fillText(text as string, x as double, y as double, maxWidth as double) override
{
	lang "swift" {{{
		let text = NSAttributedString(string: text, attributes: [
			NSAttributedString.Key.font: font,
			NSAttributedString.Key.foregroundColor: fillColor
		])
		let sz = text.size()
	}}}
	var rx #mutated = x
	var ry #mutated = y
	if textAlign == RenderingContext.ALIGN_END || textAlign == RenderingContext.ALIGN_RIGHT {
		lang "swift" {{{
			rx = x - sz.width
		}}}
	}
	else if textAlign == RenderingContext.ALIGN_CENTER {
		lang "swift" {{{
			rx = x - sz.width / 2
		}}}
	}
	if textBaseline == RenderingContext.BASELINE_BOTTOM {
		lang "swift" {{{
			ry = y - sz.height
		}}}
	}
	else if textBaseline == RenderingContext.BASELINE_MIDDLE {
		lang "swift" {{{
			ry = y - sz.height / 2
		}}}
	}
	lang "swift" (rx, ry) {{{
		text.draw(at: CGPoint(x: rx, y: ry))
	}}}
}

func strokeText(text as string, x as double, y as double, maxWidth as double) override
{
	lang "swift" {{{
		let text = NSAttributedString(string: text, attributes: [
			NSAttributedString.Key.font: font,
			NSAttributedString.Key.strokeColor:strokeColor,
			NSAttributedString.Key.strokeWidth: lineWidth
		])
		let sz = text.size()
	}}}
	var rx #mutated = x
	var ry #mutated = y
	if textAlign == RenderingContext.ALIGN_END || textAlign == RenderingContext.ALIGN_RIGHT {
		lang "swift" {{{
			rx = x - sz.width
		}}}
	}
	else if textAlign == RenderingContext.ALIGN_CENTER {
		lang "swift" {{{
			rx = x - sz.width / 2
		}}}
	}
	if textBaseline == RenderingContext.BASELINE_BOTTOM {
		lang "swift" {{{
			ry = y - sz.height
		}}}
	}
	else if textBaseline == RenderingContext.BASELINE_MIDDLE {
		lang "swift" {{{
			ry = y - sz.height / 2
		}}}
	}
	lang "swift" (rx, ry) {{{
		text.draw(at: CGPoint(x: rx, y: ry))
	}}}
}

func measureText(text as string) override as Size
{
	var w #mutated = 0.0
	var h #mutated = 0.0
	lang "swift" {{{
		let text = NSAttributedString(string: text, attributes: [
			NSAttributedString.Key.font: font
		])
		let sz = text.size()
		w = sz.width
		h = sz.height
	}}}
	return new Size() {
		width w
		height h
	}
}

func measureTextHeight(text as string) override as double:
	return measureText(text).height

func measureTextWidth(text as string) override as double:
	return measureText(text).width

func drawImage(img as Image, x as double, y as double) override throws Exception
{
	var image = asIosImage(img)
	var simg = image.getBitmap()
	lang "swift" (simg) {{{
		simg.draw(at: CGPoint(x: x, y: y)) 
	}}}
}

func drawAndScaleImage(img as Image, x as double, y as double, width as double, height as double) override throws Exception
{
	var image = asIosImage(img)
	var simg = image.getBitmap()
	lang "swift" (simg) {{{
		simg.draw(in: CGRect(x: x, y: y, width: width, height: height)) 
	}}}
}

func drawAndProcessImage(img as Image, sx as double, sy as double, swidth as double, sheight as double, x as double, y as double, width as double, height as double) override throws Exception
{
	var croped = img.crop(sx as! int, sy as! int, swidth as! int, sheight as! int)
	var scaled = croped.scaleToSize(width as! int, height as! int)
	var aimage = asIosImage(scaled)
	var image = aimage.getBitmap()
	lang "swift" (image) {{{
		image.draw(at: CGPoint(x: x, y: y)) 
	}}}
}

func setGlobalAlpha(alpha as double) override:
	lang "swift" {{{
		cgContext.setAlpha(CGFloat(alpha)) 
	}}}

func save override:
	lang "swift" {{{
		cgContext.saveGState() 
	}}}

func restore override:
	lang "swift" {{{
		cgContext.restoreGState() 
	}}}
