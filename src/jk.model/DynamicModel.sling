
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json

class is DynamicMapObject is StringObject:

func asDynamicMap(object as this?) static as DynamicMap?
{
	assert object
	return object.toDynamicMap()
}

macro SET_VECTOR_FIELD(name, value)
{
	setField(name, null)
	if value {
		foreach element in value:
			addToVectorField(name, element)
	}
}

macro RETURN_VECTOR_FIELD_OBJECTS(objects, type)
{
	var v = new vector<__type__>
	foreach object as DynamicMap #skipnull in objects:
		v += __type__.forData(object)
	return v
}

macro RETURN_VECTOR_VECTOR_FIELD_OBJECTS(objects, type)
{
	var v = new vector<vector<__type__>>
	foreach object as DynamicVector #skipnull in objects {
		var v2 = new vector<__type__>
		foreach o2 as DynamicMap #skipnull in object.toVector():
			v2 += __type__.forData(o2)
		v += v2
	}
	return v
}

var dataValue as DynamicMap?
var fieldsValue as vector<DynamicModelField>?

ctor:
	this.dataValue = null

ctor(data as map):
	setDataMap(DynamicMap.forMap(data))

func getDataMap as DynamicMap
{
	if not dataValue:
		dataValue = new DynamicMap()
	return dataValue
}

func setDataMap(value as DynamicMap)
{
	this.dataValue = value
	validate()
}

func toString as string:
	return JSONEncoder.toString(toDynamicMap())

func toDynamicMap as DynamicMap:
	return getDataMap()

func fromMap(data as map) as this:
	return fromDynamicMap(DynamicMap.forMap(data))

func fromRawMap(data as map) as this:
	return fromRawDynamicMap(DynamicMap.forMap(data))

func fromDynamicMap(data as DynamicMap) as this
{
	setDataMap(filterMapToModel(data))
	return this
}

func fromRawDynamicMap(data as DynamicMap) as this
{
	setDataMap(data)
	return this
}

func getFields as vector<DynamicModelField>
{
	if not fieldsValue {
		fieldsValue = new vector<DynamicModelField>
		if var fis = getFieldInformation(): foreach name in fis:
			fieldsValue += name
	}
	return fieldsValue
}

func setField(name as string, value as dynamic?) as this
{
	getDataMap().setDynamic(name, value)
	return this
}

func getField(name as string) as dynamic?:
	return getDataMap().get(name)

func getOrCreateFieldAsDynamicVector(name as string) as DynamicVector
{
	var data = getDataMap()
	var v = data.getDynamicVector(name)
	if not v {
		v = new DynamicVector()
		data.setObject(name, v)
	}
	return v
}

func getFieldAsDynamicVector(name as string) as DynamicVector?:
	return getDataMap().getDynamicVectorOrNull(name)

func getFieldAsStringVector(name as string) as vector<string>?
{
	var v = assert getFieldAsDynamicVector(name)
	return v.toVectorOfStrings()
}

func getFieldAsIntegerVector(name as string) as vector<int>?
{
	var vector = assert getFieldAsDynamicVector(name)
	return vector.toVectorOfIntegers()
}

func getFieldAsLongIntegerVector(name as string) as vector<long>?
{
	var vector = assert getFieldAsDynamicVector(name)
	return vector.toVectorOfLongIntegers()
}

func getFieldAsDoubleVector(name as string) as vector<double>?
{
	var vector = assert getFieldAsDynamicVector(name)
	return vector.toVectorOfDoubles()
}

func getFieldAsBooleanVector(name as string) as vector<bool>?
{
	var vector = assert getFieldAsDynamicVector(name)
	return vector.toVectorOfBooleans()
}

func addStringToVectorField(field as string, value as string?):
	getOrCreateFieldAsDynamicVector(field).appendString(value)

func addIntegerToVectorField(field as string, value as int):
	getOrCreateFieldAsDynamicVector(field).appendInteger(value)

func addLongIntegerToVectorField(field as string, value as long):
	getOrCreateFieldAsDynamicVector(field).appendLong(value)

func addDoubleToVectorField(field as string, value as double):
	getOrCreateFieldAsDynamicVector(field).appendDouble(value)

func addBooleanToVectorField(field as string, value as bool):
	getOrCreateFieldAsDynamicVector(field).appendBoolean(value)

func addBufferToVectorField(field as string, value as buffer?):
	getOrCreateFieldAsDynamicVector(field).appendObject(value)

func addObjectToVectorField(field as string, value as object?)
{
	var vv = getOrCreateFieldAsDynamicVector(field)
	if value && value is this {
		vv.appendObject((value as! this).toDynamicMap())
	}
	else {
		vv.appendObject(value)
	}
}

func addDynamicToVectorField(field as string, value as dynamic?):
	getOrCreateFieldAsDynamicVector(field).appendDynamic(value)

func addToVectorField(field as string, value as dynamic?)
{
	if value == null {
		addDynamicToVectorField(field, value)
	}
	else if value is string {
		addStringToVectorField(field, value as! string)
	}
	else if value is int {
		addIntegerToVectorField(field, value as! int)
	}
	else if value is long {
		addLongIntegerToVectorField(field, value as! long)
	}
	else if value is double {
		addDoubleToVectorField(field, value as! double)
	}
	else if value is bool {
		addBooleanToVectorField(field, value as! bool)
	}
	else if value is buffer {
		addBufferToVectorField(field, value as! buffer)
	}
	else if value is object {
		addObjectToVectorField(field, value as! object)
	}
	else {
		Error.throw("unsupportedValueInVector", value)
	}
}

func containsField(field as string) as bool
{
	foreach ff in getFields() {
		if String.equals(ff.name, field):
			return true
	}
	return false
}

func hasValue(key as string) as bool:
	return getDataMap().containsKey(key)

func removeNullValues
{
	if dataValue:
		dataValue.removeNullValues()
}

func clear:
	dataValue = null

func setAllFields
{
	var data = getDataMap()
	foreach field in getFields() {
		if not data.containsKey(field.name):
			data.setObject(field.name, null)
	}
}

func getModelMetadata virtual as string?:
	return null

func getFieldInformation virtual as vector<DynamicModelField>?:
	return null

func validate virtual:
	nop

func copyFrom(other as this, mapping as DynamicMap?)
{
	foreach field in getFields() {
		var fname = field.name
		var oname as string?
		if mapping && mapping.containsKey(fname) {
			oname = mapping.getString(fname)
		}
		else {
			oname = fname
		}
		if oname && other.hasValue(oname):
			setField(fname, other.getField(oname))
	}
}

func filterMapToModel(data as DynamicMap) as DynamicMap
{
	var finalMap = new DynamicMap()
	var fieldMap = new DynamicMap()
	foreach field in getFields() {
		var fname = field.name
		fieldMap.setObject(fname, field)
	}
	if fieldMap.getCount() > 0 {
		foreach key in data.getKeys() {
			if fieldMap.containsKey(key) {
				var inf = fieldMap.get(key) as DynamicModelField
				if not inf {
					finalMap.setDynamic(key, data.get(key))
				}
				else if inf.type == DynamicModelField.TYPE_OBJECT {
					var dmap as DynamicMap?
					var val = data.get(key)
					if val is string {
						dmap = JSONParser.parse(val as! string) as DynamicMap
					}
					else if val is DynamicMap {
						dmap = val as! DynamicMap
					}
					var iti = inf.typeinfo
					if dmap && dmap.getCount() > 0 && iti {
						var dmo = Reflection.createClassInstanceByTypeinfo(iti) as DynamicModel
						if dmo:
							finalMap.setObject(key, dmo.filterMapToModel(dmap))
					}
				}
				else if inf.type == DynamicModelField.TYPE_VECTOR {
					var dvec as DynamicVector?
					var val = data.get(key)
					if val is string {
						dvec = JSONParser.parse(val as! string) as DynamicVector
					}
					else if val is DynamicVector {
						dvec = val as! DynamicVector
					}
					if dvec {
						var iti = inf.typeinfo
						if iti {
							var val = filterVectorToModels(dvec, iti)
							finalMap.setObject(key, val)
						}
						else {
							finalMap.setObject(key, dvec)
						}
					}
				}
				else if inf.type == DynamicModelField.TYPE_MAP {
					var dmap as DynamicMap?
					var val = data.get(key)
					if val is string {
						dmap = JSONParser.parse(val as! string) as DynamicMap
					}
					else if val is DynamicMap {
						dmap = val as! DynamicMap
					}
					if dmap:
						finalMap.setObject(key, dmap)
				}
				else {
					finalMap.setDynamic(key, data.get(key))
				}
			}
		}
	}
	return finalMap
}

func filterVectorToModels(data as DynamicVector, typeinfo as typeinfo) as DynamicVector
{
	var finalVector = new DynamicVector()
	foreach map in data.toVectorOfDynamicMaps() {
		var dmo = Reflection.createClassInstanceByTypeinfo(typeinfo) as DynamicModel
		if dmo:
			finalVector.appendObject(dmo.filterMapToModel(map))
	}
	return finalVector
}

func toFlatDynamicMap as DynamicMap
{
	var data = getDataMap()
	var finalMap = new DynamicMap()
	var fieldMap = new DynamicMap()
	foreach field in getFields() {
		var fname = field.name
		fieldMap.setObject(fname, field)
	}
	foreach key in data.getKeys() {
		if not fieldMap.containsKey(key):
			continue
		var inf = fieldMap.get(key) as DynamicModelField
		if not inf {
			finalMap.setDynamic(key, data.get(key))
		}
		else if inf.type == DynamicModelField.TYPE_OBJECT || inf.type == DynamicModelField.TYPE_MAP {
			var val = data.getDynamicMap(key)
			if val:
				finalMap.setObject(key, JSONEncoder.toString(val))
			else:
				finalMap.setObject(key, null)
		}
		else if inf.type == DynamicModelField.TYPE_VECTOR {
			var vec = data.getDynamicVector(key)
			if vec:
				finalMap.setObject(key, JSONEncoder.toString(vec))
			else:
				finalMap.setObject(key, null)
		}
		else {
			finalMap.setDynamic(key, data.get(key))
		}
	}
	return finalMap
}
