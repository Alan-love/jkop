
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape imports cave:

class Element public
{
	prop id as string
	prop weight as double
}

class InputElement is Element public
{
	prop label as string
	prop description as string
}

class DynamicElement is Element public
{
	prop type as string
	prop properties as DynamicMap
}

class Container is Element public
{
	prop children as vector<Element>

	func addToChildren(element as Element)
	{
		if(element == null) {
			return
		}
		if(children == null) {
			children = new vector<Element>
		}
		children += element
	}
}

class Group is Container public
{
	prop label as string
	prop description as string
}

class Tab is Container public
{
	prop label as string
}

class VerticalContainer is Container public
{
}

class HorizontalContainer is Container public
{
}

class TextInput is InputElement public
{
}

class RawTextInput is InputElement public
{
}

class PasswordInput is InputElement public
{
}

class NameInput is InputElement public
{
}

class EmailAddressInput is InputElement public
{
}

class PhoneNumberInput is InputElement public
{
}

class StreetAddressInput is InputElement public
{
}

class WithIconInput is InputElement public
{
	prop icon as Image
	prop action as function
}

class PhotoCaptureInput is InputElement public
{
	prop defaultImage as Image
}

class RadioGroupInput is InputElement public
{
	prop items as vector<string>
	prop groupName as string
}

class CheckBoxInput is InputElement public
{
	prop isChecked as bool
}

class MultipleChoiceInput is InputElement public
{
	prop values as KeyValueList<string,string>
}

class DateInput is InputElement public
{
	prop skipYears as int
}

class TextAreaInput is InputElement public
{
	prop rows as int
}

class CodeInput is InputElement public
{
	prop rows as int
}

class StaticTextElement is InputElement public
{
}

class StringListInput is InputElement public
{
}

var root as Container
var stack as Stack<Container>

ctor
{
	root = new VerticalContainer()
	stack = new Stack<Container>()
	stack.push(root)
}

func getRoot as Container
{
	return(root)
}

func addElement(element as Element) as Element
{
	var current = stack.peek()
	if(current != null) {
		current.addToChildren(element)
	}
	return(element)
}

func startVerticalContainer as Element
{
	var vc = new VerticalContainer()
	addElement(vc)
	stack.push(vc)
	return(vc)
}

func endVerticalContainer as Element
{
	var cc = stack.peek() as VerticalContainer
	if(cc != null) {
		stack.pop()
	}
	return(cc)
}

func startHorizontalContainer as Element
{
	var vc = new HorizontalContainer()
	addElement(vc)
	stack.push(vc)
	return(vc)
}

func endHorizontalContainer as Element
{
	var cc = stack.peek() as HorizontalContainer
	if(cc != null) {
		stack.pop()
	}
	return(cc)
}

func startGroup(id as string, label as string, description as string) as Element
{
	var group = new Group()
	group.setId(id)
	group.setLabel(label)
	group.setDescription(description)
	addElement(group)
	stack.push(group)
	return(group)
}

func endGroup as Element
{
	var cc = stack.peek() as Group
	if(cc != null) {
		stack.pop()
	}
	return(cc)
}

func startTab(id as string, label as string) as Element
{
	var tab = new Tab()
	tab.setId(id)
	tab.setLabel(label)
	addElement(tab)
	stack.push(tab)
	return(tab)
}

func endTab as Element
{
	var cc = stack.peek() as Tab
	if(cc != null) {
		stack.pop()
	}
	return(cc)
}

func addDynamicElement(type as string, properties as DynamicMap) as Element
{
	var v = new DynamicElement()
	v.setType(type)
	v.setProperties(properties)
	addElement(v)
	return(v)
}

func addTextInput(id as string, label as string, description as string) as Element
{
	var v = new TextInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addRawTextInput(id as string, label as string, description as string) as Element
{
	var v = new RawTextInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addPasswordInput(id as string, label as string, description as string) as Element
{
	var v = new PasswordInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addNameInput(id as string, label as string, description as string) as Element
{
	var v = new NameInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addEmailAddressInput(id as string, label as string, description as string) as Element
{
	var v = new EmailAddressInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addPhoneNumberInput(id as string, label as string, description as string) as Element
{
	var v = new PhoneNumberInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addStreetAddressInput(id as string, label as string, description as string) as Element
{
	var v = new StreetAddressInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addMultipleChoiceInput(id as string, label as string, description as string, values as array<string>) as Element
{
	var vvs = new KeyValueList<string,string>()
	foreach(value in values) {
		var comps = String.split(value, ':', 2)
		var kk = Vector.get(comps, 0)
		var vv = Vector.get(comps, 1)
		if(vv == null) {
			vv = kk
		}
		vvs.add(kk, vv)
	}
	return(addMultipleChoiceInput(id, label, description, vvs))
}

func addMultipleChoiceInput(id as string, label as string, description as string, values as KeyValueList<string,string>) as Element
{
	var v = new MultipleChoiceInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setValues(values)
	addElement(v)
	return(v)
}

func addDateInput(id as string, label as string, description as string, skipYears as int) as Element
{
	var v = new DateInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setSkipYears(skipYears)
	addElement(v)
	return(v)
}

func addPhotoCaptureInput(id as string, label as string, description as string, defImage as Image) as Element
{
	var v = new PhotoCaptureInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setDefaultImage(defImage)
	addElement(v)
	return(v)
}

func addCodeInput(id as string, label as string, description as string, rows as int) as Element
{
	var v = new CodeInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setRows(rows)
	addElement(v)
	return(v)
}

func addTextAreaInput(id as string, label as string, description as string, rows as int) as Element
{
	var v = new TextAreaInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setRows(rows)
	addElement(v)
	return(v)
}

func addStaticTextElement(id as string, label as string, description as string) as Element
{
	var v = new StaticTextElement()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}

func addRadioGroupInput(id as string, label as string, description as string, groupname as string, items as vector<string>) as Element
{
	var v = new RadioGroupInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setItems(items)
	v.setGroupName(groupname)
	addElement(v)
	return(v)
}

func addCheckBoxInput(id as string, label as string, description as string, isChecked as bool) as Element
{
	var v = new CheckBoxInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setIsChecked(isChecked)
	addElement(v)
	return(v)
}

func addWithIconInput(id as string, label as string, description as string, icon as Image, action as function) as Element
{
	var v = new WithIconInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	v.setIcon(icon)
	v.setAction(action)
	addElement(v)
	return(v)
}

func addStringListInput(id as string, label as string, description as string) as Element
{
	var v = new StringListInput()
	v.setId(id)
	v.setLabel(label)
	v.setDescription(description)
	addElement(v)
	return(v)
}
