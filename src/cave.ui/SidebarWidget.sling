
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget imports cave imports cave.ui:

func forItems(ctx as GuiApplicationContext, items as vector<Widget>, color as Color = null) as this
{
	var v = new this(ctx)
	v.setWidgetColor(color)
	v.setWidgetItems(items)
	return(v)
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
}

var widgetColor as Color
var widgetItems as vector<Widget>

func setWidgetColor(color as Color)
{
	widgetColor = color
}

func setWidgetItems(items as vector<Widget>)
{
	widgetItems = items
}

func getWidgetColor as Color
{
	return(widgetColor)
}

func getWidgetItems as vector<Widget>
{
	return(widgetItems)
}

func addItem(widget as Widget)
{
	if(widget == null) {
		return
	}
	if(widgetItems == null) {
		widgetItems = new vector<Widget>
	}
	widgetItems += widget
}

func initializeWidget override
{
	base.initializeWidget()
	if(widgetColor == null) {
		widgetColor = Color.white()
	}
	addWidget(CanvasWidget.forColor(context, widgetColor))
	var vbox = VerticalBoxWidget.forContext(context, 0)
	if(cape.Vector.isEmpty(widgetItems) == false) {
		foreach(item in widgetItems) {
			vbox.addWidget(item)
		}
	}
	IFNDEF("target_html") {
		var tml = new TopMarginLayerWidget(context)
		tml.addWidget(LayerWidget.forWidgetAndWidth(context, vbox, context.getWidthValue("50mm")))
		addWidget(VerticalScrollerWidget.forWidget(context, tml))
	}
	ELSE {
		addWidget(LayerWidget.forWidgetAndWidth(context, vbox, context.getWidthValue("50mm")))
	}
}
