
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WidgetWithLayout imports cave:

func forColor(context as GuiApplicationContext, color as Color) static as this
{
	var v = new this(context)
	v.setWidgetColor(color)
	return(v)
}

IFDEF("target_iosoc")
{
	basetype !"UIView" type extends
	basetype Widget type isAlso
}

IFDEF("target_android")
{
	basetype !"android.view.View" type extends
	basetype Widget type isAlso
}

IFDEF("target_html")
{
	basetype Widget
}

var widgetContext as GuiApplicationContext
var widgetColor as Color
var widgetRounded as bool
var widgetRoundingRadius as string
var widgetOutlineColor as Color
var widgetOutlineWidth as string

ctor(context as GuiApplicationContext)
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	widgetContext = context
	widgetColor = Color.black()
	widgetOutlineColor = Color.black()
}

func layoutWidget(widthConstraint as int, force as bool) as bool
{
	Widget.setLayoutSize(this, widthConstraint, 0)
	return(true)
}

func setWidgetColor(color as Color)
{
	widgetColor = color
	IFDEF("target_iosoc") {
		if(widgetColor == null) {
			lang "objc" {{{
				self.backgroundColor = nil;
			}}}
		}
		else {
			lang "objc" {{{
				self.backgroundColor = [color toUIColor];
			}}}
		}
	}
	ELSE IFDEF("target_android") {
		if(widgetColor == null) {
			lang "java" {{{
				setBackgroundColor(0);
			}}}
		}
		else {
			lang "java" {{{
				setBackgroundColor(widgetColor.toARGBInt32());
			}}}
		}
	}
	ELSE IFDEF("target_html") {
		if(color == null) {
			HTMLDOM.removeStyle(element, "background-color")
		}
		else {
			HTMLDOM.setStyle(element, "background-color", HTMLDOM.colorToRGBA(color))
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetColor as Color
{
	return(widgetColor)
}

func setWidgetOutlineColor(color as Color)
{
	widgetOutlineColor = color
	IFDEF("target_html") {
		if(color == null) {
			HTMLDOM.removeStyle(element, "border")
			HTMLDOM.removeStyle(element, "border-color")
			HTMLDOM.removeStyle(element, "border-style")
		}
		else {
			HTMLDOM.setStyle(element, "border", "1px")
			HTMLDOM.setStyle(element, "border-style", "solid")
			HTMLDOM.setStyle(element, "border-color", color.toRgbString())
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetOutlineColor as Color
{
	return(widgetOutlineColor)
}

func setWidgetOutlineWidth(width as string)
{
	widgetOutlineWidth = width
	IFDEF("target_html") {
		ERROR("Not implemented")
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetOutlineWidth as string
{
	return(widgetOutlineWidth)
}

func setWidgetRounded(rounded as bool)
{
	widgetRounded = rounded
	IFDEF("target_html") {
		if(widgetRounded == false) {
			HTMLDOM.removeStyle(element, "border-radius")
		}
		else {
			if(widgetRoundingRadius == null) {
				widgetRoundingRadius = "15px"
			}
			HTMLDOM.setStyle(element, "border-radius", widgetRoundingRadius)
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetRounded as bool
{
	return(widgetRounded)
}

func setWidgetRoundingRadius(radius as string)
{
	widgetRoundingRadius = radius
	IFDEF("target_html") {
		if(widgetRoundingRadius == null) {
			HTMLDOM.removeStyle(element, "border-radius")
		}
		else {
			HTMLDOM.setStyle(element, "border-radius", widgetRoundingRadius)
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetRoundingRadius as string
{
	return(widgetRoundingRadius)
}
