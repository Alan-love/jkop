
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WidgetWithLayout imports cave imports cape:

func forColor(context as GuiApplicationContext, color as Color) static as this
{
	var v = new this(context)
	v.setWidgetColor(color)
	return(v)
}

IFDEF("target_iosoc")
{
	basetype !"UIView" type extends
	basetype Widget type isAlso
}

IFDEF("target_android")
{
	basetype !"android.view.View" type extends
	basetype Widget type isAlso
}

IFDEF("target_html")
{
	basetype Widget

	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.setStyle(element, "box-sizing", "border-box")
	}
}

var widgetContext as GuiApplicationContext
var widgetColor as Color
var widgetTopLeftRadius as double
var widgetTopRightRadius as double
var widgetBottomRightRadius as double
var widgetBottomLeftRadius as double
var widgetOutlineColor as Color
var widgetOutlineWidth as int

ctor(context as GuiApplicationContext)
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	widgetContext = context
	widgetColor = Color.black()
	widgetOutlineColor = Color.black()
}

func layoutWidget(widthConstraint as int #notLiteral, force as bool) as bool
{
	Widget.setLayoutSize(this, widthConstraint - (widgetOutlineWidth * 4), 0)
	return(true)
}

func setWidgetColor(color as Color)
{
	widgetColor = color
	IFDEF("target_iosoc") {
		if(widgetColor == null) {
			lang "objc" {{{
				self.backgroundColor = nil;
			}}}
		}
		else {
			lang "objc" {{{
				self.backgroundColor = [color toUIColor];
			}}}
		}
	}
	ELSE IFDEF("target_android") {
		if(widgetColor == null) {
			lang "java" {{{
				setBackgroundColor(0);
			}}}
		}
		else {
			lang "java" {{{
				setBackgroundColor(widgetColor.toARGBInt32());
			}}}
		}
	}
	ELSE IFDEF("target_html") {
		if(color == null) {
			HTMLDOM.removeStyle(element, "background-color")
		}
		else {
			HTMLDOM.setStyle(element, "background-color", HTMLDOM.colorToRGBA(color))
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetColor as Color
{
	return(widgetColor)
}

func setWidgetOutlineColor(color as Color)
{
	widgetOutlineColor = color
	updateCanvas()
}

func getWidgetOutlineColor as Color
{
	return(widgetOutlineColor)
}

func setWidgetOutlineWidth(width as int #notLiteral)
{
	widgetOutlineWidth = width
	updateCanvas()
}

func getWidgetOutlineWidth as int
{
	return(widgetOutlineWidth)
}

func updateCanvas private
{
	IFDEF("target_html") {
		if(widgetOutlineWidth < 0) {
			HTMLDOM.removeStyle(element, "border")
			HTMLDOM.removeStyle(element, "border-color")
			HTMLDOM.removeStyle(element, "border-style")
		}
		else {
			HTMLDOM.setStyle(element, "border", String.asString(widgetOutlineWidth) .. "px")
			HTMLDOM.setStyle(element, "border-style", "solid")
			HTMLDOM.setStyle(element, "border-color", widgetOutlineColor.toRgbString())
		}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func getWidgetTopLeftRadius as double
{
	return(widgetTopLeftRadius)
}

func getWidgetTopRightRadius as double
{
	return(widgetTopRightRadius)
}

func getWidgetBottomRightRadius as double
{
	return(widgetBottomRightRadius)
}

func getWidgetBottomLeftRadius as double
{
	return(widgetBottomLeftRadius)
}

func setWidgetRoundingRadius(radius as double #notLiteral)
{
	setWidgetRoundingRadius(radius, radius, radius, radius)
}

func setWidgetRoundingRadius(lradius as double #notLiteral, rradius as double #notLiteral)
{
	setWidgetRoundingRadius(lradius, rradius, rradius, lradius)
}

func setWidgetRoundingRadius(tlradius as double #notLiteral, trradius as double #notLiteral, brradius as double #notLiteral, blradius as double #notLiteral)
{
	widgetTopLeftRadius = tlradius
	widgetTopRightRadius = trradius
	widgetBottomRightRadius = brradius
	widgetBottomLeftRadius = blradius
	var isRounded = true
	if widgetTopLeftRadius <= 0.0 && widgetTopRightRadius <= 0.0 && widgetBottomRightRadius <= 0.0 && widgetBottomLeftRadius <= 0.0 {
		isRounded = false
	}
	IFDEF("target_html") {
		if isRounded {
			HTMLDOM.setStyle(element, "border-radius", String.asString(widgetTopLeftRadius) .. "px " ..
				String.asString(widgetTopRightRadius) .. "px " ..
				String.asString(widgetBottomRightRadius) .. "px " ..
				String.asString(widgetBottomLeftRadius) .. "px")
		}
		else {
			HTMLDOM.removeStyle(element, "border-radius")
		}
	}
	ELSE IFDEF("target_android") {
		var r1 = widgetTopLeftRadius as float
		var r2 = widgetTopRightRadius as float
		var r3 = widgetBottomRightRadius as float
		var r4 = widgetBottomLeftRadius as float
		var rr = new !"android.graphics.drawable.shapes.RoundRectShape"([r1, r1, r2, r2, r3, r3, r4, r4], null, null)
		var shape = new !"android.graphics.drawable.ShapeDrawable"(rr)
		lang "java" {{{
			if(widgetColor != null) {
				shape.getPaint().setColor(widgetColor.toARGBInt32());
			}
			setBackgroundDrawable(shape);
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}
