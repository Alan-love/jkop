
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget imports cape imports cave:

class Action
{
	var label public as string
	var handler public as function
}

class StaticTextWidget is LayerWidget is WidgetWithValue
{
	func forText(context as GuiApplicationContext, text as string) static as this
	{
		var v = new this(context)
		v.setWidgetValue(text)
		return(v)
	}

	ctor(context as GuiApplicationContext)
	{
		base(context)
	}

	prop backgroundColor as Color
	prop textColor as Color
	var label as LabelWidget

	func initializeWidget override
	{
		base.initializeWidget()
		label = new LabelWidget(context)
		var color = textColor
		if(color == null) {
			if(backgroundColor.isLightColor()) {
				color = Color.forRGB(0, 0, 0)
			}
			else {
				color = Color.forRGB(0xff, 0xff, 0xff)
			}
		}
		label.setWidgetTextColor(color)
		addWidget(CanvasWidget.forColor(context, backgroundColor))
		addWidget(LayerWidget.forWidget(context, label, context.getHeightValue("1500um")))
	}

	func setWidgetValue(value as object)
	{
		if(label != null) {
			label.setWidgetText(String.asString(value))
		}
	}

	func getWidgetValue as object
	{
		if(label == null) {
			return(null)
		}
		return(label.getWidgetText())
	}
}

func forDeclaration(context as GuiApplicationContext, form as FormDeclaration) static as this
{
	var v = new this(context)
	v.setFormDeclaration(form)
	return(v)
}

var formDeclaration as FormDeclaration
var fieldsById as map<string,Widget>
var actions as vector<Action>
prop elementSpacing as int
prop formMargin as int
var alignWidget as AlignWidget
prop enableFieldLabels = true
prop formWidth as int
prop fieldLabelFontSize as int
var customFooterWidget as LayerWidget
var queueData as DynamicMap

ctor(context as GuiApplicationContext)
{
	base(context)
	fieldsById = new map<string,Widget>
	formMargin = context.getHeightValue("1mm")
	formWidth = context.getWidthValue("120mm")
	fieldLabelFontSize = context.getHeightValue("2000um")
	elementSpacing = formMargin
	customFooterWidget = new LayerWidget(context)
}

func getCustomFooterWidget as LayerWidget
{
	return(customFooterWidget)
}

func getFormDeclaration virtual as FormDeclaration
{
	return(formDeclaration)
}

func setFormDeclaration(value as FormDeclaration) as this
{
	formDeclaration = value
	return(this)
}

func addActions virtual
{
}

func addAction(label as string, handler as function)
{
	if(label == null) {
		return
	}
	if(actions == null) {
		actions = new vector<Action>
	}
	var v = new Action()
	v.label = label
	v.handler = handler
	actions += v
}

func setStyleForTextInputWidget(widget as TextInputWidget) virtual
{
}

func setStyleForTextButtonWidget(widget as TextButtonWidget) virtual
{
}

func setStyleForSelectWidget(widget as SelectWidget) virtual
{
}

/*
func setStyleForDateSelectorWidget(widget as DateSelectorWidget) virtual
{
}
*/

func setStyleForWidget(widget as Widget) virtual
{
	if(widget is TextInputWidget) {
		setStyleForTextInputWidget(widget as! TextInputWidget)
	}
	else if(widget is TextButtonWidget) {
		setStyleForTextButtonWidget(widget as! TextButtonWidget)
	}
	else if(widget is SelectWidget) {
		setStyleForSelectWidget(widget as! SelectWidget)
	}
	/* FIXME: Incorporate DateSelectorWidget
	else if(widget is DateSelectorWidget) {
		setStyleForDateSelectorWidget(widget as! DateSelectorWidget)
	}
	*/
	else {
		foreach(child in Widget.getChildren(widget)) {
			setStyleForWidget(child)
		}
	}
}

func asPlaceHolder(str as string) as string
{
	if(enableFieldLabels) {
		return(null)
	}
	return(str)
}

func getBackgroundColorForElement(element as FormDeclaration.Element) virtual as cave.Color
{
	if(element is FormDeclaration.Group) {
		return(Color.black())
	}
	return(Color.white())
}

func getForegroundColorForElement(element as FormDeclaration.Element) virtual as cave.Color
{
	return(null)
}

func getAdjustedForegroundColor(element as FormDeclaration.Element, backgroundColor as Color) as Color
{
	var v = getForegroundColorForElement(element)
	if(v != null) {
		return(v)
	}
	if(backgroundColor == null) {
		return(Color.black())
	}
	if(backgroundColor.isWhite()) {
		return(Color.forRGB(100,100,100))
	}
	if(backgroundColor.isDarkColor()) {
		return(Color.white())
	}
	return(Color.black())
}

func createWidgetForElement(element as FormDeclaration.Element) virtual as Widget
{
	if(element == null) {
		return(null)
	}
	if(element is FormDeclaration.TextInput) {
		var ti = element as! FormDeclaration.TextInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_DEFAULT, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.RawTextInput) {
		var ti = element as! FormDeclaration.RawTextInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_NONASSISTED, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.PasswordInput) {
		var ti = element as! FormDeclaration.PasswordInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_PASSWORD, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.NameInput) {
		var ti = element as! FormDeclaration.NameInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_NAME, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.EmailAddressInput) {
		var ti = element as! FormDeclaration.EmailAddressInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_EMAIL_ADDRESS, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.PhoneNumberInput) {
		var ti = element as! FormDeclaration.PhoneNumberInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_PHONE_NUMBER, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.StreetAddressInput) {
		var ti = element as! FormDeclaration.StreetAddressInput
		return(TextInputWidget.forType(context, TextInputWidget.TYPE_STREET_ADDRESS, asPlaceHolder(ti.getLabel())))
	}
	else if(element is FormDeclaration.TextAreaInput) {
		var ta = element as! FormDeclaration.TextAreaInput
		return(TextAreaWidget.forPlaceholder(context, asPlaceHolder(ta.getLabel()), ta.getRows()))
	}
	else if(element is FormDeclaration.StaticTextElement) {
		var ti = element as! FormDeclaration.StaticTextElement
		var st = StaticTextWidget.forText(context, ti.getLabel())
		var bgc = getBackgroundColorForElement(ti)
		var fgc = getAdjustedForegroundColor(ti, bgc)
		st.setBackgroundColor(bgc)
		st.setTextColor(fgc)
		return(st)
	}
	else if(element is FormDeclaration.MultipleChoiceInput) {
		var si = element as! FormDeclaration.MultipleChoiceInput
		return(SelectWidget.forKeyValueList(context, si.getValues()))
	}
	else if(element is FormDeclaration.DateInput) {
		var ds = element as! FormDeclaration.DateInput
		var v = DateSelectorWidget.forContext(context)
		// FIXME: v.setLabel(ds.getLabel())
		v.setSkipYears(ds.getSkipYears())
		return(v)
	}
	else if(element is FormDeclaration.Container) {
		var v = VerticalBoxWidget.forContext(context)
		v.setWidgetWidthRequest(formWidth)
		v.setWidgetSpacing(elementSpacing)
		if(element is FormDeclaration.Group) {
			var g = element as! FormDeclaration.Group
			var wlayer = LayerWidget.forContext(context)
			var bgc = getBackgroundColorForElement(g)
			wlayer.addWidget(CanvasWidget.forColor(context, bgc))
			var groupLabel = LabelWidget.forText(context, g.getLabel())
			groupLabel.setWidgetTextColor(getAdjustedForegroundColor(g, bgc))
			wlayer.addWidget(LayerWidget.forWidget(context, groupLabel, context.getHeightValue("2mm")))
			v.addWidget(wlayer)
		}
		if(element is FormDeclaration.Tab) {
			ERROR("FIXME")
		}
		foreach(child in (element as! FormDeclaration.Container).getChildren()) {
			var ww = createAndRegisterWidget(child)
			if(ww != null) {
				if(enableFieldLabels && child is FormDeclaration.InputElement) {
					var wlayer = LayerWidget.forContext(context)
					var bgc = getBackgroundColorForElement(child)
					wlayer.addWidget(CanvasWidget.forColor(context, bgc))
					var wbox = VerticalBoxWidget.forContext(context)
					var txt = (child as! FormDeclaration.InputElement).getLabel()
					if(cape.String.isEmpty(txt) == false) {
						var lw = LabelWidget.forText(context, txt)
						lw.setWidgetTextColor(getAdjustedForegroundColor(child, bgc))
						lw.setWidgetFontSize(fieldLabelFontSize)
						var ss = context.getHeightValue("1mm")
						wbox.addWidget(LayerWidget.forWidget(context, lw)
							.setWidgetMarginLeft(ss)
							.setWidgetMarginRight(ss)
							.setWidgetMarginTop(ss))
					}
					wbox.addWidget(ww)
					wlayer.addWidget(wbox)
					v.addWidget(wlayer)
				}
				else {
					v.addWidget(ww)
				}
			}
		}
		return(v)
	}
	else {
		ERROR("FIXME")
	}
	return(null)
}

func createAndRegisterWidget(element as FormDeclaration.Element) as Widget
{
	var v = createWidgetForElement(element)
	if(v == null) {
		return(null)
	}
	setStyleForWidget(v)
	var id = element.getId()
	if(String.isEmpty(id) == false) {
		fieldsById[id] = v
	}
	return(v)
}

func computeWidgetLayout(widthConstraint as int) override
{
	if(alignWidget != null) {
		if(widthConstraint >= context.getWidthValue("120mm")) {
			alignWidget.setAlignForIndex(0, 0.5, 0.5)
		}
		else {
			alignWidget.setAlignForIndex(0, 0.5, 0)
		}
	}
	base.computeWidgetLayout(widthConstraint)
}

func initializeWidget override
{
	base.initializeWidget()
	var declaration = getFormDeclaration()
	if(declaration == null) {
		return
	}
	var root = declaration.getRoot()
	if(root == null) {
		return
	}
	var box = VerticalBoxWidget.forContext(context)
	box.setWidgetMargin(formMargin)
	box.setWidgetSpacing(formMargin)
	var topWidget = createAndRegisterWidget(root)
	if(topWidget != null) {
		box.addWidget(topWidget)
	}
	if(queueData != null) {
		setFormData(queueData)
	}
	if(actions == null) {
		addActions()
	}
	if(actions != null) {
		var hbox = HorizontalBoxWidget.forContext(context)
		hbox.setWidgetSpacing(context.getHeightValue("1mm"))
		foreach(action in actions) {
			var button = TextButtonWidget.forText(context, action.label, action.handler)
			setStyleForTextButtonWidget(button)
			hbox.addWidget(button, 1)
		}
		box.addWidget(hbox)
	}
	box.addWidget(customFooterWidget)
	alignWidget = AlignWidget.forWidget(context, box, 0.5, 0.5, 0)
	var scroller = VerticalScrollerWidget.forWidget(context, alignWidget)
	addWidget(scroller)
}

func setFormData(data as DynamicMap)
{
	if(Map.count(fieldsById) < 1) {
		queueData = data
	}
	else {
		var keys as vector<string> #force = Map.getKeys(fieldsById)
		foreach(key in keys) {
			var value as object
			if(data != null) {
				value = data.get(key)
			}
			setFieldData(key, value)
		}
	}
}

func setFieldData(id as string, value as object)
{
	var widget = Map.get(fieldsById, id) as WidgetWithValue
	if(widget == null) {
		return
	}
	widget.setWidgetValue(value)
}

func getFormDataTo(data as DynamicMap) virtual
{
	if(data == null) {
		return
	}
	var keys as vector<string> #force = Map.getKeys(fieldsById)
	foreach(key in keys) {
		var widget = Map.get(fieldsById, key) as WidgetWithValue
		if(widget == null) {
			continue
		}
		data.set(key, widget.getWidgetValue())
	}
}

func getFormData as DynamicMap
{
	var v = new DynamicMap()
	getFormDataTo(v)
	return(v)
}

func clearFormData
{
	var clearData = new DynamicMap()
	var keys as vector<string> #force = Map.getKeys(fieldsById)
	foreach(key in keys) {
		clearData.set(key, null)
	}
	setFormData(clearData)
}
