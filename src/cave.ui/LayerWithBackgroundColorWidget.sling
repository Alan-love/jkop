
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget #widget:

IFNDEF "target_html" {
	var canvas as CanvasWidget
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	IFNDEF "target_html" {
		addWidget(canvas = new CanvasWidget(ctx))
	}
}

func setWidgetColor(color as Color) as this
{
	assert color
	IFDEF "target_html" {
		HTMLDOM.setStyle(this.element, "background-color", HTMLDOM.colorToRGBA(color))
	}
	ELSE {
		assert canvas
		canvas.setWidgetColor(color)
	}
	return this
}

func setWidgetRoundingRadius(radius as double #notLiteral):
	setWidgetRoundingRadius(radius, radius, radius, radius)

func setWidgetRoundingRadius(lradius as double #notLiteral, rradius as double #notLiteral):
	setWidgetRoundingRadius(lradius, rradius, rradius, lradius)

func setWidgetRoundingRadius(tlradius as double #notLiteral, trradius as double #notLiteral, brradius as double #notLiteral, blradius as double #notLiteral):
	updateCanvasRoundingRadius(tlradius, trradius, brradius, blradius)

func updateCanvasRoundingRadius(tlradius as double #notLiteral, trradius as double #notLiteral, brradius as double #notLiteral, blradius as double #notLiteral) private
{
	var isRounded = true
	if tlradius <= 0.0 && trradius <= 0.0 && brradius <= 0.0 && blradius <= 0.0 {
		isRounded = false
	}
	IFDEF "target_html" {
		if isRounded {
			HTMLDOM.setStyle(element, "border-radius", String.asString(tlradius) .. "px " ..
				String.asString(trradius) .. "px " ..
				String.asString(brradius) .. "px " ..
				String.asString(blradius) .. "px")
		}
		else {
			HTMLDOM.removeStyle(element, "border-radius")
		}
	}
	ELSE {
		if canvas:
			canvas.setWidgetRoundingRadius(tlradius, trradius, brradius, blradius)
	}
}
