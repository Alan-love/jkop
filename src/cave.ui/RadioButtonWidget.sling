class imports cape imports cave:

func forText(context as GuiApplicationContext, text as string) static as this
{
	var v = new this(context)
	v.setWidgetText(text)
	return(v)
}

IFDEF("target_html")
{
	basetype Widget

	func createElement override as object
	{
		var v = HTMLDOM.createElement("div")
		var input = HTMLDOM.createElement("input")
		HTMLDOM.setAttribute(input, "type", "radio")
		HTMLDOM.setAttribute(input, "name", "radio")
		var label = HTMLDOM.createElement("label")
		HTMLDOM.setStyle(label, "margin-left", "5px")
		HTMLDOM.appendChild(v, input)
		HTMLDOM.appendChild(v, label)
		return(v)
	}
}

IFDEF("target_android")
{
	// FIXME
	basetype Widget
}

IFDEF("target_iosoc")
{
	// FIXME
	basetype Widget
}

var widgetContext as GuiApplicationContext
var widgetText as string
var widgetValue as string
var widgetClickHandler as function

ctor(context as GuiApplicationContext)
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	widgetContext = context
}

func setWidgetText(text as string)
{
	widgetText = text
	IFDEF("target_html") {
		var child = HTMLDOM.getChild(element, 1)
		HTMLDOM.setInnerHTML(child, text)
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetText as string
{
	return(widgetText)
}

func setWidgetValue(value as string)
{
	widgetValue = value
	IFDEF("target_html") {
		lang "js" {{{
			this.element.firstChild.value = value;
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetValue as string
{
	return(widgetValue)
}

func setWidgetClickHandler(handler as function)
{
	widgetClickHandler = handler
	IFDEF("target_html") {
		var child #used = HTMLDOM.getChild(element, 0)
		lang "js" {{{
			child.onclick = handler;
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func isWidgetSelected as bool
{
	IFDEF("target_html") {
		return(lang "js" bool {{{ this.element.firstChild.checked }}})
	}
	return(false)
}
