
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.app.ui
import jk.json

class is ParentAwareWidget #widget:

IFDEF "target_browser"
{
	extend Widget

	var cardCounter static = 0
	var sdkIncluded static = false
	var sdkLoaded static = false
	var stripeViewWaiting static as this
	var stripeObject as object #used
	var stripeCardElement as object #used
	var myId as string

	func initializeHtmlWidget
	{
		myId = "StripeCardWidget" .. String.forInteger(cardCounter++)
		HTMLDOM.setAttribute(element, "id", myId)
		if sdkLoaded {
			context.startTimer(0, func {
				initializeCardWidget()
			})
		}
		else {
			if sdkIncluded {
				println "Stripe SDK included but not yet loaded."
				return
			}
			stripeViewWaiting = this
			lang "js" {{{
				window.onStripeSDKLoadedComplete = function() {
					UikitStripeStripeCardInputWidget.onSDKLoaded();
				}
			}}}
			var ss = HTMLDOM.createElement("script")
			HTMLDOM.setAttribute(ss, "src", "https://js.stripe.com/v3/")
			HTMLDOM.setAttribute(ss, "onload", "window.onStripeSDKLoadedComplete()")
			HTMLDOM.appendChild(HTMLDOM.getDocumentBody(), ss)
			sdkIncluded = true
		}
	}

	func onSDKLoaded static
	{
		var vv = stripeViewWaiting
		stripeViewWaiting = null
		if vv:
			vv.initializeCardWidget()
	}

	func initializeCardWidget
	{
		if cardWidgetInitialized:
			return
		var initializedHandler = widgetInitializedHandler
		lang "js" {{{
			var stripe = Stripe(this.widgetSecretKey);
			var elements = stripe.elements();
			stripeCardElement = elements.create("card", {
				style: {
					base: {
						fontSize: "16px"
					}
				}
			});
			stripeCardElement.mount("#" + this.myId);
			stripeCardElement.on("ready", function(event) {
				if(initializedHandler != null) {
					initializedHandler();
				}
			})
			this.stripeObject = stripe;
		}}}
		cardWidgetInitialized = true
		Widget.onLayoutChanged(this)
	}
}

ELSE
{
	is Widget
}

func forKey(context as GuiApplicationContext, secretKey as string) static as this
{
	var v = new this(context)
	v.setWidgetSecretKey(secretKey)
	return v
}

pvar widgetInitializedHandler as function
pvar widgetSecretKey as string
var context as GuiApplicationContext
var cardWidgetInitialized = false
var styleMap as map

ctor(ctx as GuiApplicationContext)
{
	this.context = ctx
}

func setCustomStyle(style as map) as this
{
	this.styleMap = style
	return this
}

func confirmCardPayment(paymentIntentClientSecret as string, callback as function<void, string, Error>)
{
	assert callback
	assert String.isNotEmpty(paymentIntentClientSecret):
		callback(null, Error.forCode("noClientSecret", "No client secret supplied"))
	IFDEF "target_browser" {
		var cs #used = paymentIntentClientSecret
		var cb #used = callback
		lang "js" {{{
			this.stripeObject.confirmCardPayment(cs, {
				payment_method: {
					card: stripeCardElement
				}
			}).then(function(result) {
				if(result.error) {
					cb(null, JkLangError.forCode(result.error.code, result.error.message));
				}
				else {
					cb(result.paymentIntent.payment_method, null);
				}
			})
		}}}
	}
}

func confirmCardSetup(setupIntentClientSecret as string, billingDetails as map<string, string>, callback as function<void, string, Error>)
{
	assert callback
	assert String.isNotEmpty(setupIntentClientSecret):
		callback(null, Error.forCode("noClientSecret", "No client secret supplied"))
	assert billingDetails:
		callback(null, Error.forCode("noBillingDetails", "No billing details supplied"))
	IFDEF "target_browser" {
		var cs #used = setupIntentClientSecret
		var cb #used = callback
		lang "js" {{{
			this.stripeObject.confirmCardSetup(cs, {
				"payment_method" : {
					"card" : stripeCardElement,
					"billing_details" : billingDetails
				}
			}).then(function(result) {
				if(result.error) {
					cb(null, JkLangError.forCode(result.error.code, result.error.message));
				}
				else {
					cb(result.setupIntent.payment_method, null);
				}
			})
		}}}
	}
}

func onWidgetAddingToParent:
	nop

func onWidgetAddedToParent
{
	IFDEF "target_browser" {
		initializeHtmlWidget()
	}
}

func onWidgetRemovedFromParent:
	nop
