
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Writer is PrintWriter is Closable is SeekableWriter is FlushableWriter:

func forStream(stream as [magical:System.IO.Stream]) static as this
{
	var v = new this()
	v.setStream(stream)
	return v
}

pvar stream as [magical:System.IO.Stream]?

func write(buf as buffer, size as int) as int
{
	var sz = size
	if sz < 1:
		sz = Buffer.getSize(buf) as! int
	lang "cs" {{{
		stream.Write(buf, 0, sz);
	}}}
	return sz
}

func print(str as string) as bool
{
	if stream == null:
		return false
	var buffer = String.toUTF8Buffer(str)
	var sz = sizeof buffer
	if write(buffer, -1) != sz:
		return false
	return true
}

func println(str as string) as bool:
	return print(str .. "\n")

func setCurrentPosition(n as int64) as bool
{
	var v = false
	lang "cs" {{{
		var np = stream.Seek(n, System.IO.SeekOrigin.Begin);
		if(np == n) {
			v = true;
		}
	}}}
	return v
}

func getCurrentPosition as int64:
	return lang "cs" as int64 {{{ stream.Position }}}

func flush:
	lang "cs" {{{
		stream.Flush();
	}}}

func close
{
	lang "cs" {{{
		if(stream != null) {
			stream.Dispose();
			stream = null;
		}
	}}}
}
