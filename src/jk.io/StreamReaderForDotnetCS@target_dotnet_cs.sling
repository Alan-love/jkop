
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SizedReader is Reader is Closable is SeekableReader:

func forStream(stream as [magical:System.IO.Stream]) static as this
{
	var v = new this()
	v.setStream(stream)
	return v
}

pvar stream as [magical:System.IO.Stream]?

func read(buf as buffer) implement as int
{
	if stream == null:
		return 0
	var mb = lang "cs" (buf) as int {{{ buf.Length }}}
	var v = 0
	lang "cs" (v, buf, mb) {{{
		v = stream.Read(buf, 0, mb);
	}}}
	if v < 1:
		lang "cs" {{{
			stream.Dispose();
		}}}
	return v
}

func setCurrentPosition(n as int64) implement as bool
{
	if stream == null:
		return false
	var v = false
	lang "cs" (n, v) {{{
		var np = stream.Seek(n, System.IO.SeekOrigin.Begin);
		if(np == n) {
			v = true;
		}
	}}}
	return v
}

func getCurrentPosition implement as int64
{
	if stream == null:
		return 0
	return lang "cs" as int64 {{{ stream.Position }}}
}

func getSize implement as long
{
	if stream == null:
		return 0
	var v as long
	lang "cs" {{{
		v = (long)stream.Length;
	}}}
	return v
}

func close implement
{
	lang "cs" {{{
		if(stream != null) {
			stream.Dispose();
			stream = null;
		}
	}}}
}
