
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Reader is LineReader is Closable:

func forReader(reader as Reader) static as this
{
	if var readerThis = reader as this:
		return readerThis
	var v = new this()
	v.setReader(reader)
	return v
}

func forReaderAndEncoding(reader as Reader, encoding as string?) static throws Exception as this
{
	if var readerThis = reader as this:
		return readerThis
	var v = new this()
	v.setReaderWithEncoding(reader, encoding)
	return v
}

var reader as Reader?
var iterator as CharacterIteratorForReader?

func setReader(reader as Reader)
{
	this.reader = reader
	var ii = CharacterIteratorForReader.forReader(reader)
	iterator = ii
}

func setReaderWithEncoding(reader as Reader, encoding as string?) throws Exception
{
	this.reader = reader
	var ii = CharacterIteratorForReader.forReader(reader)
	iterator = ii
	if encoding:
		ii.setEncoding(encoding)
}

func readLine implement as string?
{
	assert iterator
	var sb = new StringBuilder()
	loop {
		var c = iterator.getNextChar()
		if Character.isEOF(c) {
			if sb.count() < 1:
				return null
			break
		}
		if c == '\r':
			continue
		if c == '\n':
			break
		sb.appendCharacter(c)
	}
	if sb.count() < 1:
		return ""
	return sb.toString()
}

func readAll as string?
{
	assert iterator
	var sb = new StringBuilder()
	loop {
		var c = iterator.getNextChar()
		if Character.isEOF(c):
			break
		sb.appendCharacter(c)
	}
	if sb.count() < 1:
		return null
	return sb.toString()
}

func hasEnded as bool
{
	if not iterator:
		return true
	return iterator.hasEnded()
}

func read(buffer as buffer) implement throws Exception as int
{
	if reader == null:
		return -1
	return reader.read(buffer)
}

func close implement
{
	var rc = reader as Closable
	if rc:
		rc.close()
}
