
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Reader is SizedReader is SeekableReader:

func readFrom(reader as Reader) static as buffer?
{
	var v as buffer?
	var tmp = Buffer.allocate(1024)
	loop {
		var r = reader.read(tmp)
		if r < 1:
			break
		v = Buffer.append(v, tmp, r)
	}
	return v
}

func forBuffer(buf as buffer) static as this:
	return new this() {
		sourceBuffer buf
	}

prop sourceBuffer as buffer

var pos = 0

func setCurrentPosition(n as int64) as bool
{
	pos = n as! int
	return true
}

func getCurrentPosition as int64:
	return pos

func getBuffer as buffer:
	return sourceBuffer

func setBuffer(buf as buffer) as this
{
	sourceBuffer = buf
	pos = 0
	return this
}

func rewind:
	pos = 0

func getSize as long:
	return sizeof sourceBuffer

func read(buf as buffer) as int
{
	var buffersz = (sizeof sourceBuffer) as! int
	if pos >= buffersz:
		return 0
	var size = (sizeof buf) as! int
	if size > buffersz - pos:
		size = buffersz - pos
	Buffer.copyFrom(buf, sourceBuffer, pos, 0, size)
	pos += size
	return size
}
