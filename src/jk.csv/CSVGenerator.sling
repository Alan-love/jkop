
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.model

class is StringObject:

var table = new vector<vector<string>>
var fields = new vector<string>

func setFields(data as vector<string>)
{
	fields = new vector<string>
	foreach field in data:
		fields += field
}

func addHeaderFields(data as vector<string>)
{
	assert Vector.isEmpty(table)
	var row = new vector<string>
	fields = new vector<string>
	foreach field in data {
		row += field
		fields += field
	}
	addRow(row)
}

func addHeaderFromModel(record as DynamicModel)
{
	assert Vector.isEmpty(table)
	var row = new vector<string>
	fields = new vector<string>
	if var fis = record.getFieldInformation(): foreach hdr in fis {
		var val = hdr.name
		row += val
		fields += val
	}
	addRow(row)
}

func addRecordFromModel(record as DynamicModel):
	addRecordFromDynamicMap(record.getDataMap())

func addRecordFromDynamicMap(data as DynamicMap)
{
	var row = new vector<string>
	foreach field in fields {
		var val = data.getString(field)
		if not val:
			val = ""
		row += val
	}
	addRow(row)
}

func addRow(data as vector<string>):
	table += data

func escapeCellContents(value as string) private as string
{
	if String.contains(value, ",") == false:
		return value
	var sb = new StringBuilder()
	sb.appendCharacter('"')
	foreach c in String.iterate(value) {
		if c == '"' {
			sb.appendCharacter('"')
			sb.appendCharacter('"')
		}
		else {
			sb.appendCharacter(c)
		}
	}
	sb.appendCharacter('"')
	return sb.toString()
}

func toString as string
{
	var sb = new StringBuilder()
	foreach row in table {
		var first = true
		foreach cell in row {
			if not first:
				sb.appendCharacter(',')
			first = false
			sb.appendString(escapeCellContents(cell))
		}
		sb.appendCharacter('\n')
	}
	return sb.toString()
}
