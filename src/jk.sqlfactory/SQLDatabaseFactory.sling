
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.sql
import jk.env
import jk.url
import jk.mssql
import jk.mysql
import jk.sqlite
import jk.postgresql

class:

description [[
	A generic utility class for establishing connections to any supported database
	based on a connection string.
]]

func processConnectionString(connectionString as string) static throws Exception as string
{
	if String.contains(connectionString, "://") {
		var url = URL.forString(connectionString)
		var sb = new StringBuilder()
		var scheme = url.getScheme()
		if scheme == "postgresql":
			scheme = "postgres"
		if not scheme:
			Error.throw("invalidConnectionString", connectionString)
		var host = url.getHost()
		if not host:
			Error.throw("invalidConnectionString", connectionString)
		sb.appendString(scheme)
		sb.appendCharacter(':')
		sb.appendString(host)
		sb.appendCharacter(':')
		var username = url.getUsername()
		if username:
			sb.appendString(username)
		sb.appendCharacter(':')
		var password = url.getPassword()
		if password:
			sb.appendString(password)
		sb.appendCharacter(':')
		var path = url.getPath() ?? ""
		while String.startsWith(path, "/"):
			path = String.getEndOfString(path, 1)
		sb.appendString(path)
		var port = url.getPort()
		if port {
			sb.appendCharacter(':')
			sb.appendString(port)
		}
		var queryParams = url.getQueryParameters()
		if queryParams: foreach it in Map.iterateKeys(queryParams) {
			sb.appendCharacter(':')
			sb.appendString(it)
			sb.appendCharacter('=')
			if var value = Map.getValue(queryParams, it):
				sb.appendString(value)
		}
		return sb.toString()
	}
	return connectionString
}

func getDatabase(ctx as LoggingContext, connectionString as string) static throws Exception as SQLDatabase
{
	description [[
		Allocates a driver and creates a database connection object as specified by the
		connectionString. Supported connection strings start with eg. "mssql:",
		"mysql:", "postgres:" or "sqlite:".
	]]
	var comps = String.split(processConnectionString(connectionString), ':', 2)
	var dbtype = Vector.getValue(comps, 0)
	var dbstr = Vector.getValue(comps, 1)
	if String.isEmpty(dbtype):
		Error.throw("invalidConnectionString", connectionString)
	if String.isEmpty(dbstr):
		Error.throw("invalidConnectionString", connectionString)
	if dbtype == "mssql":
		return MSSQLDatabase.forConnectionString(ctx, dbstr)
	if dbtype == "mysql":
		return MySQLDatabase.forConnectionString(ctx, dbstr)
	if dbtype == "sqlite":
		return SQLiteDatabase.forFile(ctx, File.forPath(dbstr), true)
	if dbtype == "postgres":
		return PostgreSQLDatabase.forConnectionString(ctx, dbstr)
	Error.throw("unsupportedDatabaseType", dbtype)
}

func getDatabaseWithConfig(ctx as LoggingContext, config as DynamicMap) static throws Exception as SQLDatabase
{
	description [[
		Allocates a driver and connects to the database as specified by the config map.
		The "type" property in the config map specifies the type of the database.
		Currently only "mysql" is supported.
	]]
	var type = config.getString("type")
	if type == "mysql":
		return MySQLDatabase.forConfig(ctx, config)
	Error.throw("unsupportedDatabaseType", type)
}

func getDatabaseForEnvironmentVariable(ctx as LoggingContext, envVariableName as string) static throws Exception as SQLDatabase
{
	var dbConnectionString = EnvironmentVariable.get(envVariableName)
	if String.isEmpty(dbConnectionString):
		Error.throw("environmentVariableNotSet", envVariableName)
	dbConnectionString = String.strip(dbConnectionString)
	return getDatabase(ctx, dbConnectionString)
}

func getDefaultDatabase(ctx as LoggingContext) static throws Exception as SQLDatabase:
	return getDatabaseForEnvironmentVariable(ctx, "DATABASE")
