
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forBuffer(buffer as buffer) static as this
{
	var v = new this()
	v.setBuffer(buffer)
	return v
}

pvar buffer as buffer?
pvar position = 0L

func isValid(length as long) as bool
{
	assert buffer
	var sz = sizeof buffer
	assert position + length <= sz
	return true
}

func skipBytes(count as long):
	position += count

func getInt8 as int
{
	assert buffer
	assert isValid(1)
	return buffer[position++] as! int
}

func getFloat as float
{
	assert buffer
	assert isValid(4)
	var bb = Buffer.allocate(4)
	bb[0] = buffer[position++]
	bb[1] = buffer[position++]
	bb[2] = buffer[position++]
	bb[3] = buffer[position++]
	return Buffer.getFloatLE(bb, 0)
}

func getDouble as double
{
	assert buffer
	assert isValid(8)
	var bb = Buffer.allocate(8)
	bb[0] = buffer[position++]
	bb[1] = buffer[position++]
	bb[2] = buffer[position++]
	bb[3] = buffer[position++]
	bb[4] = buffer[position++]
	bb[5] = buffer[position++]
	bb[6] = buffer[position++]
	bb[7] = buffer[position++]
	return Buffer.getDoubleLE(bb, 0)
}

func getInt16 as int
{
	assert buffer
	assert isValid(2)
	var bb = Buffer.allocate(2)
	bb[0] = buffer[position++]
	bb[1] = buffer[position++]
	return Buffer.getInt16LE(bb, 0)
}

func getInt24 as int
{
	assert buffer
	assert isValid(3)
	var bb = Buffer.allocate(4)
	bb[0] = buffer[position++]
	bb[1] = buffer[position++]
	bb[2] = buffer[position++]
	bb[3] = 0 as! uint8
	return Buffer.getInt32LE(bb, 0) as! int
}

func getInt32 as int
{
	assert buffer
	assert isValid(4)
	var bb = Buffer.allocate(4)
	bb[0] = buffer[position++]
	bb[1] = buffer[position++]
	bb[2] = buffer[position++]
	bb[3] = buffer[position++]
	return Buffer.getInt32LE(bb, 0) as! int
}

func getInt64 as long
{
	assert buffer
	assert isValid(8)
	var bb = Buffer.allocate(8)
	bb[0] = buffer[position++]
	bb[1] = buffer[position++]
	bb[2] = buffer[position++]
	bb[3] = buffer[position++]
	bb[4] = buffer[position++]
	bb[5] = buffer[position++]
	bb[6] = buffer[position++]
	bb[7] = buffer[position++]
	return Buffer.getInt64LE(bb, 0) as! long
}

func getLengthEncodedInteger as long
{
	assert buffer
	assert isValid(1)
	var first = buffer[position]
	if first < 0xFB {
		position++
		return first as! long
	}
	if first == 0xFC {
		assert isValid(3)
		position++
		var bb = Buffer.allocate(2)
		bb[0] = buffer[position++]
		bb[1] = buffer[position++]
		return Buffer.getInt16LE(bb, 0)
	}
	if first == 0xFD {
		assert isValid(4)
		position++
		var bb = Buffer.allocate(4)
		bb[0] = buffer[position++]
		bb[1] = buffer[position++]
		bb[2] = buffer[position++]
		bb[3] = 0x00 as! uint8
		return Buffer.getInt32LE(bb, 0)
	}
	if first == 0xFE {
		assert isValid(9)
		position++
		var bb = Buffer.allocate(8)
		bb[0] = buffer[position++]
		bb[1] = buffer[position++]
		bb[2] = buffer[position++]
		bb[3] = buffer[position++]
		bb[4] = buffer[position++]
		bb[5] = buffer[position++]
		bb[6] = buffer[position++]
		bb[7] = buffer[position++]
		return Buffer.getInt64LE(bb, 0) as! long
	}
	ERROR "invalidByte"
}

func getNullTerminatedString as string?
{
	assert buffer
	var sb = new StringBuilder()
	var sz = sizeof buffer
	while position < sz {
		var c = buffer[position++]
		if c < 1:
			break
		sb.appendCharacter(c as! char)
	}
	return sb.toString()
}

func getEofTerminatedString as string?
{
	assert buffer
	var sb = new StringBuilder()
	var sz = sizeof buffer
	while position < sz {
		var c = buffer[position++]
		sb.appendCharacter(c as! char)
	}
	return sb.toString()
}

func getStaticLengthString(length as long) as string?
{
	assert buffer
	assert length > 0
	assert isValid(length)
	var sb = new StringBuilder()
	for(var n = 0 ; n < length ; n++):
		sb.appendCharacter(buffer[position++] as! char)
	return sb.toString()
}

func getLengthEncodedString as string?
{
	var length = getLengthEncodedInteger()
	if length < 1:
		return ""
	return getStaticLengthString(length)
}

func getLengthEncodedBuffer as buffer?
{
	var length = getLengthEncodedInteger()
	if length < 1:
		return null
	return getBuffer(length)
}

func getBuffer(length as long) as buffer?
{
	assert buffer
	assert isValid(length)
	var v = Buffer.allocate(length as! int)
	Buffer.copyFrom(v, buffer, position as! int, 0, length as! int)
	position += length
	return v
}
