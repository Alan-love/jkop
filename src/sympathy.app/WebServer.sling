
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cape
import capex
import capex.console
import sympathy
import sympathy.web

prop useConfigFile = false
prop enableRequestLogging = true
prop listenPort as int = 8080
prop loggingDirectory as File

func processConfiguration(config as SimpleConfigFile) virtual as bool
{
	listenPort = config.getIntegerValue("listenPort", listenPort)
	loggingDirectory = config.getFileValue("loggingDirectory", loggingDirectory)
	return(true)
}

func initialize(ctx as LoggingContext, server as HTTPServer) virtual as bool
{
	return(true)
}

func printUsage(stdout as PrintWriter) virtual
{
	var params as array<array<string>>
	if(useConfigFile) {
		params = [
			[ "configFile", "Specify the configuration file to use" ]
		]
	}
	var flags = [
		[ "port", "Specify the TCP/IP port to listen to (overriding configuration, if any)" ]
	]
	var options = [
		[ "requestLogging", "Enable or disable request logging (true or false)" ]
	]
	ConsoleApplication.printUsage(stdout, null, params, flags, options)
}

func printHeader(stdout as PrintWriter) virtual
{
}

func execute(args as array<string>) as bool
{
	var stdout = Stdout.instance()
	printHeader(stdout)
	var ctx as LoggingContext = new ConsoleApplicationContext()
	var configFile as File
	var forceListenPort = 0
	var showHelp = false
	foreach(arg in ConsoleApplication.parseCommandLineArguments(args)) {
		if(arg.isParameter()) {
			if(configFile != null) {
				Log.error(ctx, "Duplicate config file parameter supplied: `" .. arg.value .. "'")
				return(false)
			}
			configFile = FileInstance.forPath(arg.getStringValue())
		}
		else if(arg.isFlag("port")) {
			forceListenPort = arg.getIntegerValue()
		}
		else if(arg.isFlag("help") || arg.isFlag("h")) {
			showHelp = true
		}
		else if(arg.isOption("requestLogging")) {
			enableRequestLogging = arg.getBooleanValue()
		}
		else {
			arg.reportAsUnsupported(ctx)
			return(false)
		}
	}
	if(showHelp) {
		printUsage(stdout)
		return(true)
	}
	if(useConfigFile) {
		if(configFile == null) {
			printUsage(stdout)
			return(false)
		}
		var config = SimpleConfigFile.forFile(configFile)
		if(config == null) {
			Log.error(ctx, "Failed to read configuration file: `" .. configFile.getPath() .. "'")
			return(false)
		}
		if(processConfiguration(config) == false) {
			Log.error(ctx, "Configuration file processing failed: `" .. configFile.getPath() .. "'")
			return(false)
		}
	}
	if(loggingDirectory != null) {
		Log.debug(ctx, "Configuring logging to directory: `" .. loggingDirectory.getPath() .. "'")
		ctx = DirectoryLogContext.create(loggingDirectory)
	}
	if(forceListenPort > 0) {
		listenPort = forceListenPort
	}
	var server = new HTTPServer()
	server.setPort(listenPort)
	if(initialize(ctx, server) == false) {
		Log.error(ctx, "Failed to configure HTTP server")
		return(false)
	}
	if(enableRequestLogging) {
		server.addRequestHandlerListener(new HTTPServerRequestLogger().setLogContext(ctx).setLogdir(loggingDirectory))
	}
	var ioManager = IOManager.createDefault()
	if(ioManager == null) {
		Log.error(ctx, "Failed to create IO manager")
		return(false)
	}
	if(server.initialize(ioManager, ctx) == false) {
		Log.error(ctx, "Failed to initialize HTTP server.")
		return(false)
	}
	if(ioManager.execute(ctx) == false) {
		Log.error(ctx, "Failed to execute IO manager")
		return(false)
	}
	Log.info(ctx, "Exiting normally.")
	return(true)
}
