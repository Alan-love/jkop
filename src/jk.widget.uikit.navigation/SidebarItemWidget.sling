
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.uikit.core
import jk.widget.uikit.boxicons

class is SidebarItem #widget:

IFDEF "target_html"
{
	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.addEventListener(element, "mouseover", func {
			onMouseOver()
		})
		HTMLDOM.addEventListener(element, "mouseout", func {
			onMouseOut()
		})
	}

	func onMouseOver private
	{
		if selected:
			return
		setSelected(false)
	}

	func onMouseOut private
	{
		if selected:
			return
		resetColor()
	}
}

ui LayerWithBackgroundColorWidget
{
	color = context.getStyleColor("jkop-kit", "sidebarColor", "#FFFFFF")
	HorizontalBoxWidget hbox {
		spacing = context.getStylePixels("jkop-kit", "mediumSpacing")
		margin = context.getHeightValue("1500um")
		marginLeft = context.getHeightValue("2mm")
		marginRight = context.getHeightValue("2mm")
		LayerWidget iconLayer {
			AlignWidget {
				BoxIconWidget icon : 0.5, 0.5, true {
					color = context.getStyleColor("jkop-kit", "sidebarTextColor", "#000000")
				}
			}
		}
		AlignWidget align : 1.0 {
			LabelWidget itemLabel : 0.0, 0.5 {
				fontSize = context.getStylePixels("jkop-kit", "regularFont", "2800um")
				fontFamily = context.getStyleString("jkop-kit", "fontFamilyRegular")
				textColor = context.getStyleColor("jkop-kit", "sidebarTextColor", "#000000")
				padding = context.getStylePixels("jkop-kit", "margin", "2000um")
			}
		}
		AlignWidget rightIcon {
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

pvar widgetSubItemMode = false
pvar widgetRoute as string
var widgetClickHandler as function
var itemClicked = false
var rightIconWidget
var selected = false

func initializeWidget override
{
	base.initializeWidget()
	Widget.setWidgetClickHandler(this, func {
		itemClicked = true
		selected = !selected
		if selected {
			setSelected()
		}
		else {
			resetColor()
		}
		if widgetClickHandler {
			widgetClickHandler()
		}
		else {
			if String.isNotEmpty(widgetRoute) {
				Router.go(widgetRoute)
			}
		}
	})
	IFDEF "target_html" {
		HTMLDOM.setStyle(this.element, "cursor", "pointer")
	}
}

func setWidgetText(text as string) as this
{
	itemLabel.setWidgetText(text)
	return this
}

func getWidgetText as string:
	return itemLabel.getWidgetText()

func setMarginLeft(margin as int #notLiteral) as this
{
	hbox.setWidgetMarginLeft(margin)
	return this
}

func setWidgetClickHandler(handler as function) as this
{
	assert handler
	widgetClickHandler = handler
	return this
}

func setSelected(includeBgColor as bool = true)
{
	if not widgetSubItemMode {
		if includeBgColor:
			setWidgetBackgroundColor(context.getStyleColor("jkop-kit", "sidebarSelectedColor", "#000000"))
		icon.setWidgetColor(context.getStyleColor("jkop-kit", "sidebarTextSelectedColor", "#000000"))
		itemLabel.setWidgetTextColor(context.getStyleColor("jkop-kit", "sidebarTextSelectedColor", "#000000"))
		if rightIconWidget:
			rightIconWidget.setWidgetColor(context.getStyleColor("jkop-kit", "sidebarTextSelectedColor", "#000000"))
	}
}

func resetColor
{
	icon.setWidgetColor(context.getStyleColor("jkop-kit", "sidebarTextColor", "#000000"))
	itemLabel.setWidgetTextColor(context.getStyleColor("jkop-kit", "sidebarTextColor", "#000000"))
	if rightIconWidget:
		rightIconWidget.setWidgetColor(context.getStyleColor("jkop-kit", "sidebarTextColor", "#000000"))
}

func setItemIsClicked(v as bool):
	itemClicked = v

func itemIsClicked as bool:
	return itemClicked

func setWidgetBackgroundColor(color as Color):
	setWidgetColor(color)

func setWidgetIcon(resource as string) as this
{
	icon.setWidgetIcon(resource)
	iconLayer.setWidgetWidthRequest(context.getHeightValue("6mm"))
	return this
}

func setWidgetRightIcon(source as string) as this
{
	Widget.removeChildrenOf(rightIcon)
	rightIconWidget = new BoxIconWidget(context)
	rightIconWidget.setWidgetIcon(source)
	rightIconWidget.setWidgetColor(context.getStyleColor("jkop-kit", "sidebarTextColor", "#000000"))
	rightIcon.addWidgetWithProperties(rightIconWidget, 1.0, 0.5)
	return this
}

func setWidgetTextColor(textColor as Color) as this
{
	itemLabel.setWidgetTextColor(textColor)
	return this
}

func setWidgetFontSize(sz as int) as this
{
	itemLabel.setWidgetFontSize(sz)
	return this
}

func setWidgetTextAlignCentered as this
{
	align.setAlignForIndex(0, 0.5, 0.5)
	return this
}
