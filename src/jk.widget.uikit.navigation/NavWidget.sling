
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget
import jk.widget.common

class is RouterListener #widget:

ui LayerWidget
{
}

pvar widgetAppBarLeftImageResource as string
pvar widgetEnableAppBar = true
var sidebarIsFixed = false
var sidebarIsDisplayed = false
var contentArea as SwitcherLayerWidget
var sidebarSlotLeft as LayerWidget
var appBar as AppBarWidget
var sidebarWidget as Widget
var routes private as map<string, function<Widget>>

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	routes = new map<string, function<Widget>>
}

func initializeWidget override
{
	base.initializeWidget()
	var mainContainer = VerticalBoxWidget.forContext(context)
	if widgetEnableAppBar {
		appBar = new AppBarWidget(context)
		if String.isNotEmpty(widgetAppBarLeftImageResource):
			appBar.setWidgetLeftImageResource(widgetAppBarLeftImageResource)
		mainContainer.addWidget(appBar)
		var menuItems = getAppBarMenuItems()
		if menuItems:
			appBar.setWidgetMenuItems(menuItems)
	}
	contentArea = new SwitcherLayerWidget(context)
	sidebarSlotLeft = new LayerWidget(context)
	var box = new HorizontalBoxWidget(context)
	box.addWidget(sidebarSlotLeft)
	box.addWidgetWithProperties(contentArea, 1.0)
	mainContainer.addWidgetWithProperties(box, 1.0)
	addWidget(mainContainer)
	sidebarWidget = createSidebarWidget()
	Router.goToDefault()
}

func onRouteChanged(route as string)
{
	var w = assert getWidget(route)
	Widget.removeChildrenOf(contentArea)
	contentArea.addWidget(w)
	if w is DisplayAwareWidget:
		(w as! DisplayAwareWidget).onWidgetDisplayed()
}

func initializeRoutes(rs as array) as bool
{
	assert rs
	foreach m as map in rs {
		var route = Map.getValue(m, "route") as string
		var widget = Map.getValue(m, "widget") as! function<Widget>
		addRoute(route, widget)
	}
	return true
}

func addRoute(route as string, callback as function<Widget>)
{
	if not routes:
		routes = new map<string, function<Widget>>
	routes[route] = callback
}

func getWidget(route as string) as Widget
{
	var w = Map.getValue(routes, route) as! function<Widget>
	if not w:
		w = Map.getValue(routes, "*") as! function<Widget>
	assert w
	return w()
}

func updateWidgetTitle(title as string)
{
	assert appBar
	appBar.setWidgetTitle(title)
}

func enableFixedSidebar private
{
	if sidebarWidget == null || sidebarSlotLeft == null || sidebarIsFixed:
		return
	hideSidebarWidget(false)
	sidebarIsFixed = true
	sidebarSlotLeft.addWidget(sidebarWidget)
}

func disableFixedSidebar private
{
	if sidebarIsDisplayed || sidebarIsFixed == false:
		return
	Widget.removeFromParent(sidebarWidget)
	sidebarIsFixed = false
}

func hideSidebarWidget(animated as bool = true)
{
	if sidebarIsDisplayed == false:
		return
	sidebarIsDisplayed = false
	var box final = Widget.getParent(Widget.getParent(sidebarWidget))
	if animated {
		var fx final = -Widget.getWidth(sidebarWidget)
		var anim = WidgetAnimation.forDuration(context, 250)
		anim.addCallback(func(completion as double) {
			var dx = (fx * completion) as int
			Widget.move(box, dx, Widget.getY(box))
		})
		anim.setEndListener(func {
			Widget.removeFromParent(sidebarWidget)
			Widget.removeFromParent(box)
		})
		anim.start()
	}
	else {
		Widget.removeFromParent(sidebarWidget)
		Widget.removeFromParent(box)
	}
}

func computeWidgetLayout(widthConstraint as int #notLiteral) override
{
	if widthConstraint > context.getWidthValue("200mm") {
		enableFixedSidebar()
	}
	else {
		disableFixedSidebar()
	}
	base.computeWidgetLayout(widthConstraint)
}

func getAppBarMenuItems virtual as vector<Widget>:
	return null

func createSidebarWidget virtual as Widget:
	return null
