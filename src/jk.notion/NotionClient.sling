
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import jk.webclient
import jk.thread
import jk.time

class:

model Page public
{
	object as string
	id as string
	created_time as string
	last_edited_time as string
	created_by as User
	last_edited_by as User
	cover as string
	icon as string
	parent as Parent
	archived as bool
	url as string
	properties as DynamicMap
}

model Database public
{
	object as string
	id as string
	created_time as string
	created_by as User
	last_edited_time as string
	last_edited_by as User
	title as DynamicVector
	description as DynamicVector
	icon as DynamicMap
	cover as DynamicMap
	properties as DynamicMap
	parent as DynamicMap
	url as string
	archived as bool
	is_inline as bool
}

model User public
{
	object as string
	id as string
	type as string
	name as string
	avatar_url as string
}

model UsersList public
{
	users as User[]
}

model PageProperty public
{
	id as string
	object as string
	type as string
	has_more as bool
	property_item as PropertyItem
	date as Date
	checkbox as bool
	multi_select as MultiSelect[]
	title as RichText[]
	rich_text as RichText[]
	select as Select
}

model Select public
{
	id as string
	name as string
	color as string
}

model PropertyItem public
{
	object as string
	id as string
	type as string
}

model Parent public
{
	type as string
	database_id as string
}

model File public
{
	type as string
	file as HostedFile
	external as ExternalFile
	caption as RichText[]
}

model TableRow public
{
	cells as RichText[][]
}

model Block public
{
	object as string
	id as string
	parent as DynamicMap
	type as string
	created_time as string
	created_by as User
	last_edited_by as User
	last_edited_time as string
	archived as bool
	has_children as bool
	paragraph as Paragraph
	heading_1 as Paragraph
	heading_2 as Paragraph
	heading_3 as Paragraph
	callout as Callout
	quote as ListItem
	bulleted_list_item as ListItem
	numbered_list_item as ListItem
	to_do as ToDo
	// toggle
	code as Code
	// child_page
	// child_database
	embed as Embed
	image as File
	video as File
	file as File
	pdf as File
	bookmark as Bookmark
	equation as Equation
	// divider
	// table_of_contents
	// breadcrumb
	// column_list
	// column
	// link_preview
	// template
	link_to_page as LinkToPage
	// synced_block
	// table
	table_row as TableRow
}

model BlockGroup public
{
	type as string
	blocks as Block[]
}

model LinkToPage public
{
	page_id as string
}

model PageResultList public
{
	object as string
	results as Page[]
	next_cursor as string
	has_more as bool
	type as string
	page as Page
}

model BlockResultList public
{
	object as string
	results as Block[]
	next_cursor as string
	has_more as bool
	type as string
	block as Block
}

model Annotations public
{
	bold as bool
	italic as bool
	strikethrough as bool
	underline as bool
	code as bool
	color as string
}

model Link public
{
	url as string
}

model TextModel public
{
	content as string
	link as Link
}

model Date public
{
	start as string
	end as string
	time_zone as string
}

model MultiSelect public
{
	id as string
	name as string
	color as string
}

model MentionPage public
{
	id as string
}

model Mention public
{
	type as string
	page as MentionPage
}

model RichText public
{
	type as string
	text as TextModel
	mention as Mention
	equation as Equation
	annotations as Annotations
	plain_text as string
	href as string
}

model Paragraph public
{
	rich_text as RichText[]
	color as string
}

model Bookmark public
{
	caption as RichText[]
	url as string
}

model Code public
{
	rich_text as RichText[]
	caption as RichText[]
	language as string
}

model ListItem public
{
	rich_text as RichText[]
	color as string
	children as DynamicMap
}

model Callout public
{
	rich_text as RichText[]
	icon as Icon
	color as string
	children as DynamicMap
}

model Icon public
{
	type as string
}

model ToDo public
{
	rich_text as RichText[]
	checked as bool
	color as string
	children as DynamicMap
}

model Equation public
{
	expression as string
}

model MediaBlock public
{
	name as string
	type as string
	external as ExternalFile
	caption as RichText[]
	file as HostedFile
}

model HostedFile public
{
	url as string
	expiry_time as string
}

model ExternalFile public
{
	url as string
}

model Embed public
{
	caption as RichText[]
	url as string
}

prop ctx as LoggingContext
prop apiBaseUrl as string = "https://api.notion.com/v1"
prop apiVersion as string = "2022-06-28"
prop authKey as string
var rateLimitedUntil as long = 0L

ctor(ctx as LoggingContext, authKey as string)
{
	this.ctx = ctx
	this.authKey = authKey
}

func onInvalidResponse(response as dynamic) #throws:
	Error.throw("notionInvalidResponse", response)

func callToNotion(method as string, path as string, postBody as dynamic?) async private as DynamicMap
{
	var key = authKey
	if rateLimitedUntil > 0L {
		var now = SystemClock.asUTCSeconds()
		if now < rateLimitedUntil:
			Error.throw("notionRateLimited", String.forLongInteger(rateLimitedUntil - now))
		rateLimitedUntil = 0L
	}
	if String.startsWith(path, "/") == false:
		Error.throw("notionInvalidApiPath", path)
	var url = apiBaseUrl .. path
	var headers = new KeyValueList<string,string>()
	headers.add("Authorization", "Bearer " .. key)
	headers.add("Notion-Version", apiVersion)
	var pb = WebClient.toPostBody(postBody)
	if pb {
		headers.add("accept", "application/json")
		headers.add("content-type", "application/json")
	}
	var responseValue as DynamicMap?
	var retries = 0
	while not responseValue {
		var ctx = this.ctx
		if ctx.isInDebugMode():
			Log.debug(ctx, "Calling Notion API: `" .. method .. " " .. url .. " ..")
		var response = await WebClient.instance().executeQuery(ctx, method, url, headers, pb)
		var status = String.safeString(response.statusCode)
		var message = response.statusMessage
		var responseBody = response.getBodyAsString()
		if ctx.isInDebugMode():
			Log.debug(ctx, "Received from Notion: " .. responseBody)
		if String.startsWith(status, "2") == false {
			if String.startsWith(status, "5") {
				// internal error at Notion
				retries++
				if retries > 5:
					Error.throw("notionInternalError", "retries: " .. String.forInteger(retries) .. ", error: " .. message)
				Log.warning(ctx, "Received error `" .. status .. "' from Notion API, waiting 5 seconds to retry.")
				await CurrentThread.sleepSecondsAsync(5)
				continue
			}
			if status == "429" {
				// rate limited
				var retryAfter = Integer.forStringOrDefaultValue(response.getHeaderValue("retry-after") ?? "0")
				if retryAfter < 1:
					retryAfter = 60
				rateLimitedUntil = SystemClock.asUTCSeconds() + retryAfter
				var retryAfterString = String.forLongInteger(retryAfter)
				Log.warning(ctx, "Received error `429 rate limited' from Notion. Retry after `" .. retryAfterString .. "'.")
				Error.throw("notionRateLimited", retryAfterString)
			}
			Error.throw("notionApiError", response)
		}
		responseValue = JSONParser.parseStringAsMap(responseBody)
	}
	if not responseValue:
		Error.throw("failedToGetResponseValue", null)
	return responseValue
}

func createPage(data as Page) async as Page
{
	var response = await callToNotion("POST", "/pages/", data)
	return Page.forData(response)
}

func getPage(pageId as string) async as Page
{
	var response = await callToNotion("GET", "/pages/" .. pageId, null)
	return Page.forData(response)
}

func updatePage(pageId as string, data as Page) async as Page
{
	var response = await callToNotion("PATCH", "/pages/" .. pageId, data)
	return Page.forData(response)
}

func getPropertyItem(databaseId as string, pageId as string, propertyName as string) async as PropertyItem
{
	var properties = await getPropertiesList(databaseId)
	var property = properties.getDynamicMap(propertyName)
	if not property:
		Error.throw("propertyNotFound", propertyName)
	var propertyId = property.getString("id")
	if not propertyId:
		Error.throw("noPropertyId", property)
	var propertyUrl = "/pages/" .. pageId .. "/properties/" .. propertyId
	var response = await callToNotion("GET", propertyUrl, null)
	return PropertyItem.forData(response)
}

func getPropertiesList(databaseId as string) async as DynamicMap
{
	var dbDetails = await getDatabaseDetails(databaseId)
	var v = dbDetails.properties
	if not v:
		v = new DynamicMap()
	return v
}

func createDatabase(data as Database) async as Database
{
	var createDatabaseUrl = "/databases"
	var response = await callToNotion("POST", createDatabaseUrl, data)
	return Database.forData(response)
}

func updateDatabase(databaseId as string, data as Database) async as Database
{
	var databaseApiUrl = "/databases/" .. databaseId
	var response = await callToNotion("PATCH", databaseApiUrl, data)
	return Database.forData(response)
}

func getDatabaseDetails(databaseId as string) async as Database
{
	var databaseApiUrl = "/databases/" .. databaseId
	var response = await callToNotion("GET", databaseApiUrl, null)
	var propList = response.get("properties")
	return Database.forData(response)
}

func queryDatabase(databaseId as string, data as DynamicMap) async as PageResultList
{
	var queryUrl = "/databases/" .. databaseId .. "/query"
	var response = await callToNotion("POST", queryUrl, data)
	return PageResultList.forData(response)
}

func queryPageFromDatabase(databaseId as string, key as string, value as string) async as Page?
{
	var s = new map {
		equals value
	}
	var v = new map {
		property key
		rich_text s
	}
	var filter = new DynamicMap()
	filter.setObject("filter", v)
	var queryUrl = "/databases/" .. databaseId .. "/query"
	var response = await callToNotion("POST", queryUrl, filter)
	var r = PageResultList.forData(response)
	var rresults = assert r.results
	return Vector.getValue(rresults, 0)
}

func getUser(userId as string) async as User
{
	var userUrl = "/users/" .. userId
	var response = await callToNotion("GET", userUrl, null)
	return User.forData(response)
}

func getAllUsers async as UsersList
{
	var usersListUrl = "/users"
	var response = await callToNotion("GET", usersListUrl, null)
	return UsersList.forData(response)
}

func getBlock(blockId as string) async as Block
{
	var blockUrl = "/blocks/" .. blockId
	var response = await callToNotion("GET", blockUrl , null)
	return Block.forData(response)
}

func getChildrenBlocks(blockId as string) async as vector<Block>
{
	var blockChildren = "/blocks/" .. blockId .. "/children"
	var response = await callToNotion("GET", blockChildren, null)
	var v = BlockResultList.forData(response)
	var b = new vector<Block>
	if var vresults = v.results: foreach block in vresults {
		b += block
		if block.has_children {
			if var blockId = block.id {
				var a = await getChildrenBlocks(blockId)
				foreach item in a:
					b += item
			}
		}
	}
	return b
}
