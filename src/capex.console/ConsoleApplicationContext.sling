
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ApplicationContext is LoggingContext imports cape:

func forApplicationName(name as string) static as this
{
	var v = new this()
	v.setApplicationName(name)
	return(v)
}

prop applicationName as string
prop enableDebugMessages = false
var errorCounter = 0
var warningCounter = 0
var infoCounter = 0
var debugCounter = 0

IFDEF("target_android") {
	func getAndroidActivityContext as !"android.content.Context"
	{
		return(null)
	}
}

func resetCounters
{
	errorCounter = 0
	warningCounter = 0
	infoCounter = 0
	debugCounter = 0
}

func getErrorCount as int
{
	return(errorCounter)
}

func getWarningCount as int
{
	return(warningCounter)
}

func getInfoCount as int
{
	return(infoCounter)
}

func getDebugCount as int
{
	return(debugCounter)
}

func logError(message as string)
{
	PRINT("[ERROR] " .. message)
	errorCounter ++
}

func logWarning(message as string)
{
	PRINT("[WARNING] " .. message)
	warningCounter ++
}

func logInfo(message as string)
{
	PRINT("[INFO] " .. message)
	infoCounter ++
}

func logDebug(message as string)
{
	if(enableDebugMessages) {
		PRINT("[DEBUG] " .. message)
	}
	debugCounter ++
}

func getApplicationDataDirectory as File
{
	var appName = applicationName
	if(String.isEmpty(appName)) {
		var cp = CurrentProcess.getExecutableFile()
		if(cp != null) {
			appName = cp.baseNameWithoutExtension()
		}
	}
	if(String.isEmpty(appName)) {
		return(null)
	}
	// FIXME: For Windows, should have a special case to use the local appdata folder
	return(FileInstance.forRelativePath("." .. appName, Environment.getHomeDirectory()))
}
