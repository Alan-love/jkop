
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.math

class:

func createCircularImage(m as Image) static throws Exception as Image
{
	var image = m
	var size = Math.min(image.getPixelWidth(), image.getPixelHeight()) as! int
	image = image.crop(0, 0, size, size)
	var ir = ImageRenderer.forDimensions(size, size)
	var ctx = ir.getRenderingContext()
	var r = size / 2
	ctx.save()
	ctx.beginPath()
	ctx.arc(r, r, r, 0, 2 * Math.M_PI, false)
	ctx.clip()
	ctx.drawImage(image, 0, 0)
	ctx.restore()
	return ir.getImage()
}

func createCircledInitialsImage(text as string, size as int, backgroundColor as string, foregroundColor as string) static throws Exception as Image
{
	var ir = ImageRenderer.forDimensions(size, size)
	var ctx = ir.getRenderingContext()
	var r = size / 2
	ctx.save()
	ctx.beginPath()
	ctx.arc(r, r, r, 0, 2 * Math.M_PI, false)
	ctx.clip()
	ctx.setFillStyle(Color.forString(backgroundColor))
	ctx.fillRect(0, 0, size, size)
	ctx.setFillStyle(Color.forString(foregroundColor))
	var tsz = size * 0.75
	var fsz = tsz
	while fsz > 0 {
		ctx.setFont(new FontDescription() {
			family "Arial"
			bold true
			size Length.forPoints(fsz)
		})
		var sz = ctx.measureText(text)
		if sz.width > tsz || sz.height > tsz {
			fsz--
			continue
		}
		var tw = sz.width
		var th = sz.height
		var x = size / 2 - tw / 2
		var y = size / 2 + th / 2
		ctx.fillText(text, x, y, tw)
		break
	}
	ctx.restore()
	return ir.getImage()
}

func createInitialsImage(text as string, size as int, textColor as string) static throws Exception as Image
{
	var ir = ImageRenderer.forDimensions(size, size)
	var ctx = ir.getRenderingContext()
	ctx.setFillStyle(Color.forString(textColor))
	var tsz = size
	var fsz = tsz
	while fsz > 0 {
		ctx.setFont(new FontDescription() {
			family "Arial"
			bold true
			size Length.forPoints(fsz)
		})
		var sz = ctx.measureText(text)
		if sz.width > tsz || sz.height > tsz {
			fsz--
			continue
		}
		var tw = sz.width
		var th = sz.height
		var x = size / 2 - tw / 2
		var y = size / 2 + th / 2
		ctx.fillText(text, x, y, tw)
		break
	}
	return ir.getImage()
}

func createUpDownArrowsImage(size as int, color as string) static throws Exception as Image
{
	var ir = ImageRenderer.forDimensions(size, size)
	var ctx = ir.getRenderingContext()
	ctx.setStrokeStyle(Color.forString(color))
	ctx.beginPath()
	ctx.moveTo(1 * size / 4, 3 * size / 8)
	ctx.lineTo(2 * size / 4, 1 * size / 8)
	ctx.lineTo(3 * size / 4, 3 * size / 8)
	ctx.stroke()
	ctx.beginPath()
	ctx.moveTo(1 * size / 4, 5 * size / 8)
	ctx.lineTo(2 * size / 4, 7 * size / 8)
	ctx.lineTo(3 * size / 4, 5 * size / 8)
	ctx.stroke()
	return ir.getImage()
}
