
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.socket
import jk.socket.ssl
import jk.socket.io

class is TCPClient:

func forCurrentIOManager(ctx as LoggingContext) static as this
{
	var mgr = IOManager.getCurrent()
	if not mgr:
		Error.throw("noCurrentIoManager", null)
	var v = new this() {
		ctx ctx
	}
	v.setIomanager(mgr)
	return v
}

func forIOManager(ctx as LoggingContext, mgr as IOManager) static as this
{
	var v = new this() {
		ctx ctx
	}
	v.setIomanager(mgr)
	return v
}

prop ctx as LoggingContext

var tcpsocket as TCPSocket?
var sslsocket as SSLSocket?
var rcvbuffer = Buffer.allocate(64 * 1024)
var entry as IOManagerEntry?

pvar iomanager as IOManager?

func getSocket as ConnectedSocket
{
	if sslsocket:
		return sslsocket
	if tcpsocket:
		return tcpsocket
	Error.throw("noSocketAvailable", null)
}

func doConnectSocket(address as string, port as int) private as TCPSocket:
	return TCPSocket.createAndConnect(address, port)

func connectSSL(address as string, port as int, callback as function<void,Error?>?) override
{
	// FIXME: This needs to be made asynchronous. Use worker threads.
	tcpsocket = doConnectSocket(address, port)
	sslsocket = SSLSocket.forClient(ctx, tcpsocket, address)
	if not addSocketToIOMananger() {
		if callback:
			callback(Error.forCode("failedToAddSocketToIOManager"))
		return
	}
	if callback:
		callback(null)
}

func connect(address as string, port as int, callback as function<void,Error?>?) override
{
	// FIXME: This needs to be made asynchronous. Use worker threads.
	assert tcpsocket = doConnectSocket(address, port) {
		if callback:
			callback(Error.forCode("failedToConnect"))
	}
	sslsocket = null
	assert addSocketToIOMananger() {
		if callback:
			callback(Error.forCode("failedToAddSocketToIOManager"))
	}
	if callback:
		callback(null)
}

func addSocketToIOMananger private as bool
{
	assert iomanager
	var socket = getSocket()
	assert entry = iomanager.add(socket)
	return true
}

func receive(callback as function<void,buffer?,int>?) override
{
	assert tcpsocket {
		if callback:
			callback(null, 0)
	}
	assert entry {
		if callback:
			callback(null, 0)
	}
	var cc = callback
	entry.setReadListener(func {
		entry.setReadListener(null)
		var ss = getSocket()
		var bb = rcvbuffer
		var v = 0
		v = ss.read(bb)
		if cc:
			cc(bb, v)
	})
}

class MyBuffer
{
	pvar data as buffer?
	pvar size as int
	pvar callback as function<void,Error?>?
}

var toWrite = new Queue<MyBuffer>()
var writeScheduled = false

func send(data as buffer, size as int, callback as function<void,Error?>?) override
{
	assert tcpsocket {
		if callback:
			callback(Error.forCode("notConnected"))
	}
	assert entry {
		if callback:
			callback(Error.forCode("noIOManagerEntry"))
	}
	var mb = new MyBuffer()
	mb.setData(data)
	mb.setSize(size)
	mb.setCallback(callback)
	toWrite.push(mb)
	scheduleWrite()
}

func scheduleWrite private
{
	if writeScheduled:
		return
	if toWrite.getSize() < 1:
		return
	assert entry
	entry.setWriteListener(func {
		entry.setWriteListener(null)
		writeScheduled = false
		var mb = toWrite.pop()
		if mb {
			var data = mb.getData()
			var size = mb.getSize()
			var callback = mb.getCallback()
			var ss = getSocket()
			var n = 0
			if data:
				n = ss.write(data, size)
			if callback {
				if n < size {
					callback(Error.forCode("failedToWrite"))
				}
				else {
					callback(null)
				}
			}
		}
		scheduleWrite()
	})
	writeScheduled = true
}

func disconnect(callback as function<void,Error?>?) override
{
	toWrite.clear()
	writeScheduled = false
	// FIXME: Needs to be made asynchronous
	if sslsocket {
		sslsocket.close()
		sslsocket = null
	}
	if tcpsocket {
		tcpsocket.close()
		tcpsocket = null
	}
	if callback:
		callback(null)
}
