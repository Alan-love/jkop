
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.nodejs

class is ArchiveExtractor:

depend "npm:extract-zip:2.0.1"

func forFile(file as File) static as this:
	return new this() {
		file file
	}

func forBuffer(buffer as buffer) static as this:
	return new this() {
		buffer buffer
	}

prop file as File?
prop buffer as buffer?

func extractFileToDirectory(srcFile as File, destDir as File, listener as function<void,File>) private async
{
	var extract = NodeModule.require("extract-zip")
	var srcPath = srcFile.getPath()
	var dstPath = destDir.getPath()
	lang "js" {{{
		await extract(srcPath, { dir: dstPath })
	}}}
}

func extractBufferToDirectory(srcBuffer as buffer, destDir as File, listener as function<void,File>) private async
{
	var dd = TemporaryDirectory.create()
	var ff = dd.entry("archive.zip")
	try {
		ff.setContentsBuffer(srcBuffer)
		await extractFileToDirectory(ff, destDir, listener)
	}
	catch e {
		dd.removeRecursive()
		throw e
	}
	dd.removeRecursive()
}

func extractToDirectory(destDir as File, listener as function<void,File>) override async
{
	if var file = this.file {
		await extractFileToDirectory(file, destDir, listener)
		return
	}
	if var buffer = this.buffer {
		await extractBufferToDirectory(buffer, destDir, listener)
		return
	}
	Error.throw("missingValue", "sourceFileOrBuffer")
}
