
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.os

class is ZipWriter:

depend "nuget:System.IO.Compression@4.1.0-rc2-24027"

prop file as File
prop archive as native<System.IO.Compression.ZipArchive>

func forFile(file as File) static as this
{
	var fp = file.getPath()
	var archive = lang "cs" as native<System.IO.Compression.ZipArchive> {{{ System.IO.Compression.ZipFile.Open(fp, System.IO.Compression.ZipArchiveMode.Create) }}}
	return new this() {
		file file
		archive archive
	}
}

func addFile(file as File, filename as string) override as bool
{
	if file.isDirectory() {
		// FIXME: We just skip directories here. Should actually add them into the archive.
		return true
	}
	lang "cs" {{{
		System.IO.Compression.ZipArchiveEntry e = System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(archive, file.getPath(), filename);
		if(e == null) {
			return(false);
		}
	}}}
	if OS.isMacOS() || OS.isLinux() {
		var st = file.stat()
		lang "cs" {{{
			e.ExternalAttributes = st.getMode() << 16;
		}}}
	}
	return true
}

func close override
{
	lang "cs" {{{
		archive.Dispose();
	}}}
}
