
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log

class:

prop ctx as LoggingContext

func compressZip(src as dynamic, output as dynamic) as File
{
	var srcfile = File.asValueOrThrowError(src)
	var outputfile = File.asValueOrNull(output)
	if not outputfile:
		outputfile = srcfile.getSibling(srcfile.getBasename() .. ".zip")
	Log.status(ctx, "Compressing files ..")
	if not ZipWriter.writeToZipRecursive(ctx, outputfile, srcfile, true):
		Error.throw("failedToWrite", outputfile.getPath())
	Log.status(ctx, null)
	return outputfile
}

func compressTarball(src as dynamic, output as dynamic) as File
{
	var srcfile = File.asValueOrThrowError(src)
	var outputfile = File.asValueOrNull(output)
	if not outputfile:
		outputfile = srcfile.getSibling(srcfile.getBasename() .. ".tar.gz")
	Log.status(ctx, "Compressing files ..")
	if not TarGZipWriter.writeToTarballRecursive(ctx, outputfile, srcfile, true):
		Error.throw("failedToWrite", outputfile.getPath())
	Log.status(ctx, null)
	return outputfile
}
