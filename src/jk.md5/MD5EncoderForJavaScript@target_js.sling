
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func encode(buffer as buffer) static as string:
	return md5(String.forUTF8Buffer(buffer))

func md5(o as string) static private as string
{
	if o == null:
		return null
	var x = getWordArray(o)
	var a = 0x67452301
	var b = 0xEFCDAB89
	var c = 0x98BADCFE
	var d = 0x10325476
	var s11 = 7u
	var s12 = 12u
	var s13 = 17u
	var s14 = 22u
	var s21 = 5u
	var s22 = 9u
	var s23 = 14u
	var s24 = 20u
	var s31 = 4u
	var s32 = 11u
	var s33 = 16u
	var s34 = 23u
	var s41 = 6u
	var s42 = 10u
	var s43 = 15u
	var s44 = 21u
	var k as int
	var aa as uint
	var bb as uint
	var cc as uint
	var dd as uint
	for(k = 0; k < sizeof x; k +=16) {
		aa = a
		bb = b
		cc = c
		dd = d
		a = ff(a, b, c, d, (x[k+0]), s11, 0xD76AA478)
		d = ff(d, a, b, c, (x[k+1]), s12, 0xE8C7B756)
		c = ff(c, d, a, b, (x[k+2]), s13, 0x242070DB)
		b = ff(b, c, d, a, (x[k+3]), s14, 0xC1BDCEEE)
		a = ff(a, b, c, d, (x[k+4]), s11, 0xF57C0FAF)
		d = ff(d, a, b, c, (x[k+5]), s12, 0x4787C62A)
		c = ff(c, d, a, b, (x[k+6]), s13, 0xA8304613)
		b = ff(b, c, d, a, (x[k+7]), s14, 0xFD469501)
		a = ff(a, b, c, d, (x[k+8]), s11, 0x698098D8)
		d = ff(d, a, b, c, (x[k+9]), s12, 0x8B44F7AF)
		c = ff(c, d, a, b, (x[k+10]), s13, 0xFFFF5BB1)
		b = ff(b, c, d, a, (x[k+11]), s14, 0x895CD7BE)
		a = ff(a, b, c, d, (x[k+12]), s11, 0x6B901122)
		d = ff(d, a, b, c, (x[k+13]), s12, 0xfD987193)
		c = ff(c, d, a, b, (x[k+14]), s13, 0xA679438E)
		b = ff(b, c, d, a, (x[k+15]), s14, 0x49B40821)
		a = gg(a, b, c, d, (x[k+1]), s21, 0xF61E2562)
		d = gg(d, a, b, c, (x[k+6]), s22, 0xC040B340)
		c = gg(c, d, a, b, (x[k+11]), s23, 0x265E5A51)
		b = gg(b, c, d, a, (x[k+0]), s24, 0xE9B6C7AA)
		a = gg(a, b, c, d, (x[k+5]), s21, 0xD62F105D)
		d = gg(d, a, b, c, (x[k+10]), s22, 0x2441453)
		c = gg(c, d, a, b, (x[k+15]), s23, 0xD8A1E681)
		b = gg(b, c, d, a, (x[k+4]), s24, 0xE7D3FBC8)
		a = gg(a, b, c, d, (x[k+9]), s21, 0x21E1CDE6)
		d = gg(d, a, b, c, (x[k+14]), s22, 0xC33707D6)
		c = gg(c, d, a, b, (x[k+3]), s23, 0xF4D50D87)
		b = gg(b, c, d, a, (x[k+8]), s24, 0x455A14ED)
		a = gg(a, b, c, d, (x[k+13]), s21, 0xA9E3E905)
		d = gg(d, a, b, c, (x[k+2]), s22, 0xFCEFA3F8)
		c = gg(c, d, a, b, (x[k+7]), s23, 0x676F02D9)
		b = gg(b, c, d, a, (x[k+12]), s24, 0x8D2A4C8A)
		a = hh(a, b, c, d, (x[k+5]), s31, 0xFFFA3942)
		d = hh(d, a, b, c, (x[k+8]), s32, 0x8771F681)
		c = hh(c, d, a, b, (x[k+11]), s33, 0x6D9D6122)
		b = hh(b, c, d, a, (x[k+14]), s34, 0xFDE5380C)
		a = hh(a, b, c, d, (x[k+1]), s31, 0xA4BEEA44)
		d = hh(d, a, b, c, (x[k+4]), s32, 0x4BDECFA9)
		c = hh(c, d, a, b, (x[k+7]), s33, 0xF6BB4B60)
		b = hh(b, c, d, a, (x[k+10]), s34, 0xBEBFBC70)
		a = hh(a, b, c, d, (x[k+13]), s31, 0x289B7EC6)
		d = hh(d, a, b, c, (x[k+0]), s32, 0xEAA127FA)
		c = hh(c, d, a, b, (x[k+3]), s33, 0xD4EF3085)
		b = hh(b, c, d, a, (x[k+6]), s34, 0x4881D05)
		a = hh(a, b, c, d, (x[k+9]), s31, 0xD9D4D039)
		d = hh(d, a, b, c, (x[k+12]), s32, 0xE6DB99E5)
		c = hh(c, d, a, b, (x[k+15]), s33, 0x1FA27CF8)
		b = hh(b, c, d, a, (x[k+2]), s34, 0xC4AC5665)
		a = ii(a, b, c, d, (x[k+0]), s41, 0xF4292244)
		d = ii(d, a, b, c, (x[k+7]), s42, 0x432AFF97)
		c = ii(c, d, a, b, (x[k+14]), s43, 0xAB9423A7)
		b = ii(b, c, d, a, (x[k+5]), s44, 0xFC93A039)
		a = ii(a, b, c, d, (x[k+12]), s41, 0x655B59C3)
		d = ii(d, a, b, c, (x[k+3]), s42, 0x8F0CCC92)
		c = ii(c, d, a, b, (x[k+10]), s43, 0xFFEFF47D)
		b = ii(b, c, d, a, (x[k+1]), s44, 0x85845DD1)
		a = ii(a, b, c, d, (x[k+8]), s41, 0x6FA87E4F)
		d = ii(d, a, b, c, (x[k+15]), s42, 0xFE2CE6E0)
		c = ii(c, d, a, b, (x[k+6]), s43, 0xA3014314)
		b = ii(b, c, d, a, (x[k+13]), s44, 0x4E0811A1)
		a = ii(a, b, c, d, (x[k+4]), s41, 0xF7537E82)
		d = ii(d, a, b, c, (x[k+11]), s42, 0xBD3AF235)
		c = ii(c, d, a, b, (x[k+2]), s43, 0x2AD7D2BB)
		b = ii(b, c, d, a, (x[k+9]), s44, 0xEB86D391)
		a = addUnsigned(a, aa)
		b = addUnsigned(b, bb)
		c = addUnsigned(c, cc)
		d = addUnsigned(d, dd)
	}
	var temp = toStringHex(a) .. toStringHex(b) .. toStringHex(c) .. toStringHex(d)
	return String.toLowerCase(temp)
}

func getWordArray(str as string) static private as array<uint>
{
	var strlength = String.getLength(str)
	var n = ((strlength + 8) - ((strlength + 8) % 64)) / 64
	var numWords = (n + 1) * 16
	var array = new uint[numWords - 1]
	var wordCount as int
	var byteCount as int
	var bytePos as int
	while byteCount < strlength {
		wordCount = (byteCount - (byteCount % 4)) / 4
		bytePos = (byteCount % 4) * 8
		var temps = 0u
		var o = array[wordCount]
		if o:
			temps = o
		var xs = temps | (String.getChar(str, byteCount) << bytePos)
		array[wordCount] = xs
		byteCount++
	}
	wordCount = (byteCount - (byteCount % 4)) / 4
	bytePos = (byteCount % 4) * 8
	var xx = 0u
	var xxo = array[wordCount]
	if xxo:
		xx = xxo
	var vs = xx | (0x80 << bytePos) //padding
	array[wordCount] = vs
	array[numWords - 2] = (strlength as uint) << 3
	var r as uint
	lang "js" {{{
		r = strlength >>> 29;
	}}}
	array[numWords - 1] = r
	return array
}

func rotateLeft(val as uint, bits as uint) static private as uint
{
	var vr as uint
	lang "js" {{{
		vr = (val << bits) | (val >>> (32 - bits));
	}}}
	return vr
}

func addUnsigned(x as uint, y as uint) static private as uint
{
	var x4 = (x & 0x40000000)
	var y4 = (y & 0x40000000)
	var x8 = (x & 0x80000000)
	var y8 = (y & 0x80000000)
	var result = (x & 0x3FFFFFFF) + (y & 0x3FFFFFFF)
	if x4 & y4:
		return result ^ 0x80000000 ^ x8 ^ y8
	if x4 | y4 {
		if result & 0x40000000 {
			return result ^ 0xC0000000 ^ x8 ^ y8
		}
		else {
			return result ^ 0x40000000 ^ x8 ^ y8
		}
	}
	else {
		return result ^ x8 ^y8
	}
	return 0u
}

func f(x as uint, y as uint, z as uint) static private as uint
{
	var w = ~ x
	var v = (x & y) | (w & z)
	return v
}

func g(x as uint, y as uint, z as uint) static private as uint
{
	var w = ~ z
	var v = (x & z) | (y & w)
	return v
}

func h(x as uint, y as uint, z as uint) static private as uint
{
	return x ^ y ^ z
}

func i(x as uint, y as uint, z as uint) static private as uint
{
	var w = ~ z
	return y ^ (x | w)
}

func ff(a as uint, b as uint, c as uint, d as uint, o as uint, s as uint, ac as uint) static private as uint
{
	var x = 0u
	if o != 0:
		x = o
	var v = addUnsigned(a, addUnsigned(addUnsigned(f(b, c, d),x),ac))
	return addUnsigned(rotateLeft(v, s), b)
}

func gg(a as uint, b as uint, c as uint, d as uint, o as uint, s as uint, ac as uint) static private as uint
{
	var x as uint
	if o != 0:
		x = o
	var v = addUnsigned(a, addUnsigned(addUnsigned(g(b, c, d), x), ac))
	return addUnsigned(rotateLeft(v, s), b)
}

func hh(a as uint, b as uint, c as uint, d as uint, o as uint, s as uint, ac as uint) static private as uint
{
	var x as uint
	if o != 0:
		x = o
	var v = addUnsigned(a, addUnsigned(addUnsigned(h(b, c, d), x), ac))
	return addUnsigned(rotateLeft(v, s), b)
}

func ii(a as uint, b as uint, c as uint, d as uint, o as uint, s as uint, ac as uint) static private as uint
{
	var x as uint
	if o != 0:
		x = o
	var v = addUnsigned(a, addUnsigned(addUnsigned(i(b, c, d), x), ac))
	return addUnsigned(rotateLeft(v, s), b)
}

func toStringHex(val as uint) static private as string
{
	var result = ""
	var count as int
	var byte as int
	for(count = 0; count <= 3; count++) {
		var v as int
		lang "js" {{{
			v = val >>> (count * 8);
		}}}
		byte = v & 255
		result = String.appendString(result, String.forIntegerHex(byte, 2))
	}
	return result
}
