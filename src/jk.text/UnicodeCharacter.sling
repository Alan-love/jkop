
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

module:

IFDEF "target_js"
{
	var regExps as DynamicMap?

	func getRegExp(str as string) as dynamic
	{
		if regExps {
			var v = regExps.getDynamicOrNull(str)
			if v:
				return v
		}
		var r = lang "js" as dynamic {{{ new RegExp(str, "u") }}}
		if not regExps:
			regExps = new DynamicMap()
		regExps.setDynamic(str, r)
		return r
	}
}

func isUppercaseLetter(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Lu}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isLowercaseLetter(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Ll}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isTitlecaseLetter(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Lt}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isModifierLetter(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Lm}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isOtherLetter(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Lo}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isLetterNumber(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Nl}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isNonSpacingMark(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Mn}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isSpacingCombiningMark(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Mc}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isDecimalDigitNumber(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Nd}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func isConnectorPunctuation(c as char) as bool
{
	IFDEF "target_js" {
		var x = getRegExp("\p{Pc}")
		return lang "js" (x, c) as bool {{{ x.test(String.fromCharCode(c)) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}
