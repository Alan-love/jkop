
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

prop src as RGBAPixelIntegerBuffer
prop rangew as int
prop rangeh as int

var cache as buffer?

func forRgbaPixels(src as RGBAPixelIntegerBuffer, w as int, h as int) static as this:
	return new this() {
		src src
		rangew w
		rangeh h
	}

func getStride as int:
	return rangew * 4

func getBufferRegion(x as int, y as int, newbuffer as bool = false) throws Exception as buffer
{
	var v as buffer?
	if newbuffer == false {
		if cache == null:
			cache = Buffer.allocate(rangew * rangeh * 4)
		v = cache
	}
	if not v:
		v = Buffer.allocate(rangew * rangeh * 4)
	var i as int
	var j as int
	for(i = 0 ; i < rangeh ; i++) {
		for(j = 0 ; j < rangew ; j++) {
			var pix = src.getRgbaPixel(x + j, y + i)
			Buffer.setByte(v, (i * rangew + j) * 4 + 0, pix[0] as! uint8)
			Buffer.setByte(v, (i * rangew + j) * 4 + 1, pix[1] as! uint8)
			Buffer.setByte(v, (i * rangew + j) * 4 + 2, pix[2] as! uint8)
			Buffer.setByte(v, (i * rangew + j) * 4 + 3, pix[3] as! uint8)
		}
	}
	return v
}
