
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class abstract:

model ResponseList public
{
	resources as Resource[]
	headers as DynamicMap
	hasMoreResults as bool
}

model Response public
{
	id as string
	resource as Resource
	headers as DynamicMap
	statusCode as int
}

model Resource public
{
	id as string
	indexingPolicy as IndexingPolicy
	partitionKey as PartitionKey
	uniqueKeyPolicy as UniqueKeyPolicy
	conflictResolutionPolicy as ConflictResolutionPolicy
	geospatialConfig as GeospatialConfig
}

model IndexingPolicy public
{
	indexingMode as string
	automatic as bool
	includedPaths as Path[]
	excludedPaths as Path[]
}

model PartitionKey public
{
	paths as string[]
	kind as string
	version as int
}

model UniqueKeyPolicy public
{
	uniqueKeys as DynamicVector
}

model ConflictResolutionPolicy public
{
	mode as string
	conflictResolutionPath as string
	conflictResolutionProcedure as string
}

model GeospatialConfig public
{
	type as string
}

model Path public
{
	path as string
}

model ItemList public
{
	resources as DynamicVector
	headers as DynamicMap
	hasMoreResults as bool
}

model Item public
{
	resource as DynamicMap
	headers as DynamicMap
	statusCode as int
}

func forEndpoint(ctx as LoggingContext, endpoint as string, key as string) static throws Exception as this
{
	IFDEF "target_node_js" {
		var v = new CosmosDBClientForNodeJS() {
			ctx ctx
		}
		v.initialize(endpoint, key)
		return v
	}
	ELSE {
		nop ctx
		nop endpoint
		nop key
		IFDEF "target_gui" {
			ERROR NOT_SUPPORTED
		}
		ELSE {
			ERROR NOT_IMPLEMENTED
		}
	}
}

prop ctx as LoggingContext

func initialize(endpoint as string, key as string) abstract throws Exception
func createDatabase(databaseName as string) abstract async throws Exception
func getAllDatabases abstract async throws Exception as ResponseList
func getDatabaseById(databaseId as string) abstract async throws Exception as Response
func deleteDatabaseById(databaseId as string) abstract async throws Exception
func createContainer(databaseId as string, containerId as string) abstract async throws Exception
func getAllContainers(databaseId as string) abstract async throws Exception as ResponseList
func getContainerById(databaseId as string, containerId as string) abstract async throws Exception as Response
func deleteContainer(databaseId as string, containerId as string) abstract async throws Exception
func addItem(databaseId as string, containerId as string, item as DynamicMap) abstract async throws Exception
func getAllItems(databaseId as string, containerId as string) abstract async throws Exception as ItemList
func getItemById(databaseId as string, containerId as string, itemId as string) abstract async throws Exception as Item
func updateItem(databaseId as string, containerId as string, item as DynamicMap) abstract async throws Exception
func deleteItemById(databaseId as string, containerId as string, itemId as string) abstract async throws Exception
