
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.math

class:

description [[
	Random number generator functionality.
]]

IFDEF "target_dotnet_cs"
{
	lang "cs" {{{
		System.Random random;
	}}}
}

IFDEF "target_java"
{
	lang "java" {{{
		java.util.Random random;
	}}}
}

IFDEF "target_sushi"
{
	var random as object?

	import jk.time

	func getSushiRandom as object
	{
		if not random:
			setSeed(SystemClock.asUTCSeconds())
		return random
	}
}

IFDEF "target_objc"
{
	depend "objc-header-m:<stdlib.h>"
}

var instance static as this?

func getSharedInstance static as this
{
	description [[
		Gets a common, shared instance of a random number generator.
	]]
	if not instance:
		instance = new this()
	return instance
}

ctor
{
	description [[
		Creates a new random number generator.
	]]
	IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			random = new System.Random();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			random = new java.util.Random();
		}}}
	}
}

func setSeed(seed as int)
{
	description [[
		Initializes the random number generator with the given seed, if applicable. Note
		that the exact behavior is platform dependent: Not all platforms require nor
		utilize a seed at all.
	]]
	IFDEF "target_dotnet_cs" {
		lang "cs" (seed) {{{
			random = new System.Random((System.Int32)seed);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (seed) {{{
			random.setSeed(seed);
		}}}
	}
	ELSE IFDEF "target_sushi" {
		random = lang "lua" (seed) as object {{{ _util:create_random_number_generator(seed) }}}
	}
	ELSE {
		nop seed
	}
}

func nextBoolean as bool
{
	description [[
		Used to retrieve a random boolean value (true or false)
	]]
	IFDEF "target_swift" {
		return lang "swift" as bool {{{ Bool.random() }}}
	}
	ELSE {
		if nextInteger() % 2 == 0:
			return false
		return true
	}
}

func nextInteger as int
{
	description [[
		Used to retrieve random integer values between -2147483647 (inclusive) and
		2147483648 (exclusive).
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" as int {{{ random.Next() }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" as int {{{ random.nextInt() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" as int {{{ Math.floor(Math.random() * (2147483648 + 2147483647) - 2147483647) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" as int {{{ -2147483647 + arc4random_uniform(2147483648 + 2147483647) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" as int {{{ kotlin.random.Random.nextInt() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" as int {{{ Int.random(in : Int.min ..< Int.max) }}}
	}
	ELSE IFDEF "target_sushi" {
		var random = getSushiRandom()
		return lang "lua" as int {{{ _util:create_random_number(random) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func nextIntegerWithMaximum(n as int) as int
{
	description [[
		Used to retrieve integer values from 0 (inclusive) and "n" (exclusive)
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (n) as int {{{ random.Next(n) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (random, n) as int {{{ random.nextInt(n) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (n) as int {{{ Math.floor((Math.random() * n) + 1) }}}
	}
	ELSE IFDEF "target_objc" {
		return nextIntegerBetween(0, n)
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (n) as int {{{ kotlin.random.Random.nextInt(n) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (n) as int {{{ Int.random(in : 0 ..< n) }}}
	}
	ELSE {
		return nextInteger() % n
	}
}

func nextIntegerBetween(s as int, e as int) as int
{
	description [[
		Used to retrieve integer values between "s" (inclusive) and "e" (exclusive)
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (s, e) as int {{{ random.Next(s, e) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (random, s, e) as int {{{ random.nextInt(e - s + 1) + s }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (s, e) as int {{{ Math.floor(Math.random() * (e - s) + s) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (s, e) as int {{{ s + arc4random_uniform(e-s) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (s, e) as int {{{ kotlin.random.Random.nextInt(e - s + 1) + s }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (s, e) as int {{{ Int.random(in : s ..< e) }}}
	}
	ELSE {
		return s + nextInteger() % (e - s)
	}
}

func nextBytes(buf as array<int8>)
{
	description [[
		Used to retrieve an array of random bytes.
	]]
	// FIXME: This should be buf as buffer
	IFDEF "target_dotnet_cs" {
		lang "cs" (buf) {{{
			random.NextBytes((byte[])(System.Array)buf);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (buf) {{{
			random.nextBytes(buf);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (buf) {{{
			var buff = buf
			var random = java.security.SecureRandom()
			random.nextBytes(buff)
		}}}
	}
	ELSE {
		var sz = sizeof buf
		for(var n = 0 ; n < sz ; n++):
			buf[n] = nextIntegerBetween(-127, 128) as! int8
	}
}

func nextDouble as double
{
	description [[
		Used to retrieve a random double-precision floating point number with value
		between 0.0 (inclusive) and 1.0 (exclusive).
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" as double {{{ random.NextDouble() }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" as double {{{ random.nextDouble() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" as double {{{ Math.random() }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" as double {{{ kotlin.random.Random.nextDouble() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" as double {{{ Swift.Double.random(in : Swift.Double.leastNormalMagnitude ..< Swift.Double.greatestFiniteMagnitude) }}}
	}
	ELSE {
		var n = nextIntegerWithMaximum(2147483647) as! double
		return n / 2147483647.0
	}
}

func nextFloat as float
{
	description [[
		Used to retrieve a random single-precision floating point number with value
		between 0.0 (inclusive) and 1.0 (exclusive).
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" as float {{{ (float)random.NextDouble() }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" as float {{{ random.nextFloat() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" as float {{{ Math.random().toFixed(8) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" as float {{{ kotlin.random.Random.nextFloat() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" as float {{{ Swift.Float.random(in : Swift.Float.leastNormalMagnitude  ..< Swift.Float.greatestFiniteMagnitude) }}}
	}
	ELSE {
		var n = nextIntegerWithMaximum(2147483647) as! float
		return n / (2147483647 as! float)
	}
}
