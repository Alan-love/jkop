
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.socket
import jk.socket.ssl
import jk.io
import jk.dns
import jk.url
import jk.base64
import jk.thread

class:

prop ctx as LoggingContext

func connect(server as string, port as int) private throws Exception as TCPSocket?
{
	if String.isEmpty(server) || port < 1:
		return null
	var address = server
	var dns = DNSResolver.instance(ctx)
	var resolvedAddress = dns.getIPAddress(server)
	if String.isEmpty(resolvedAddress) {
		Log.error(ctx, "SMTPClient: Could not resolve SMTP server address: `" .. server .. "'")
		return null
	}
	address = resolvedAddress
	Log.debug(ctx, "SMTPClient: Connecting to SMTP server `" .. address .. ":" .. String.forInteger(port) .. "' ..")
	var v = TCPSocket.createAndConnect(address, port)
	Log.debug(ctx, "SMTPClient: Connected to SMTP server `" .. address .. ":" .. String.forInteger(port) .. "' ..")
	return v
}

func writeLine(ops as PrintWriter, str as string?) private as bool
{
	try {
		ops.print(String.asValueOrEmptyString(str) .. "\r\n")
	}
	catch {
		return false
	}
	return true
}

func communicate(ins as PrintReader, expectCode as string) private as string?
{
	var sb = new StringBuilder()
	var line = ins.readLine()
	if String.isNotEmpty(line):
		sb.appendString(line)
	while String.isNotEmpty(line) && String.getChar(line, 3) == '-' {
		line = ins.readLine()
		if String.isNotEmpty(line):
			sb.appendString(line)
	}
	if String.isNotEmpty(line) && String.getChar(line, 3) == ' ' {
		if String.isEmpty(expectCode):
			return null
		var rc = String.getSubString(line, 0, 3)
		foreach cc in String.split(expectCode, '|') {
			if String.equals(cc, rc):
				return null
		}
	}
	var v = sb.toString()
	if String.isEmpty(v):
		v = "XXX Unknown SMTP server error response"
	Log.error(ctx, "SMTPClient: Server responded with error status: `" .. v .. "'")
	return v
}

func encode(enc as string) private as string?
{
	if String.isEmpty(enc):
		return null
	return Base64Encoder.encode(String.toUTF8Buffer(enc))
}

func rcptAsEmailAddress(ss as string) private as string
{
	if String.isEmpty(ss):
		return ss
	var b = String.getIndexOfCharacter(ss, '<')
	if b < 0:
		return ss
	var e = String.getIndexOfCharacter(ss, '>')
	if e < 0:
		return ss
	return String.getSubString(ss, b + 1, e - b - 1)
}

func resolveMXServerForDomain(domain as string) private as string?
{
	var dns = DNSResolver.instance(ctx)
	var rcs = dns.getNSRecords(domain, "MX")
	if rcs == null || rcs.getSize() < 1:
		return null
	var v as string?
	var pr as int
	foreach mx as DNSRecordMX in rcs.toVector() {
		var p = mx.getPriority()
		if v == null || p < pr {
			pr = p
			v = mx.getAddress()
		}
	}
	return v
}

func executeTransaction(msg as SMTPMessage, server as URL, rcpts as DynamicVector?, senderDomain as string, acceptInvalidCertificate as bool) private throws Exception as SMTPClientTransactionResult
{
	var url = server
	var socket as ConnectedSocket? = null
	var scheme = url.getScheme()
	var host = url.getHost()
	if String.isEmpty(host):
		return SMTPClientTransactionResult.forError("Empty server hostname")
	var port = url.getPortInt()
	for(var n = 0 ; n < 3 ; n++) {
		if String.equals("smtp", scheme) || String.equals("smtp+tls", scheme) {
			if port < 1:
				port = 25
			socket = connect(host, port)
		}
		else if String.equals("smtp+ssl", scheme) {
			if port < 1:
				port = 465
			var ts = connect(host, port)
			if ts:
				socket = SSLSocket.forClient(ctx, ts, host, acceptInvalidCertificate)
		}
		else {
			return SMTPClientTransactionResult.forError("SMTPClient: Unknown SMTP URI scheme `" .. scheme .. "'")
		}
		if socket:
			break
		Log.debug(ctx, "Failed to connect to SMTP server `" .. host .. ":" .. String.forInteger(port) .. "'. Waiting to retry ..")
		CurrentThread.sleepSeconds(1)
	}
	if socket == null:
		return SMTPClientTransactionResult.forError("Unable to connect to SMTP server `" .. host .. ":" .. String.forInteger(port) .. "'")
	var ops = PrintWriterWrapper.forWriter(socket)
	var ins = PrintReader.forReader(socket)
	if var err = communicate(ins, "220"):
		return SMTPClientTransactionResult.forError(err)
	var sd = senderDomain
	if String.isEmpty(sd):
		return SMTPClientTransactionResult.forError("Sender Domain is empty")
	if writeLine(ops, "EHLO " .. sd) == false:
		return SMTPClientTransactionResult.forNetworkError()
	if var err = communicate(ins, "250"):
		return SMTPClientTransactionResult.forError(err)
	if String.equals("smtp+tls", scheme) {
		if writeLine(ops, "STARTTLS") == false:
			return SMTPClientTransactionResult.forNetworkError()
		if var err = communicate(ins, "220"):
			return SMTPClientTransactionResult.forError(err)
		socket = SSLSocket.forClient(ctx, socket, host, acceptInvalidCertificate)
		ops = PrintWriterWrapper.forWriter(socket)
		ins = PrintReader.forReader(socket)
		if writeLine(ops, "EHLO " .. sd) == false:
			return SMTPClientTransactionResult.forNetworkError()
		if var err = communicate(ins, "250"):
			return SMTPClientTransactionResult.forError(err)
	}
	var username = url.getUsername()
	var password = url.getPassword()
	if String.isNotEmpty(username) {
		if writeLine(ops, "AUTH login") == false:
			return SMTPClientTransactionResult.forNetworkError()
		if var err = communicate(ins, "334"):
			return SMTPClientTransactionResult.forError(err)
		if writeLine(ops, encode(username)) == false:
			return SMTPClientTransactionResult.forNetworkError()
		if var err = communicate(ins, "334"):
			return SMTPClientTransactionResult.forError(err)
		if writeLine(ops, encode(password ?? "")) == false:
			return SMTPClientTransactionResult.forNetworkError()
		if var err = communicate(ins, "235|530"):
			return SMTPClientTransactionResult.forError(err)
	}
	if writeLine(ops, "MAIL FROM:<" .. msg.getMyAddress() .. ">") == false:
		return SMTPClientTransactionResult.forNetworkError()
	if var err = communicate(ins, "250"):
		return SMTPClientTransactionResult.forError(err)
	if rcpts: foreach rcpt as string in rcpts.toVector() {
		if writeLine(ops, "RCPT TO:<" .. rcptAsEmailAddress(rcpt) .. ">") == false:
			return SMTPClientTransactionResult.forNetworkError()
		if var err = communicate(ins, "250"):
			return SMTPClientTransactionResult.forError(err)
	}
	if writeLine(ops, "DATA") == false:
		return SMTPClientTransactionResult.forNetworkError()
	if var err = communicate(ins, "354"):
		return SMTPClientTransactionResult.forError(err)
	if String.isEmpty(msg.getMessageID()):
		msg.generateMessageID(sd)
	var bod = msg.getMessageBody()
	Log.debug(ctx, "Sending message body: `" .. bod .. "'")
	try {
		ops.print(bod)
	}
	catch {
		return SMTPClientTransactionResult.forNetworkError()
	}
	try {
		ops.print("\r\n.\r\n")
	}
	catch {
		return SMTPClientTransactionResult.forNetworkError()
	}
	if var err = communicate(ins, "250"):
		return SMTPClientTransactionResult.forError(err)
	if writeLine(ops, "QUIT") == false:
		return SMTPClientTransactionResult.forNetworkError()
	return SMTPClientTransactionResult.forSuccess()
}

func sendMessage(msg as SMTPMessage, senderDomain as string, server as URL?, acceptInvalidCertificate as bool = false) throws Exception as SMTPClientResult
{
	var rcpts = msg.getAllRcpts()
	if server {
		// simple case. single server transaction with a supplied address.
		var t = executeTransaction(msg, server, rcpts, senderDomain, acceptInvalidCertificate)
		t.setServer(server.getHost())
		t.setRecipients(rcpts)
		return SMTPClientResult.forMessage(msg).addTransaction(t)
	}
	var r = SMTPClientResult.forMessage(msg)
	var servers = new DynamicMap()
	foreach rcpt as string in rcpts.toVector() {
		var em = rcptAsEmailAddress(rcpt)
		if String.isEmpty(em) {
			r.addTransaction(SMTPClientTransactionResult.forError("Invalid recipient address: `" .. rcpt .. "'"))
			break
		}
		var at = String.getIndexOfCharacter(em, '@')
		if at < 0 {
			r.addTransaction(SMTPClientTransactionResult.forError("Invalid recipient address: `" .. rcpt .. "'"))
			break
		}
		var sa = String.getEndOfString(em, at + 1)
		if String.isEmpty(sa) {
			r.addTransaction(SMTPClientTransactionResult.forError("Invalid recipient address: `" .. rcpt .. "'"))
			break
		}
		var ss = servers.get(sa) as DynamicVector
		if ss == null {
			ss = new DynamicVector()
			servers.setObject(sa, ss)
		}
		ss.appendString(rcpt)
	}
	foreach domain in servers.iterateKeys() {
		var ds = resolveMXServerForDomain(domain)
		if String.isEmpty(ds) {
			r.addTransaction(SMTPClientTransactionResult.forError("Unable to determine mail server for `" .. domain .. "'"))
		}
		else {
			Log.debug(ctx, "SMTP server for domain `" .. domain .. "': `" .. ds .. "'")
			var trcpts = servers.get(domain) as DynamicVector
			var t = executeTransaction(msg, URL.forString("smtp://" .. ds), trcpts, senderDomain, acceptInvalidCertificate)
			t.setDomain(domain)
			t.setServer(ds)
			t.setRecipients(trcpts)
			r.addTransaction(t)
		}
	}
	var vt = r.getTransactions()
	if vt == null || vt.getSize() < 1:
		r.addTransaction(SMTPClientTransactionResult.forError("Unknown error in SMTPClient"))
	return r
}
