
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.app
import jk.thread
import [magical:AVFoundation]

class is AudioManager:

class MyAudioClip is AudioClip is Runnable
{
	pvar clipId as string?

	func run implement throws Exception
	{
		lang "swift" {{{
			let pp = Bundle.main.url(forResource: clipId, withExtension:"mp3")
			var avap : AVAudioPlayer? = nil
			do {
				avap = try AVAudioPlayer(contentsOf: pp!)
			}
			catch {
				print("Error in AudioPlayer: " + error.localizedDescription)
			}
			avap!.play()
			Thread.sleep(forTimeInterval: avap!.duration)
			avap!.stop()
		}}}
	}

	func play implement as bool
	{
		Thread.start(this)
		return true
	}
}

class MyAudioStream is AudioStream
{
	pvar context as GuiApplicationContextForIosSwift?

	var avap as [magical:AVAudioPlayer]?

	func initialize(path as string) as bool
	{
		var pp as [magical:URL]? #mutated
		if String.startsWith(path, "/") {
			lang "swift" (pp) {{{
				pp = URL(string: path!)
			}}}
		}
		else {
			lang "swift" (pp) {{{
				pp = Bundle.main.url(forResource: path, withExtension:"mp3")
			}}}
		}
		lang "swift" (pp) {{{
			var avap : AVAudioPlayer? = nil
			do {
				avap = try AVAudioPlayer(contentsOf: pp!)
			}
			catch {
				print("Error in AudioPlayer: " + error.localizedDescription)
			}
		}}}
		assert avap:
			Log.error(context, "Failed to initialize audio player for `" .. path .. "'")
		lang "swift" {{{
			avap!.prepareToPlay()
		}}}
		Log.debug(context, "Initialized audio player for `" .. path .. "'")
		return true
	}

	func play implement as bool
	{
		assert avap
		lang "swift" {{{
			avap.play()
		}}}
		return true
	}

	func pause implement as bool
	{
		assert avap
		lang "swift" {{{
			avap.pause()
		}}}
		return true
	}

	func stop implement as bool
	{
		assert avap
		lang "swift" {{{
			avap.stop()
		}}}
		return true
	}

	func seek(sec as int) implement as bool
	{
		assert avap
		lang "swift" (sec) {{{
			avap.currentTime = TimeInterval(sec)
		}}}
		return true
	}

	func getCurrentTime implement as int
	{
		assert avap
		return lang "swift" as int {{{ Int(avap.currentTime) }}}
	}

	func getDuration implement as int
	{
		assert avap
		return lang "swift" as int {{{ Int(avap.duration) }}}
	}

	func setLooping(v as bool) implement as bool
	{
		assert avap
		if v {
			lang "swift" {{{
				avap.numberOfLoops = -1
			}}}
		}
		else {
			lang "swift" {{{
				avap.numberOfLoops = 0
			}}}
		}
		return true
	}

	func setVolume(v as double) implement as bool
	{
		assert avap
		lang "swift" (v) {{{
			avap.volume = Float(v)
		}}}
		return true
	}
}

func forApplicationContext(context as ApplicationContext) static throws Exception as this
{
	var ctx = context as GuiApplicationContextForIosSwift
	if not ctx:
		Error.throw("unsupportedApplicationContext", context)
	var v = new this()
	v.setContext(ctx)
	return v
}

pvar context as GuiApplicationContextForIosSwift?

func getClipForResource(id as string) override as AudioClip?
{
	var v = new MyAudioClip()
	v.setClipId(id)
	return v
}

func getStreamForResource(id as string) override as AudioStream?
{
	var v = new MyAudioStream()
	v.setContext(context)
	assert v.initialize(id)
	return v
}
