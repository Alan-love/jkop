
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import [magical:UIKit]
import [magical:SpriteKit]

class extends [magical:UIViewController]:

func forScene(scene as Scene, context as GuiApplicationContextForIosSwift) static as this
{
	var v = new this()
	v.setContext(context)
	v.initialize(scene)
	return v
}

pvar context as GuiApplicationContextForIosSwift?

var backend as BackendForIosSwift?
var scene as Scene?
var skView as [magical:SKView]?

ctor:
	lang "swift" {{{
		super.init(nibName: nil, bundle: nil)
	}}}

lang "swift" {{{
	public required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
	}
}}}

func initialize(scene as Scene):
	this.scene = scene

func loadView override #magical
{
	skView = lang "swift" as [magical:SKView] {{{ SKView() }}}
	lang "swift" {{{
		self.view = skView
	}}}
	backend = new BackendForIosSwift()
	if scene {
		try {
			backend.initialize(context, skView, scene, false)
		}
	}
}

func viewDidAppear(animated as bool) override #magical:
	lang "swift" {{{
		super.viewDidAppear(animated)
	}}}

func applicationWillTerminate(application as [magical:UIApplication]) override #magical
{
	if backend:
		backend.cleanup()
}

func applicationDidBecomeActive(application as [magical:UIApplication]) override #magical
{
	if backend:
		backend.start()
}

func applicationWillResignActive(application as [magical:UIApplication]) override #magical
{
	if backend:
		backend.stop()
}

func application(application as [magical:UIApplication], userInfo label didReceiveRemoteNotification as [magical:@[[AnyHashable : Any\]]]) override #magical:
	nop

func applicationWithCompletionHandler(application as [magical:UIApplication], userInfo label didReceiveRemoteNotification as [magical:@[[AnyHashable : Any\]]], completionHandler label fetchCompletionHandler as [magical:@[@escaping (UIBackgroundFetchResult) -> Void]]) override #magical:
	nop

func applicationWithLaunchOptions(application as [magical:UIApplication], launchOptions label willFinishLaunchingWithOptions as [magical:@[[UIApplication.LaunchOptionsKey : Any\]]]? = null) override as bool #magical:
	return true

func applicationDidEnterBackground(application as [magical:UIApplication]) override #magical:
	nop

func applicationWillEnterForeground(application as [magical:UIApplication]) override #magical:
	nop
