
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json

class abstract:

func instance static as WebClient
{
	IFDEF "target_android" {
		return new WebClientForAndroid()
	}
	ELSE IFDEF "target_std_java" {
		return new WebClientForStdJava()
	}
	ELSE IFDEF "target_node_js" {
		return new WebClientForNodeJS()
	}
	ELSE IFDEF "target_browser_js" {
		return new WebClientForBrowserJS()
	}
	ELSE IFDEF "target_ios_objc" {
		return new WebClientForIOS()
	}
	ELSE IFDEF "target_swift" {
		return new WebClientForSwift()
	}
	ELSE IFDEF "target_dotnet_cs" {
		// FIXME: Should also provide the asynchronous version that can be
		// used in GUI (?) environments.
		return new WebClientForDotnetCSSync()
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

class Response public
{
	prop statusCode as string
	prop statusMessage as string
	prop headers as KeyValueListForStrings
	prop body as buffer

	var bodyAsString as string?
	var bodyAsDynamicMap as DynamicMap?

	func getHeaderValue(name as string) as string?
	{
		foreach vv in headers {
			if String.equalsIgnoreCase(name, vv.key):
				return vv.value
		}
		return null
	}

	func getBodyAsBuffer as buffer:
		return body

	func getBodyAsString throws Exception as string
	{
		if bodyAsString:
			return bodyAsString
		var error as dynamic?
		try {
			var v = String.forUTF8Buffer(getBodyAsBuffer())
			bodyAsString = v
			return v
		}
		catch e {
			error = e
		}
		Error.throw("httpResponseIsNotValidString", error)
	}

	func getBodyAsDynamicMap throws Exception as DynamicMap
	{
		if bodyAsDynamicMap:
			return bodyAsDynamicMap
		var error as dynamic?
		try {
			var v = JSONParser.parseBufferAsMap(getBodyAsBuffer())
			bodyAsDynamicMap = v
			return v
		}
		catch e {
			error = e
		}
		Error.throw("httpResponseIsNotValidDynamicMap", error)
	}
}

class Request public
{
	prop method as string
	prop url as string
	prop headers as KeyValueList<string,string>?
	prop body as buffer?
	prop clientCertificate as string?
	prop clientKey as string?
	prop certificateAuthority as string?
}

func toPostBody(data as dynamic?) static as buffer?
{
	if data == null:
		return null
	if data is buffer:
		return data as! buffer
	if data is string:
		return String.toUTF8Buffer(data as! string)
	return String.toUTF8Buffer(JSONEncoder.toString(data))
}

func executeQuery(ctx as LoggingContext, method as string, url as string, headers as KeyValueList<string,string>?, body as buffer?) async abstract throws Exception as Response

func executeRequest(ctx as LoggingContext, request as Request) async virtual throws Exception as Response:
	return await executeQuery(ctx, request.method, request.url, request.headers, request.body)
