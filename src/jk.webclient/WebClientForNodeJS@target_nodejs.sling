
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.nodejs

class abstract is WebClient:

func executeQuery(ctx as LoggingContext, method as string, url as string, headers as KeyValueList<string,string>, body as buffer) async override as Response
{
	var https = NodeModule.require("https")
	var http = NodeModule.require("http")
	var urlm = NodeModule.require("url")
	return lang "js" promise<Response> {{{
		new Promise((resolve, reject) => {
			let client = http;
			const nurl = urlm.parse(url);
			const options = {
				method: method
			};
			if (nurl.protocol === 'https:') {
				client = https;
			};
			var request = client.request(url, options, (res) => {
				var v = WebClientResponse.NEW();
				v.setStatusCode("" + res.statusCode);
				v.setStatusMessage("" + res.statusMessage);
				var hdrs = _jk_lang.KeyValueListForStrings.NEW();
				if(res.headers) {
					for(var key in res.headers) {
						hdrs.add(key, res.headers[key]);
					}
				}
				v.setHeaders(hdrs);
				var data = [];
				res.on('data', chunk => {
					data.push(chunk);
				});
				res.on('end', () => {
					var buffer = Buffer.concat(data);
					v.setBody(buffer);
					resolve(v);
				});
			});
			request.on('error', (error) => {
				console.log(error);
				reject(error);
			});
			let i = 0;
			if (headers) {
				while(i < headers.count()) {
					request.setHeader(headers.getKey(i), headers.getValue(i));
					i++;
				}
			}
			if (body) {
				request.setHeader('Content-Length', body.byteLength);
				request.write(body);
			}
			request.end();
		})
	}}}
}
