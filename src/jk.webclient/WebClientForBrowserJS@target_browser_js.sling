
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.task

class is WebClient:

func getXMLHttpRequestObject as [magical:XMLHttpRequest]
{
	lang "js" {{{
		if(typeof XMLHttpRequest === "undefined") {
			XMLHttpRequest = function() {
				try {
					return new ActiveXObject('Msxml2.XMLHTTP.6.0');
				}
				catch(e) {}
				try {
					return new ActiveXObject('Msxml2.XMLHTTP.3.0');
				}
				catch(e) {}
				try {
					return new ActiveXObject('Microsoft.XMLHTTP');
				}
				catch(e) {}
				throw new Error('This browser does not support XMLHttpRequest.');
			}
		}
	}}}
	return lang "js" as [magical:XMLHttpRequest] {{{ new XMLHttpRequest() }}}
}

func executeQuery(ctx as LoggingContext, method as string, url as string, headers as KeyValueList<string,string>?, body as buffer?) async override throws Exception as Response
{
	var xhr = getXMLHttpRequestObject()
	var hdrs = new KeyValueListForStrings()
	var r = new Response() {
		statusCode ""
		statusMessage ""
		headers hdrs
		body Buffer.allocate(0)
	}
	return await AsyncTask.runPromise<Response>(func(resolve as function<(Response)>, reject as function<(Exception)>) {
		lang "js" (xhr, r) {{{
			xhr.open(method, url, true);
			xhr.timeout = 30000;
			xhr.responseType = "arraybuffer";
			xhr.onload = () => {
				r.setStatusCodePropertyValue("" + xhr.status);
				r.setStatusMessagePropertyValue("" + xhr.statusText);
				if(xhr.headers) {
					for(var key in xhr.headers) {
						hdrs.add(key, xhr.headers[key]);
					}
				}
				r.setHeadersPropertyValue(hdrs);
				r.setBodyPropertyValue(new Uint8Array(xhr.response));
				resolve(r);
			};
			xhr.onerror = () => {
				reject({
					status: xhr.status,
					statusText: xhr.statusText
				});
			};
		}}}
		if headers {
			var itr = headers.iterate()
			while itr.hasNext() {
				try {
					var next = itr.next()
					var key = next.key
					var value = next.value
					lang "js" (xhr, key, value) {{{
						xhr.setRequestHeader(key, value);
					}}}
				}
				catch e as Exception {
					reject(e)
				}
			}
		}
		if body {
			lang "js" (xhr, body) {{{
				xhr.send(new Uint8Array(body));
			}}}
		}
		else {
			lang "js" (xhr) {{{
				xhr.send(null);
			}}}
		}
	})
}
