
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json

class:

class Response public
{
	pvar httpStatus as string
	pvar httpStatusDescription as string
	pvar headers as KeyValueListForStrings
	pvar body as buffer
	var bodyAsString as string
	var bodyAsDynamicMap as DynamicMap

	func getBodyAsBuffer as buffer
	{
		if not body:
		    Error.throw("httpRequestError", "noBody")
		return body
	}

	func getBodyAsString as string
	{
		if bodyAsString:
			return bodyAsString
		var v = String.forUTF8Buffer(getBodyAsBuffer())
		if not v:
			Error.throw("httpRequestError", "notString")
		bodyAsString = v
		return v
	}

	func getBodyAsDynamicMap as DynamicMap
	{
		if bodyAsDynamicMap:
			return bodyAsDynamicMap
		var v = JSONParser.parseString(getBodyAsString()) as DynamicMap
		if not v:
			Error.throw("httpRequestError", "notJsonMap")
		bodyAsDynamicMap = v
		return v
	}
}

pvar followRedirects = true
pvar credentialsEnabled = false

func getXMLHttpRequestObject as !"XMLHttpRequest"
{
	var xhr as !"XMLHttpRequest" #used
	lang "js" {{{
		if(typeof XMLHttpRequest === "undefined") {
			XMLHttpRequest = function() {
				try {
					return new ActiveXObject('Msxml2.XMLHTTP.6.0');
				}
				catch(e) {}
				try {
					return new ActiveXObject('Msxml2.XMLHTTP.3.0');
				}
				catch(e) {}
				try {
					return new ActiveXObject('Microsoft.XMLHTTP');
				}
				catch(e) {}
				throw new Error('This browser does not support XMLHttpRequest.');
			}
		}
		xhr = new XMLHttpRequest();
	}}}
	return xhr
}

func executeRequest(method as string, url as string, headers as KeyValueList<string,string>, body as buffer) async as promise<Response>
{
	var withCredentials = credentialsEnabled
	var xhr = getXMLHttpRequestObject()
	return new promise<Response> {
		lang "js" {{{
			xhr.open(method, url, true);
			xhr.timeout = 30000;
			xhr.responseType = "arraybuffer";
			xhr.withCredentials = withCredentials;
			xhr.onreadystatechange = function() {
				if(xhr.readyState == 4) {
					var rr = new JkWebWebClientAsyncForJavaScriptResponse();
					rr.setHttpStatus(xhr.status);
					rr.setBody(xhr.response);
					resolve(rr);
				}
			}.bind(this);
		}}}
		if headers {
			var iter = headers.iterate()
			loop {
				var kv = iter.next() as KeyValuePair<string,string>
				if kv == null:
					break
				var k #used = kv.key
				var v #used = kv.value
				lang "js" {{{
					xhr.setRequestHeader(k, v);
				}}}
			}
		}
		if body {
			lang "js" {{{
				xhr.send(new Uint8Array(body));
			}}}
		}
		else {
			lang "js" {{{
				xhr.send();
			}}}
		}
	}
}
