
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class is WebClient:

func executeQuery(ctx as LoggingContext, method as string, url as string, headers as KeyValueList<string,string>?, body as buffer?) async override as WebClient.Response
{
	return new promise<WebClient.Response> {
		var rq as native<System.Net.WebRequest>?
		lang "cs" {{{
			rq = System.Net.WebRequest.Create(url);
			rq.Timeout = 30000;
			if(rq is System.Net.HttpWebRequest) {
				((System.Net.HttpWebRequest)rq).AllowAutoRedirect = true;
			}
			rq.Method = method;
		}}}
		if headers {
			foreach pair in headers {
				if String.equalsIgnoreCase(pair.key, "content-type") {
					lang "cs" {{{
						rq.ContentType = pair.value;
					}}}
				}
				else {
					lang "cs" {{{
						rq.Headers[pair.key] = pair.value;
					}}}
				}
			}
		}
		if body {
			lang "cs" {{{
				rq.ContentLength = body.Length;
				System.IO.Stream stream = rq.GetRequestStream();
				stream.Write(body, 0, body.Length);
				stream.Close();
			}}}
		}
		var status = 0
		var hdrs = new KeyValueListForStrings()
		var rbody as buffer?
		lang "cs" {{{
			System.Net.HttpWebResponse resp = (System.Net.HttpWebResponse)rq.GetResponse();
			status = (int)resp.StatusCode;
			foreach(string key in resp.Headers.AllKeys) {
				hdrs.add(key, resp.Headers[key]);
			}
			var rs = resp.GetResponseStream();
			if(rs != null) {
				byte[] buffer = new byte[16*1024];
				using(System.IO.MemoryStream ms = new System.IO.MemoryStream()) {
					int read;
					while((read = rs.Read(buffer, 0, buffer.Length)) > 0) {
						ms.Write(buffer, 0, read);
					}
					rbody = ms.ToArray();
				}
			}
		}}}
		if not rbody:
			rbody = Buffer.allocate(0)
		return new WebClient.Response() {
			statusCode String.forInteger(status)
			statusMessage ""
			headers hdrs
			body rbody
		}
	}
}
