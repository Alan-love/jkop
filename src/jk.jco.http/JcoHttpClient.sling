
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json

class:

func get(url as string, handler as function<void,JcoHttpResponse>)
{
	var req = new JcoHttpRequest() {
		method "GET"
		url url
	}
	execute(req, handler)
}

func post(url as string, body as buffer, handler as function<void,JcoHttpResponse>)
{
	var req = new JcoHttpRequest() {
		method "POST"
		url url
		body body
	}
	execute(req, handler)
}

func put(url as string, body as buffer, handler as function<void,JcoHttpResponse>)
{
	var req = new JcoHttpRequest() {
		method "PUT"
		url url
		body body
	}
	execute(req, handler)
}

func putWithHeaders(url as string, body as buffer, headers as KeyValueListForStrings, handler as function<void,JcoHttpResponse>)
{
	var req = new JcoHttpRequest() {
		method "PUT"
		url url
		body body
		headers headers
	}
	execute(req, handler)
}

func getString(url as string, handler as function<void,string?>):
	get(url, func(resp as JcoHttpResponse) {
		if JcoHttpResponse.isOK(resp) == false {
			handler(null)
		}
		else {
			handler(resp.getBodyString())
		}
	})

func getMap(url as string, handler as function<void,DynamicMap?>):
	get(url, func(resp as JcoHttpResponse) {
		if JcoHttpResponse.isOK(resp) == false {
			handler(null)
		}
		else {
			handler(JSONParser.parseString(resp.getBodyString()) as DynamicMap)
		}
	})

func getVector(url as string, handler as function<void,DynamicVector?>):
	get(url, func(resp as JcoHttpResponse) {
		if JcoHttpResponse.isOK(resp) == false {
			handler(null)
		}
		else {
			handler(JSONParser.parseString(resp.getBodyString()) as DynamicVector)
		}
	})

func execute(request as JcoHttpRequest, handler as function<void,JcoHttpResponse>)
{
	IFDEF "target_browser_js" {
		executeJs(request, handler)
	}
	ELSE {
		ERROR "notImplemented"
	}
}

IFDEF "target_browser_js"
{
	func getXMLHttpRequestObject as [magical:XMLHttpRequest]
	{
		lang "js" {{{
			if(typeof XMLHttpRequest === "undefined") {
				XMLHttpRequest = function() {
					try {
						return new ActiveXObject('Msxml2.XMLHTTP.6.0');
					}
					catch(e) {}
					try {
						return new ActiveXObject('Msxml2.XMLHTTP.3.0');
					}
					catch(e) {}
					try {
						return new ActiveXObject('Microsoft.XMLHTTP');
					}
					catch(e) {}
					throw new Error('This browser does not support XMLHttpRequest.');
				}
			}
		}}}
		return lang "js" as [magical:XMLHttpRequest] {{{ new XMLHttpRequest() }}}
	}

	func onResponseReceived(status as string, responseHeaders as string?, body as buffer?, callback as function<void,JcoHttpResponse>)
	{
		var nhdrs = new KeyValueListForStrings()
		if responseHeaders {
			var sbldr = new StringBuilder()
			foreach c in String.iterate(responseHeaders) {
				if c == '\r':
					continue
				if c == '\n' {
					var str = sbldr.toString()
					sbldr.clear()
					var spt = String.split(str, ':', 2)
					var key = Vector.getValue(spt, 0)
					var val = Vector.getValue(spt, 1)
					if String.isNotEmpty(key) && String.isNotEmpty(val):
						nhdrs.add(key, String.strip(val))
					continue
				}
				sbldr.appendCharacter(c)
			}
		}
		var bb = body
		if not bb:
			bb = Buffer.allocate(0)
		callback(new JcoHttpResponse() {
			status status
			headers nhdrs
			body bb
		})
	}

	func executeJs(request as JcoHttpRequest, handler as function<void,JcoHttpResponse>)
	{
		var xhr = getXMLHttpRequestObject()
		var method = request.method
		var url = request.url
		var requestHeaders = request.headers
		var body = request.body
		lang "js" {{{
			xhr.open(method, url, true);
			xhr.timeout = 30000;
			xhr.responseType = "arraybuffer";
			xhr.onreadystatechange = function() {
				if(xhr.readyState == 4) {
					this.onResponseReceived(""+xhr.status, xhr.getAllResponseHeaders(), xhr.response, handler);
				}
			}.bind(this);
		}}}
		if requestHeaders {
			var iter = requestHeaders.iterate()
			loop {
				var kv = iter.next() as KeyValuePair<string,string>
				if kv == null:
					break
				var k = kv.key
				var v = kv.value
				lang "js" {{{
					xhr.setRequestHeader(k, v);
				}}}
			}
		}
		if body {
			lang "js" {{{
				xhr.send(new Uint8Array(body));
			}}}
		}
		else {
			lang "js" {{{
				xhr.send();
			}}}
		}
	}
}
