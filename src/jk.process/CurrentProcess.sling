
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env

class:

func terminate(value as int) static
{
	IFDEF "target_uwp_cs" {
		lang "cs" {{{
			Windows.UI.Xaml.Application.Current.Exit();
		}}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		lang "cs" (value) {{{
			System.Environment.Exit(value);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (value) {{{
			kotlin.system.exitProcess(value)
		}}}
	}
	ELSE IFDEF "target_node_js" {
		lang "js" (value) {{{
			require("process").exit(value);
		}}}
	}
	ELSE IFDEF "target_browser" {
		nop value
		ERROR NOT_SUPPORTED
	}
	ELSE {
		nop value
		ERROR NOT_IMPLEMENTED
	}
}

IFDEF "target_objc"
{
	depend "objc-header-m:<mach-o/dyld.h>"
}

func getExecutableFileOrThrowError static throws Exception as File
{
	IFDEF "target_linux" {
		var filepath as string?
		lang "c" {{{
			char file[4096];
			int r = readlink("/proc/self/exe", file, 4096);
			if(r > 0) {
				if(r == 4096) {
					r--;
				}
				file[r] = 0;
				filepath = file;
			}
		}}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_objc" {
		var r = -1
		lang "objc" {{{
			char buffer[PATH_MAX];
			uint32_t bs = PATH_MAX;
			r = _NSGetExecutablePath(buffer, &bs);
		}}}
		if r != 0:
			return null
		var filepath as string?
		lang "objc" {{{
			char rp[PATH_MAX];
			char* rpx = realpath(buffer, rp);
			if(rpx == NULL) {
				rpx = buffer;
			}
			filepath = [[NSString alloc] initWithUTF8String:rpx];
		}}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_win32" {
		var filepath as string? = null
		lang "c" {{{
			char buffer[1024];
			if(GetModuleFileName(NULL, buffer, 1024) > 0) {
				filepath = buffer;
			}
		}}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_dotnet_cs" {
		var filepath = lang "cs" as string {{{ System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName }}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	IFDEF "target_objc" {
		var filepath = lang "objc" as string {{{ [[NSBundle mainBundle] executablePath] }}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_swift" {
		var filepath = lang "swift" as string? {{{ Bundle.main.executablePath }}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_sushi" {
		var filepath = lang "lua" as string {{{ _vm.get_program_path() }}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_node_js" {
		var filepath = lang "js" as string {{{ require.main.filename }}}
		if String.isEmpty(filepath):
			Error.throw("failedToDetermineExecutableFilePath")
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_browser" {
		ERROR NOT_SUPPORTED
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func getExecutableFileOrNull static as File?
{
	try {
		return getExecutableFileOrThrowError()
	}
	catch {
	}
	return null
}

func getInterpreterFileOrNull static as File?
{
	IFDEF "target_node_js" {
		return File.forPath(lang "js" as string {{{ process.execPath }}})
	}
	ELSE IFDEF "target_sushi" {
		return File.forPath(lang "lua" as string {{{ _vm.get_sushi_executable_path() }}})
	}
	ELSE {
		return null
	}
}

func getInterpreterFileOrThrowError static throws Exception as File
{
	var v = getInterpreterFileOrNull()
	if not v:
		Error.throw("noInterpreterFile")
	return v
}

func getProcessNameOrNull static as string?
{
	var exe = getExecutableFileOrNull()
	if exe:
		return exe.getBasenameWithoutExtension()
	return null
}

func getProcessNameOrThrowError static throws Exception as string
{
	var v = getProcessNameOrNull()
	if not v:
		Error.throw("failedToGetProcessName")
	return v
}

func getExecutableDirectoryOrNull static as File?
{
	var srs = EnvironmentVariable.get("SLING_RUN_SOURCE")
	if String.isNotEmpty(srs):
		return File.forPath(srs).getParent()
	var ef = getExecutableFileOrNull()
	if ef:
		return ef.getParent()
	return null
}

func getExecutableDirectoryOrThrowError static throws Exception as File
{
	var v = getExecutableDirectoryOrNull()
	if not v:
		Error.throw("failedToGetExecutableDirectory")
	return v
}
