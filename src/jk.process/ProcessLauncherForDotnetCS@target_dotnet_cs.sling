
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io
import jk.os

class:

IFNDEF "target_uwp"
{
	class MyProcess is Process is ProcessWithIO
	{
		var process public as [magical:System.Diagnostics.Process]?
		var exitCode = 0
		var stdin as Writer?
		var stdout as Reader?
		var stderr as Reader?

		func close
		{
			lang "cs" {{{
				if(process != null) {
					exitCode = process.ExitCode;
					process.Close();
					process = null;
				}
			}}}
		}

		func getStandardInput implement as Writer
		{
			if stdin == null {
				var stream = lang "cs" as [magical:System.IO.Stream] {{{ process.StandardInput.BaseStream }}}
				stdin = StreamWriterForDotnetCS.forStream(stream)
			}
			return stdin
		}

		func getStandardOutput implement as Reader
		{
			if stdout == null {
				var stream = lang "cs" as [magical:System.IO.Stream] {{{ process.StandardOutput.BaseStream }}}
				stdout = StreamReaderForDotnetCS.forStream(stream)
			}
			return stdout
		}

		func getStandardError implement as Reader
		{
			if stderr == null {
				var stream = lang "cs" as [magical:System.IO.Stream] {{{ process.StandardError.BaseStream }}}
				stderr = StreamReaderForDotnetCS.forStream(stream)
			}
			return stderr
		}

		func getId implement as string
		{
			var id = 0
			lang "cs" {{{
				if(process != null) {
					id = process.Id;
				}
			}}}
			return String.forInteger(id)
		}

		func isRunning implement as bool
		{
			var v = false
			lang "cs" {{{
				if(process != null) {
					try {
						int x = process.ExitCode;
					}
					catch {
						v = true;
					}
				}
			}}}
			return v
		}

		func getExitStatus implement as int
		{
			if isRunning():
				return -1
			lang "cs" {{{
				if(process != null) {
					int v;
					try {
						v = process.ExitCode;
					}
					catch {
						v = -1;
					}
					exitCode = v;
				}
			}}}
			close()
			return exitCode
		}

		func sendInterrupt implement
		{
		}

		func getPid private as int
		{
			var pp = process
			if not pp:
				return -1
			var v = -1
			try {
				v = lang "cs" as int {{{ pp.Id }}}
			}
			catch {
				v = -1
			}
			return v
		}

		func killRequest implement
		{
			if OS.isMacOS() || OS.isLinux() {
				var pid = getPid()
				if pid >= 0 {
					var killcmd = ProcessLauncher.forCommand("kill")
					killcmd.addToParams(String.forInteger(pid))
					killcmd.execute()
					return
				}
			}
			killForce()
		}

		func killForce implement
		{
			var pp = assert process
			lang "cs" {{{
				try {
					pp.Kill();
				}
				catch {
				}
			}}}
		}

		func kill(timeout as int) implement
		{
			killRequest()
			var pp = process
			lang "cs" (pp, timeout) {{{
				if(pp != null) {
					pp.WaitForExit(timeout);
				}
			}}}
			killForce()
		}

		func waitForExit implement as int
		{
			var pp = process
			lang "cs" (pp) {{{
				if(pp != null) {
					pp.WaitForExit();
				}
			}}}
			return getExitStatus()
		}
	}

	func startProcess(launcher as ProcessLauncher, wait as bool, pipeHandler as BufferDataReceiver?) static as Process
	{
		var ff = launcher.file
		var sb = new StringBuilder()
		foreach param in launcher.params {
			if sb.count() > 0:
				sb.appendCharacter(' ')
			sb.appendCharacter('"')
			foreach c in String.iterate(param) {
				if c == '"' {
					sb.appendCharacter('"')
					sb.appendCharacter('"')
				}
				else {
					sb.appendCharacter(c)
				}
			}
			sb.appendCharacter('"')
		}
		var sbs = sb.toString()
		var np = new MyProcess()
		var cwdp as string?
		var cwd = launcher.cwd
		if cwd:
			cwdp = cwd.getPath()
		lang "cs" (ff, sbs) {{{
			System.Diagnostics.ProcessStartInfo pi = new System.Diagnostics.ProcessStartInfo();
			pi.UseShellExecute = false;
			pi.FileName = ff.getPath();
			if(pipeHandler != null) {
				pi.RedirectStandardOutput = true;
				pi.RedirectStandardError = true;
				pi.RedirectStandardInput = false;
			}
			else {
				pi.RedirectStandardOutput = false;
				pi.RedirectStandardError = false;
				pi.RedirectStandardInput = false;
			}
			pi.Arguments = sbs;
			pi.WorkingDirectory = cwdp;
		}}}
		var env = launcher.env
		if Map.count(env) > 0 {
			var keys = Map.getKeys(env)
			foreach key in keys {
				var val = env[key]
				lang "cs" (key, val) {{{
					pi.EnvironmentVariables[key] = val;
				}}}
			}
		}
		lang "cs" {{{
			np.process = System.Diagnostics.Process.Start(pi);
		}}}
		if wait {
			lang "cs" {{{
				System.Action<System.Runtime.Loader.AssemblyLoadContext> killHandler1 = ctx => {
					np.kill(1000);
				};
				System.ConsoleCancelEventHandler killHandler2 = (sender, args) => {
					np.kill(1000);
				};
				System.Runtime.Loader.AssemblyLoadContext.Default.Unloading += killHandler1;
				System.Console.CancelKeyPress += killHandler2;
			}}}
			if pipeHandler {
				lang "cs" {{{
					var bb0 = new byte[1024];
					var bb1 = new byte[1024];
					System.IO.Stream sro = np.process.StandardOutput.BaseStream;
					System.IO.Stream sre = np.process.StandardError.BaseStream;
					var tasks = new System.Threading.Tasks.Task<int>[2];
					tasks[0] = sro.ReadAsync(bb0, 0, 1024);
					tasks[1] = sre.ReadAsync(bb1, 0, 1024);
					while(true) {
						if(tasks[0] == null && tasks[1] == null) {
							break;
						}
						System.Threading.Tasks.Task<int>[] tts = null;
						var t0index = 0;
						var t1index = 1;
						if(tasks[0] != null && tasks[1] == null) {
							tts = new System.Threading.Tasks.Task<int>[1];
							tts[0] = tasks[0];
							t0index = 0;
							t1index = -1;
						}
						else if(tasks[0] == null && tasks[1] != null) {
							tts = new System.Threading.Tasks.Task<int>[1];
							tts[0] = tasks[1];
							t0index = -1;
							t1index = 0;
						}
						else {
							tts = new System.Threading.Tasks.Task<int>[2];
							tts[0] = tasks[0];
							tts[1] = tasks[1];
							t0index = 0;
							t1index = 1;
						}
						var tt = System.Threading.Tasks.Task.WaitAny(tts);
						if(t0index >= 0 && tt == t0index) {
							if(tasks[0] != null) {
								if(tasks[0].Result < 1) {
									tasks[0] = null;
								}
								else {
									if(pipeHandler.onBufferData(bb0, tasks[0].Result) == false) {
										np.killForce();
										break;
									}
									tasks[0] = sro.ReadAsync(bb0, 0, 1024);
								}
							}
						}
						else if(t1index >= 0 && tt == t1index) {
							if(tasks[1] != null) {
								if(tasks[1].Result < 1) {
									tasks[1] = null;
								}
								else {
									if(pipeHandler.onBufferData(bb1, tasks[1].Result) == false) {
										np.killForce();
										break;
									}
									tasks[1] = sre.ReadAsync(bb1, 0, 1024);
								}
							}
						}
						else {
							break;
						}
					}
				}}}
			}
			np.waitForExit()
			lang "cs" {{{
				System.Runtime.Loader.AssemblyLoadContext.Default.Unloading -= killHandler1;
				System.Console.CancelKeyPress -= killHandler2;
			}}}
			np.close()
		}
		return np
	}
}
