
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.text

class is StringObject:

description [[
	The ProcessLauncher class provides a mechanism for starting and controlling
	external processes.
]]

class MyStringPipeHandler is BufferDataReceiver
{
	prop builder as StringBuilder
	prop encoding = "UTF-8"

	func onBufferData(data as buffer, size as int) implement as bool
	{
		if size < 1:
			return false
		var str = try? String.forBuffer(Buffer.getSubBuffer(data, 0, size), encoding)
		if str:
			builder.appendString(str)
		return true
	}
}

class MyBufferPipeHandler is BufferDataReceiver
{
	prop data as buffer?

	func onBufferData(newData as buffer, size as int) implement as bool
	{
		if size > 0:
			data = Buffer.append(data, newData, size)
		return true
	}
}

class QuietPipeHandler is BufferDataReceiver
{
	func onBufferData(data as buffer, size as int) implement as bool:
		return true
}

func forSelf static throws Exception as this
{
	var exe = CurrentProcess.getExecutableFileOrThrowError()
	return new this() {
		file exe
	}
}

func forFile(file as File, parameters as vector<string>? = null) static throws Exception as this
{
	description [[
		Creates a launcher for the given executable file. If the file does not exist,
		this method returns a null object instead.
	]]
	if file.isFile() == false:
		Error.throw("fileDoesNotExist", file)
	var v = new this() {
		file file
	}
	if parameters: foreach param in parameters:
		v.addToParams(param)
	return v
}

func forCommand(command as string, parameters as vector<string>? = null) static throws Exception as this
{
	description [[
		Creates a process launcher for the given command. The command can either be a
		full or relative path to an executable file or, if not, a matching executable
		file will be searched for in the PATH environment variable (or through other
		applicable standard means on the given platform), and an appropriately
		configured ProcessLauncher object will be returned. However, if the given
		command is not found, this method returns null.
	]]
	if String.isEmpty(command):
		Error.throw("emptyCommand", null)
	var file as File?
	var delim = PathInfo.getPathSeparator()
	if String.getIndexOfCharacter(command, delim) >= 0 {
		file = File.forPath(command)
	}
	else if delim != '/' && String.getIndexOfCharacter(command, '/') >= 0 {
		file = File.forPath(command)
	}
	else {
		file = ExternalCommand.getAndRequireCommandInPath(command)
	}
	return forFile(file, parameters)
}

func forString(str as string) static throws Exception as this
{
	description [[
		Creates a new process launcher object for the given string, which includes a
		complete command line for executing the process, including the command itself
		and all the parameters, delimited with spaces. If parameters will need to
		contain space as part of their value, those parameters can be enclosed in double
		quotes. This method will return null if the command does not exist and/or is not
		found.
	]]
	if String.isEmpty(str):
		Error.throw("emptyCommandString", str)
	var arr = StringUtil.quotedStringToVector(str, ' ')
	if Vector.getSize(arr) < 1:
		Error.throw("invalidCommandString", str)
	var vsz = Vector.getSize(arr)
	var cmd = arr[0]
	var parameters as vector<string>?
	var paramCount = vsz - 1
	if paramCount > 0 {
		parameters = new vector<string>
		for(var n = 1 ; n < vsz ; n++):
			parameters += arr[n]
	}
	return forCommand(cmd, parameters)
}

prop file as File
prop params = new vector<string>
prop env = new map<string,string>
prop cwd as File?
prop uid = -1
prop gid = -1
prop trapSigint = true
prop replaceSelf = false
prop pipePty = false
prop startGroup = false
prop noCmdWindow = false
prop detachFromTerminal = false
prop inheritEnvironmentVariables = true

func appendProperParam(sb as StringBuilder, p as string) private
{
	assert String.isNotEmpty(p)
	sb.appendCharacter(' ')
	sb.appendCharacter('"')
	escapeQuotesAndBackSlashes(sb, p)
	sb.appendCharacter('"')
}

func escapeQuotesAndBackSlashes(sb as StringBuilder, param as string) private
{
	foreach c in String.iterate(param) {
		if c == '"' || c == '\\':
			sb.appendCharacter('\\')
		sb.appendCharacter(c)
	}
}

func getFullCommandString(includeEnv as bool) as string
{
	description [[
		Produces a string representation of this command with the command itself,
		parameters and environment variables included.
	]]
	var sb = new StringBuilder()
	if includeEnv {
		var keys = Map.getKeys(env)
		foreach key in keys {
			sb.appendString(key)
			sb.appendCharacter('=')
			sb.appendString(env[key])
			sb.appendCharacter(' ')
		}
	}
	sb.appendCharacter('"')
	escapeQuotesAndBackSlashes(sb, file.getPath())
	sb.appendCharacter('"')
	foreach p in params:
		appendProperParam(sb, p)
	return sb.toString()
}

func toString implement as string:
	return getFullCommandString(true)

func addToParams(arg as string) as this
{
	params += arg
	return this
}

func addFileToParams(file as File) as this
{
	addToParams(file.getPath())
	return this
}

func addStringsToParams(parameters as vector<string>) as this
{
	foreach s in parameters:
		addToParams(s)
	return this
}

func setEnvVariable(key as string, val as string):
	env[key] = val

func startProcess(wait as bool, pipeHandler as BufferDataReceiver?) private throws Exception as Process
{
	IFDEF "target_uwp" {
		return null
	}
	ELSE IFDEF "target_dotnet_cs" {
		return ProcessLauncherForDotnetCS.startProcess(this, wait, pipeHandler)
	}
	ELSE IFDEF "target_java" {
		return ProcessLauncherForJava.startProcess(this, wait, pipeHandler)
	}
	ELSE IFDEF "target_sushi" {
		return ProcessLauncherForSushi.startProcess(this, wait, pipeHandler)
	}
	ELSE IFDEF "target_node_js" {
		return ProcessLauncherForNodeJS.startProcess(this, wait, pipeHandler)
	}
	ELSE IFDEF "target_std_swift" {
		return ProcessLauncherForSwift.startProcess(this, wait, pipeHandler)
	}
	ELSE IFDEF "target_macos" {
		return ProcessLauncherForMacos.startProcess(this, wait, pipeHandler)
	}
	ELSE {
		nop wait
		nop pipeHandler
		IFDEF "target_browser" {
			ERROR NOT_SUPPORTED
		}
		ELSE {
			ERROR NOT_IMPLEMENTED
		}
	}
}

func start throws Exception as Process:
	return startProcess(false, null)

func execute throws Exception as int
{
	var cp = startProcess(true, null)
	return cp.getExitStatus()
}

func executeSilent throws Exception as int
{
	var cp = startProcess(true, new QuietPipeHandler())
	return cp.getExitStatus()
}

func executeToStringBuilder(output as StringBuilder) throws Exception as int
{
	var msp = new MyStringPipeHandler() {
		builder output
	}
	var cp = startProcess(true, msp)
	return cp.getExitStatus()
}

func executeToString throws Exception as string
{
	var sb = new StringBuilder()
	executeToStringBuilder(sb)
	return sb.toString()
}

func executeToBuffer throws Exception as buffer
{
	var ph = new MyBufferPipeHandler()
	startProcess(true, ph)
	var v = ph.data
	if not v:
		v = Buffer.allocate(0)
	return v
}

func executeToPipe(pipeHandler as BufferDataReceiver) throws Exception as int
{
	var cp = startProcess(true, pipeHandler)
	return cp.getExitStatus()
}
