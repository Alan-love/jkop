
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json

class is Iterator<DynamicMap> abstract:

description [[
	A generic iterator for SQL result sets.
]]

func hasNext implement abstract as bool
func step abstract throws Exception
func next implement abstract throws Exception as DynamicMap
func nextValues(values as vector<dynamic?>) abstract throws Exception
func getColumnCount abstract throws Exception as int
func getColumnName(n as int) abstract throws Exception as string
func getColumnNames abstract throws Exception as vector<string>
func getColumnValue(n as int) abstract throws Exception as dynamic?
func getColumnInt(n as int) abstract throws Exception as int
func getColumnLong(n as int) abstract throws Exception as long
func getColumnDouble(n as int) abstract throws Exception as double
func getColumnBuffer(n as int) abstract throws Exception as buffer
func close abstract throws Exception

func toDynamicVectorOfDynamicMap as DynamicVector
{
	description [[
		Converts the data into an instance of DynamicVector of records. Each record is
		an instance of DynamicMap.
	]]
	var v = new DynamicVector()
	while hasNext():
		v.appendObject(try! next())
	return v
}

func toVectorOfDynamicMap as vector<DynamicMap>
{
	description [[
		Converts the data into an instance of DynamicVector of records. Each record is
		an instance of DynamicMap.
	]]
	var v = new vector<DynamicMap>
	while hasNext():
		v += try! next()
	return v
}

func toVectorList throws Exception as vector<vector<dynamic?>>
{
	description [[
		Converts the data into a vector of records. Each record is a vector of column
		objects. The first record is a vector of column names.
	]]
	var data = new vector<vector<dynamic?>>
	var cc = getColumnCount()
	var cols = new vector<dynamic?>
	for(var n = 0 ; n < cc ; n++):
		cols += getColumnName(n)
	data += cols
	while hasNext() {
		step()
		var record = new vector<dynamic?>
		for(var n = 0 ; n < cc ; n++):
			record += getColumnValue(n)
		data += record
	}
	return data
}

func headerJSON(sb as StringBuilder) throws Exception
{
	description [[
		Encodes the column name(s) into a vector as a string and appends it to the
		supplied instance of StringBuilder.
	]]
	sb.appendCharacter('[')
	var cc = getColumnCount()
	for(var n = 0 ; n < cc ; n++) {
		if n > 0:
			sb.appendCharacter(',')
		JSONEncoder.encodeToBuilder(getColumnName(n), sb)
	}
	sb.appendCharacter(']')
}

func nextJSON(sb as StringBuilder) throws Exception
{
	description [[
		Encodes the next record into a vector of objects as a string and appends it to
		the supplied instance of StringBuilder. Returns false if there is no record left
		to encode.
	]]
	step()
	var cc = getColumnCount()
	sb.appendString(",[")
	for(var n = 0 ; n < cc ; n++) {
		if n > 0:
			sb.appendCharacter(',')
		JSONEncoder.encodeToBuilder(getColumnValue(n), sb)
	}
	sb.appendCharacter(']')
}

func toVectorListJSON throws Exception as string
{
	description [[
		Encodes the data into a string with a vector list JSON format.
	]]
	var sb = new StringBuilder()
	sb.appendCharacter('[')
	headerJSON(sb)
	while hasNext():
		nextJSON(sb)
	sb.appendCharacter(']')
	return sb.toString()
}
