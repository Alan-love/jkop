
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json
import jk.model

class:

description [[
	Information about an SQL table.
]]

func forName(name as string) static as this
{
	description [[
		Creates an instance of this class with the specified table name.
	]]
	return new this() {
		name name
	}
}

func forDetails(name as string, columns as vector<SQLTableColumnInfo>? = null, indexes as vector<string>? = null, uniqueIndexes as vector<string>? = null) static as this
{
	var v = new this() {
		name name
	}
	if columns: foreach column in columns:
		v.addColumn(column)
	if indexes: foreach index in indexes:
		v.addIndex(index)
	if uniqueIndexes: foreach uniqueIndex in uniqueIndexes:
		v.addUniqueIndex(uniqueIndex)
	return v
}

func forDynamicModelType(tableName as string, modelType as typeinfo) static as this
{
	var o = Reflection.createClassInstanceByTypeinfo(modelType)
	var model = o as DynamicModel
	if not model:
		Error.throw("objectIsNotDynamicModel", o)
	return forDynamicModel(tableName, model)
}

func forDynamicModel(tableName as string, model as DynamicModel) static as this
{
	var table = tableName
	if String.isEmpty(table) {
		var metadata = model.getModelMetadata()
		if metadata {
			var meta = JSONParser.parseStringAsMap(metadata)
			var vv = meta.getString("table")
			if vv:
				table = vv
		}
	}
	if String.isEmpty(table):
		Error.throw("emptyTableNameForDynamicModel", model)
	var v = forName(table)
	foreach field in model.getFields() {
		var fieldName = field.encodedName
		if String.isEmpty(fieldName):
			fieldName = field.name
		if String.isEmpty(fieldName):
			continue
		if field.type == DynamicModelField.TYPE_STRING {
			if field.hasTag("key") {
				v.addStringKeyColumn(fieldName)
			}
			else if field.hasTag("index") {
				v.addStringColumn(fieldName)
			}
			else {
				v.addTextColumn(fieldName)
			}
		}
		else if field.type == DynamicModelField.TYPE_INTEGER {
			if field.hasTag("key") {
				v.addIntegerKeyColumn(fieldName)
			}
			else {
				v.addIntegerColumn(fieldName)
			}
		}
		else if field.type == DynamicModelField.TYPE_LONG_INTEGER {
			if field.hasTag("key") {
				v.addLongKeyColumn(fieldName)
			}
			else {
				v.addLongColumn(fieldName)
			}
		}
		else if field.type == DynamicModelField.TYPE_BOOLEAN {
			v.addIntegerColumn(fieldName)
		}
		else if field.type == DynamicModelField.TYPE_DOUBLE {
			v.addDoubleColumn(fieldName)
		}
		else if field.type == DynamicModelField.TYPE_BUFFER {
			v.addBlobColumn(fieldName)
		}
		else if field.type == DynamicModelField.TYPE_VECTOR {
			v.addTextColumn(fieldName)
		}
		else if field.type == DynamicModelField.TYPE_MAP {
			v.addTextColumn(fieldName)
		}
		else if field.type == DynamicModelField.TYPE_OBJECT {
			v.addTextColumn(fieldName)
		}
		else {
			Error.throw("unsupportedFieldType", String.forInteger(field.type))
		}
		if field.hasTag("index"):
			v.addIndex(fieldName)
		if field.hasTag("uniqueIndex"):
			v.addUniqueIndex(fieldName)
	}
	return v
}

prop name as string
prop columns = new vector<SQLTableColumnInfo>
prop indexes = new vector<SQLTableColumnIndexInfo>

func addColumn(info as SQLTableColumnInfo)
{
	description [[
		Adds the supplied instance of SQLTableColumnInfo class which defines the column
		info to the list of columns of this class instance and returns itself.
	]]
	columns += info
}

func addIntegerColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for column of type integer with
		the supplied column name and adds it to the list of columns of this class
		instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forInteger(name))
}

func addLongColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for column of type long integer
		with the supplied column name and adds it to the list of columns of this class
		instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forLongInteger(name))
}

func addStringColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for column of type string with
		the supplied column name and adds it to the list of columns of this class
		instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forString(name))
}

func addStringKeyColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for key column of type string
		with the supplied column name and adds it to the list of columns of this class
		instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forStringKey(name))
}

func addTextColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for column of type text with the
		supplied column name and adds it to the list of columns of this class instance
		and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forText(name))
}

func addIntegerKeyColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for key column of type integer
		with the supplied column name and adds it to the list of columns of this class
		instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forIntegerKey(name))
}

func addLongKeyColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for key column of type long
		integer with the supplied column name and adds it to the list of columns of this
		class instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forLongIntegerKey(name))
}

func addDoubleColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for column of type double with
		the supplied column name and adds it to the list of columns of this class
		instance and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forDouble(name))
}

func addBlobColumn(name as string)
{
	description [[
		Creates an instance of SQLTableColumnInfo class for column of type blob with the
		supplied column name and adds it to the list of columns of this class instance
		and returns itself.
	]]
	addColumn(SQLTableColumnInfo.forBlob(name))
}

func addIndex(column as string)
{
	description [[
		Creates an instance of SQLTableColumnIndexInfo class from the supplied column
		name and adds it to the list of indexes of this class instance and returns
		itself. The index constraint is not a unique index constraint.
	]]
	indexes += new SQLTableColumnIndexInfo() {
		columns [ column ]
		unique false
	}
}

func addMultiColumnIndex(columns as vector<string>)
{
	description [[
		Creates an instance of SQLTableColumnIndexInfo class from the supplied column
		names and adds them to the list of indexes of this class instance and returns
		itself. The index constraint is not a unique index constraint.
	]]
	indexes += new SQLTableColumnIndexInfo() {
		columns columns
		unique false
	}
}

func addUniqueIndex(column as string)
{
	description [[
		Creates an instance of SQLTableColumnIndexInfo class from the supplied column
		name and adds it to the list of indexes of this class instance and returns
		itself. The index constraint is a unique index constraint.
	]]
	indexes += new SQLTableColumnIndexInfo() {
		columns [ column ]
		unique true
	}
}

func addUniqueMultiColumnIndex(columns as vector<string>)
{
	description [[
		Creates an instance of SQLTableColumnIndexInfo class from the supplied column
		names and adds them to the list of indexes of this class instance and returns
		itself. The index constraint is a unique index constraint.
	]]
	indexes += new SQLTableColumnIndexInfo() {
		columns columns
		unique true
	}
}
