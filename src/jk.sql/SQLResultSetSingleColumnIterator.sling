
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is DynamicIterator is StringIterator is IntegerIterator is LongIntegerIterator is DoubleIterator is BooleanIterator is Iterator<dynamic>:

description [[
	A generic iterator that iterater a single column in a result set.
]]

prop iterator as SQLResultSetIterator
prop columnName as string

func nextMap private throws Exception as DynamicMap:
	return iterator.next()

func next throws Exception as dynamic
{
	description [[
		Returns the column value of the next record as object. Throws an exception if
		there are no records left.
	]]
	return nextMap().getDynamicOrThrowError(columnName)
}

func hasNext implement as bool:
	return iterator.hasNext()

func nextString implement throws Exception as string
{
	description [[
		Returns the column value of the next record as string. Throws an exception if
		there are no records left or if the record cannot be represented as a string.
	]]
	return nextMap().getStringOrThrowError(columnName)
}

func nextInteger implement throws Exception as int
{
	description [[
		Returns the column value of the next record as integer. Throws an exception if
		there are no records left or if the record cannot be represented as an integer.
	]]
	return nextMap().getIntegerOrThrowError(columnName)
}

func nextLong implement throws Exception as long
{
	description [[
		Returns the column value of the next record as long. Throws an exception if
		there are no records left or if the record cannot be represented as a long
		integer.
	]]
	return nextMap().getLongIntegerOrThrowError(columnName)
}

func nextDouble implement throws Exception as double
{
	description [[
		Returns the column value of the next record as double. Throws an exception if
		there are no records left or if the record cannot be represented as a double.
	]]
	return nextMap().getDoubleOrThrowError(columnName)
}

func nextBoolean implement throws Exception as bool
{
	description [[
		Returns the column value of the next record as boolean. Throws an exception if
		there are no records left or if the record cannot be represented as a boolean.
	]]
	return nextMap().getBooleanOrThrowError(columnName)
}
