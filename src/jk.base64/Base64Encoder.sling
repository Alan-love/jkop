
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.lang

class:

func toUrlSafeFormat(str as string) static as string
{
	var v = str
	v = String.replaceString(v, "=", "")
	v = String.replaceCharacter(v, '+', '-')
	v = String.replaceCharacter(v, '/', '_')
	return v
}

func encodeString(str as string) static as string:
	return encode(String.toUTF8Buffer(str))

func encode(buffer as buffer) static as string
{
	IFDEF "target_android_java" {
		return String.safeString(lang "java" as string? {{{ android.util.Base64.encodeToString(buffer, android.util.Base64.NO_WRAP) }}})
	}
	ELSE IFDEF "target_objc" {
		return String.safeString(lang "objc" as string? {{{ [buffer base64EncodedStringWithOptions:0] }}})
	}
	ELSE IFDEF "target_swift" {
		return String.safeString(lang "swift" as string? {{{ (buffer! as Foundation.Data).base64EncodedString() }}})
	}
	ELSE IFDEF "target_browser_js" {
		var base64 as string?
		lang "js" {{{
			var bin = '';
			var bytes = new Uint8Array( buffer );
			var len = bytes.byteLength;
			for (var i = 0; i < len; i++) {
				bin += String.fromCharCode( bytes[i] );
			}
			base64 = window.btoa(bin);
		}}}
		return String.safeString(base64)
	}
	ELSE {
		var length = Buffer.getSize(buffer)
		var dst = Buffer.allocate((length + 2) / 3 * 4)
		var x = 0
		var dstIndex = 0
		var state = 0
		var old = 0
		for(var srcIndex = 0 ; srcIndex < length ; srcIndex++) {
			x = buffer[srcIndex]
			switch ++state {
				case 1 {
					dst[dstIndex++] = toASCIIChar((x >> 2) & 0x3F) as! uint8
				}
				case 2 {
					dst[dstIndex++] = toASCIIChar(((old << 4) & 0x30) | ((x >> 4) & 0xF)) as! uint8
				}
				case 3 {
					dst[dstIndex++] = toASCIIChar(((old << 2) & 0x3C) | ((x >> 6) & 0x3)) as! uint8
					dst[dstIndex++] = toASCIIChar(x & 0x3F) as! uint8
					state = 0
				}
			}
			old = x
		}
		switch state {
			case 1 {
				dst[dstIndex++] = toASCIIChar((old << 4) & 0x30) as! uint8
				dst[dstIndex++] = '=' as! uint8
				dst[dstIndex++] = '=' as! uint8
			}
			case 2 {
				dst[dstIndex++] = toASCIIChar((old << 2) & 0x3C) as! uint8
				dst[dstIndex++] = '=' as! uint8
			}
		}
		return String.forBuffer(dst, "ASCII")
	}
}

func toASCIIChar(lookup as int) static as char
{
	var c = 0
	if lookup < 0 || lookup > 63:
		return c as! char
	if lookup <= 25 {
		c = lookup + 65
	}
	else if lookup <= 51 {
		c = lookup + 71
	}
	else if lookup <= 61 {
		c = lookup - 4
	}
	else if lookup == 62 {
		c = '+' as! int
	}
	else if lookup == 63 {
		c = '/' as! int
	}
	return c as! char
}
