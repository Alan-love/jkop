
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.app
import jk.thread

class is LoggingContext is ApplicationContext is EventLoop abstract:

interface TimerObject public
{
	func cancel
}

var styles as map<string,map<string,dynamic>>?

func setStyle(id as string, style as map<string,dynamic>)
{
	if not styles:
		styles = new map<string,map<string,dynamic>>
	styles[id] = style
}

func getStyle(id as string) as map<string,dynamic>?
{
	assert styles
	return styles[id]
}

func getStyleObject(id as string, style as string) as object?
{
	assert styles
	var ss = assert Map.getValue(styles, id)
	return Map.getValue(ss, style) as object
}

func getStyleString(id as string, style as string, defval as string? = null) as string?
{
	var v = String.asValueOrNull(getStyleObject(id, style))
	if String.isEmpty(v):
		v = defval
	return v
}

func getStyleColor(id as string, style as string, defval as string? = null) as Color?
{
	var v = Color.asColor(getStyleObject(id, style))
	if not v && defval:
		v = Color.instance(defval)
	return v
}

func getStylePixels(id as string, style as string, defval as string? = null) throws Exception as int
{
	var ss = getStyleString(id, style)
	if String.isEmpty(ss):
		ss = defval
	if not ss:
		Error.throw("noStyleFound", style)
	return getHeightValue(ss)
}

func getResourceImage(id as string) abstract throws Exception as Image
func showMessageDialog(title as string, message as string, callback as function<void>? = null) abstract
func showConfirmDialog(title as string, message as string, okcallback as function<void>?, cancelcallback as function<void>?) abstract
func showErrorDialog(message as string, callback as function<void>? = null) abstract
func getScreenTopMargin abstract as int
func getScreenWidth abstract as int
func getScreenHeight abstract as int
func getScreenDensity abstract as int
func getHeightValue(spec as string) abstract as int
func getWidthValue(spec as string) abstract as int
func startTimer(timeout as long, callback as function<void>) abstract as TimerObject
func enableKeepAwakeMode abstract
func disableKeepAwakeMode abstract
func getApplicationDataDirectory implement abstract throws Exception as File?

func px(spec as string) as int:
	return getHeightValue(spec)

func logError(message as string) implement:
	println "[ERROR] " .. message

func logWarning(message as string) implement:
	println "[WARNING] " .. message

func logInfo(message as string) implement:
	println "[INFO] " .. message

func logDebug(message as string) implement:
	println "[DEBUG] " .. message

func logStatus(message as string?) implement:
	println "[STATUS] " .. message

func isInDebugMode implement as bool:
	return false

func runScheduled(timeout as long, runnable as Runnable) implement
{
	assert timeout >= 0
	var rr = runnable
	startTimer(timeout, func => try rr.run())
}

func runInBackground(runnable as Runnable) implement:
	Thread.start(runnable)
