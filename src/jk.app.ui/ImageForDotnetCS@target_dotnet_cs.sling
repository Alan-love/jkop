
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image:

depend "nuget:SixLabors.ImageSharp@1.0.0-beta0005"

pvar compand = true
pvar compressQuality = 75 // 0 - 100 by default it is 75 for JPEG.
pvar compressionLevel = 6 // 1 - 9 by default 6 for PNG

var image as [magical:@[SixLabors.ImageSharp.Image<SixLabors.ImageSharp.PixelFormats.Rgba32>]]?

func forFile(file as File) static as Image
{
	var v = new this()
	if not v.readFromFile(file):
		Error.throw("failedToReadImageFile", file)
	return v
}

func forBuffer(data as buffer) static as Image
{
	var v = new this()
	if not v.readFromBuffer(data):
		Error.throw("failedToReadImageBuffer", data)
	return v
}

func forImageSharpImage(image as [magical:@[SixLabors.ImageSharp.Image<SixLabors.ImageSharp.PixelFormats.Rgba32>]]) static as this
{
	var v = new this()
	v.image = image
	return v
}

func readFromBuffer(data as buffer) as bool
{
	var img as [magical:@[SixLabors.ImageSharp.Image<SixLabors.ImageSharp.PixelFormats.Rgba32>]]?
	lang "cs" {{{
		img = SixLabors.ImageSharp.Image.Load(data);
	}}}
	assert img
	this.image = img
	return true
}

func readFromFile(file as File) as bool
{
	var pp = file.getPath()
	assert String.isNotEmpty(pp)
	var img as [magical:@[SixLabors.ImageSharp.Image<SixLabors.ImageSharp.PixelFormats.Rgba32>]]?
	lang "cs" {{{
		img = SixLabors.ImageSharp.Image.Load(pp);
	}}}
	assert img
	this.image = img
	return true
}

func getPixelWidth override as int
{
	assert image
	return lang "cs" as int {{{ image.Width }}}
}

func getPixelHeight override as int
{
	assert image
	return lang "cs" as int {{{ image.Height }}}
}

func scaleToSizeSync(w as int, h as int) override as Image
{
	if not image:
		ERROR "nullImage"
	lang "cs" {{{
		var option = new SixLabors.ImageSharp.Processing.ResizeOptions
		{
			Compand = compand,
			Mode = SixLabors.ImageSharp.Processing.ResizeMode.Min,
			Size = new SixLabors.Primitives.Size(w, h),
		};
		SixLabors.ImageSharp.Processing.ProcessingExtensions.Mutate(image,
			ctx => SixLabors.ImageSharp.Processing.ResizeExtensions.Resize(ctx, option));
	}}}
	return forImageSharpImage(image)
}

func scaleToSize(w as int, h as int, callback as function<void,Image?>) override:
	callback(scaleToSizeSync(w, h))

func scaleToWidthSync(w as int) override as Image:
	return scaleToSizeSync(w, getProportionalHeight(w))

func scaleToWidth(w as int, callback as function<void,Image?>) override:
	callback(scaleToWidthSync(w))

func scaleToHeightSync(h as int) override as Image:
	return scaleToSizeSync(getProportionalWidth(h), h)

func scaleToHeight(h as int, callback as function<void,Image?>) override:
	callback(scaleToHeightSync(h))

func cropSync(x as int, y as int, w as int, h as int) override as Image
{
	if not image:
		ERROR "nullImage"
	var imgBuffer as buffer?
	lang "cs" {{{
		var rectangle = new SixLabors.Primitives.Rectangle(x, y, w, h);
		SixLabors.ImageSharp.Processing.ProcessingExtensions.Mutate(image,
			ctx => SixLabors.ImageSharp.Processing.CropExtensions.Crop(ctx, rectangle));
	}}}
	if not imgBuffer:
		ERROR "failedToScaleImage"
	return forBuffer(imgBuffer)
}

func crop(x as int, y as int, w as int, h as int, callback as function<void,Image?>) override:
	callback(cropSync(x, y, w, h))

func toJPGData override as buffer
{
	if not image:
		ERROR "nullImage"
	var imgBuffer as buffer?
	lang "cs" {{{
		using (var newStream = new System.IO.MemoryStream())
		{
			var encoder = new SixLabors.ImageSharp.Formats.Jpeg.JpegEncoder
			{
				Quality = compressQuality,
			};
			image.Save(newStream, encoder);
			imgBuffer = newStream.ToArray();
		}
	}}}
	if not imgBuffer:
		ERROR "failedToConvertImageToJPGData"
	return imgBuffer
}

func toPNGData override as buffer
{
	if not image:
		ERROR "nullImage"
	var imgBuffer as buffer?
	lang "cs" {{{
		using (var newStream = new System.IO.MemoryStream())
		{
			var encoder = new SixLabors.ImageSharp.Formats.Png.PngEncoder
			{
				CompressionLevel = compressionLevel,
			};
			image.Save(newStream, encoder);
			imgBuffer = newStream.ToArray();
		}
	}}}
	if not imgBuffer:
		ERROR "failedToConvertImageToPNGData"
	return imgBuffer
}

func toRGBAData override as buffer:
	ERROR "notImplemented"

func releaseImage override
{
	assert image
	lang "cs" {{{
		image.Dispose();
	}}}
}
