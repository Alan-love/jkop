
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func colorToRGBA(color as Color) static as string:
	return color.toHtmlRgbaString()

func isBrowser(id as string) static as bool
{
	var v = false
	lang "js" {{{
		v = navigator.userAgent.toLowerCase().indexOf(id) > -1;
	}}}
	return v
}

func isInternetExplorer static as bool:
	return isBrowser("msie ") || isBrowser("trident/")

func isWebKit static as bool:
	return isBrowser("webkit")

func isFirefox static as bool:
	return isBrowser("firefox")

func isMobile static as bool:
	return isBrowser("mobile")

func isChrome static as bool:
	return isBrowser("chrome")

func isEdge static as bool:
	return isBrowser("edge")

func isSafari static as bool:
	return isBrowser("safari") && not isBrowser("chrome")

func createElement(element as string) static as native<HTMLElement>:
	return lang "js" as native<HTMLElement> {{{ document.createElement(element) }}}

func getDocument static as native<Document>:
	return lang "js" as native<Document> {{{ document }}}

func getDocumentBody static as native<HTMLElement>
{
	var v = lang "js" as native<HTMLElement>? {{{ document.body }}}
	if v == null:
		Error.throw("noDocumentBody", null)
	return v
}

func getDocumentHead static as native<HTMLElement>
{
	var v = lang "js" as native<HTMLElement>? {{{ document.head }}}
	if v == null:
		Error.throw("noDocumentHead", null)
	return v
}

func getParentElement(element as dynamic) static as native<HTMLElement>?:
	return lang "js" as dynamic? {{{ element.parentElement }}}

func getDocumentElementById(id as string) static as native<HTMLElement>?:
	return getElementById(getDocument(), id)

func getElementById(element as dynamic, id as string) static as native<HTMLElement>?:
	return lang "js" as native<HTMLElement>? {{{ element.getElementById(id) }}}

func getElementsByClassName(element as dynamic, classname as string) static as array<native<HTMLElement>>:
	return lang "js" as array<native<HTMLElement>> {{{ element.getElementsByClassName(classname) }}}

func getElementsByTagName(element as dynamic, tagname as string) static as array<native<HTMLElement>>:
	return lang "js" as array<native<HTMLElement>> {{{ element.getElementsByTagName(tagname) }}}

func appendChild(element as dynamic, child as dynamic) static
{
	lang "js" {{{
		element.appendChild(child);
	}}}
}

func appendToBody(element as dynamic) static:
	appendChild(getDocumentBody(), element)

func remove(element as dynamic) static
{
	var parent = getParentElement(element)
	if parent {
		lang "js" {{{
			parent.removeChild(element);
		}}}
	}
}

func getFirstChild(element as dynamic) static as dynamic?:
	return lang "js" as dynamic? {{{ element.firstChild }}}

func getChild(element as dynamic, index as int) static as dynamic?:
	return lang "js" as dynamic? {{{ element.childNodes[index] }}}

func getAttribute(element as dynamic, attr as string) static as string?:
	return lang "js" as string? {{{ element.getAttribute(attr) }}}

func setAttribute(element as dynamic, attr as string, val as string?) static
{
	if val == null {
		lang "js" {{{
			element.removeAttribute(attr);
		}}}
	}
	else {
		lang "js" {{{
			element.setAttribute(attr, val);
		}}}
	}
}

func getInnerHTML(element as dynamic) static as string?:
	return lang "js" as string? {{{ element.innerHTML }}}

func setInnerHTML(element as dynamic, text as string?) static
{
	lang "js" {{{
		element.innerHTML = text;
	}}}
}

func getTextContent(element as dynamic) static as string?:
	return lang "js" as string? {{{ element.textContent }}}

func setTextContent(element as dynamic, text as string?) static
{
	lang "js" {{{
		element.textContent = text;
	}}}
}

func setValue(element as dynamic, val as string?)
{
	lang "js" {{{
		element.value = val;
	}}}
}

func getValue(element as dynamic) static as string?:
	return lang "js" as string? {{{ element.value }}}

func setStyle(element as dynamic, key as string, val as string?) static
{
	var v = val
	if String.isEmpty(val):
		v = ""
	lang "js" {{{
		element.style[key] = v;
	}}}
}

func getStyle(element as dynamic, key as string) static as string?:
	return lang "js" as string? {{{ element.style[key] }}}

func removeStyle(element as dynamic, key as string) static
{
	lang "js" {{{
		element.style[key] = "";
	}}}
}

func addEventListener(element as dynamic, event as string, listener as function<void>) static
{
	lang "js" {{{
		element.addEventListener(event, listener);
	}}}
}

func addEventListenerWithParameterInCallback(element as dynamic, event as string, listener as function<void,dynamic>) static
{
	lang "js" {{{
		element.addEventListener(event, listener);
	}}}
}

func getClassList(element as dynamic) static as string?:
	return lang "js" as string? {{{ element.classList }}}

func addToClassList(element as dynamic, xclass as string) static
{
	lang "js" {{{
		element.classList.add(xclass);
	}}}
}

func removeFromClassList(element as dynamic, xclass as string) static
{
	lang "js" {{{
		element.classList.remove(xclass);
	}}}
}

func setFocus(element as dynamic) static
{
	lang "js" {{{
		element.focus();
	}}}
}

func createTextNode(text as string) static as dynamic:
	return lang "js" as dynamic {{{ document.createTextNode(text) }}}

func doesBrowserSupportFontLoading static as bool
{
	var v = false
	lang "js" {{{
		if(document["fonts"]) {
			v = true;
		}
	}}}
	return v
}

func setFontFamily(element as dynamic, fontFamily as string) static:
	setStyle(element, "font-family", fontFamily)

func isFontStandard(fontFamily as string) static as bool
{
	if fontFamily == "Arial" || fontFamily == "Times New Roman" || fontFamily == "serif" || fontFamily == "sans-serif" || fontFamily == "Helvetica" || fontFamily == "Courier New" || fontFamily == "Courier" || fontFamily == "monospace" || fontFamily == "Verdana":
		return true
	return false
}
