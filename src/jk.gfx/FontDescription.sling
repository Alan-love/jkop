
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.json

class is StringObject:

func forDefault static as this:
	return new this()

func forFile(file as File, size as Length? = null) static as this
{
	var v = new this()
	v.file = file
	if size:
		v.size = size
	return v
}

func forFamily(family as string, size as Length? = null) static as this
{
	var v = new this()
	v.family = family
	if size:
		v.size = size
	return v
}

func parse(value as string) static as this
{
	var v = new this()
	foreach comp in String.split(value, ' ') {
		if comp == "bold" {
			v.bold = true
		}
		else if comp == "italic" {
			v.italic = true
		}
		else if comp == "underline" {
			v.underline = true
		}
		else if Character.isDigit(String.getChar(comp, 0)) {
			v.size = Length.forString(comp)
		}
		else if String.startsWith(comp, "file:") {
			v.file = File.forPath(String.getEndOfString(comp, 5))
		}
		else {
			var nn = v.family
			if String.isEmpty(nn) {
				nn = comp
			}
			else {
				nn = nn .. " " .. comp
			}
			v.family = nn
		}
	}
	return v
}

prop file as File? = null
prop family as string? = null
prop bold as bool = false
prop italic as bool = false
prop underline as bool = false
prop size as Length?

func dup as this
{
	var v = new this()
	v.file = file
	v.family = family
	v.bold = bold
	v.italic = italic
	v.underline = underline
	v.size = size
	return v
}

func toString implement as string
{
	var v = new DynamicMap()
	v.setObject("file", file)
	v.setString("family", family)
	v.setBoolean("bold", bold)
	v.setBoolean("italic", italic)
	v.setBoolean("underline", underline)
	v.setObject("size", size)
	return JSONEncoder.toString(v)
}

func toCssCompatibleString(ppi as double) as string
{
	var sb = new StringBuilder()
	if this.italic:
		sb.appendString("italic")
	if this.bold {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString("bold")
	}
	var size = this.size
	if size {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString(String.forInteger(size.getValueAsPixels(ppi)))
		sb.appendString("px")
	}
	var family = this.family
	if String.isNotEmpty(family) {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString(family)
	}
	return sb.toString()
}
