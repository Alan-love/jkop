
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject:

func asPixels(value as string, ppi as double) static as int:
	return forString(value).getValueAsPixels(ppi)

func asPoints(value as string, ppi as double) static as double:
	return forString(value).getValueAsPoints(ppi)

func forString(value as string) static as this
{
	var v = new this()
	v.parse(value)
	return v
}

func forPixels(value as int) static as this:
	return new this() {
		value value
		unit UNIT_POINT
	}

func forPoints(value as double) static as this:
	return new this() {
		value value
		unit UNIT_POINT
	}

func forMilliMeters(value as double) static as this:
	return new this() {
		value value
		unit UNIT_MILLIMETER
	}

func forMicroMeters(value as double) static as this:
	return new this() {
		value value
		unit UNIT_MICROMETER
	}

func forNanoMeters(value as double) static as this:
	return new this() {
		value value
		unit UNIT_NANOMETER
	}

func forInches(value as double) static as this:
	return new this() {
		value value
		unit UNIT_INCH
	}

func forValue(value as double, unit as int) static as this:
	return new this() {
		value value
		unit unit
	}

func forStringAsPoints(value as string, ppi as double) static as this:
	return new this() {
		value forString(value).getValueAsPoints(ppi)
		unit UNIT_POINT
	}

const UNIT_POINT = 0
const UNIT_MILLIMETER = 1
const UNIT_MICROMETER = 2
const UNIT_NANOMETER = 3
const UNIT_INCH = 4

prop value as double = 0.0
prop unit as int = 0

func parse(value as string) private
{
	var i = 0
	var n = 0
	foreach c in String.iterate(value) {
		if c >= '0' && c <= '9' {
			i *= 10
			i += c - '0' as! int
		}
		else {
			break
		}
		n++
	}
	this.value = i
	var suffix = String.getEndOfString(value, n)
	if String.isEmpty(suffix) {
		unit = UNIT_POINT
	}
	else if suffix == "pt" || suffix == "px" {
		unit = UNIT_POINT
	}
	else if suffix == "mm" {
		unit = UNIT_MILLIMETER
	}
	else if suffix == "um" {
		unit = UNIT_MICROMETER
	}
	else if suffix == "nm" {
		unit = UNIT_NANOMETER
	}
	else if suffix == "in" {
		unit = UNIT_INCH
	}
	else {
		unit = UNIT_POINT
	}
}

func getValueAsPixels(ppi as double) as int:
	return getValueAsPoints(ppi) as! int

func getValueAsPoints(ppi as double) as double
{
	if unit == UNIT_POINT:
		return value
	if unit == UNIT_MILLIMETER {
		var v = value * ppi / 25
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	if unit == UNIT_MICROMETER {
		var v = value * ppi / 25000
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	if unit == UNIT_NANOMETER {
		var v = value * ppi / 25000000
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	if unit == UNIT_INCH {
		var v = value * ppi
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	return 0.0
}

func getValueAsMilliMeters(ppi as double) as double
{
	assert ppi != 0.0
	return 25 * getValueAsPoints(ppi) / ppi
}

func getValueAsMicroMeters(ppi as double) as double
{
	assert ppi != 0.0
	return 25000 * getValueAsPoints(ppi) / ppi
}

func getValueAsNanoMeters(ppi as double) as double
{
	assert ppi != 0.0
	return 25000000 * getValueAsPoints(ppi) / ppi
}

func getValueAsInches(ppi as double) as double
{
	assert ppi != 0.0
	return getValueAsPoints(ppi) / ppi
}

func getValueAsUnit(unit as int, ppi as double) as double
{
	if unit == UNIT_POINT:
		return getValueAsPoints(ppi)
	if unit == UNIT_MILLIMETER:
		return getValueAsMilliMeters(ppi)
	if unit == UNIT_MICROMETER:
		return getValueAsMicroMeters(ppi)
	if unit == UNIT_NANOMETER:
		return getValueAsNanoMeters(ppi)
	if unit == UNIT_INCH:
		return getValueAsInches(ppi)
	return value
}

func unitToString(unit as int) private as string
{
	if unit == UNIT_POINT:
		return "pt"
	if unit == UNIT_MILLIMETER:
		return "mm"
	if unit == UNIT_MICROMETER:
		return "um"
	if unit == UNIT_NANOMETER:
		return "nm"
	if unit == UNIT_INCH:
		return "in"
	return ""
}

func toString implement as string:
	return String.forDouble(value) .. unitToString(unit)

func toStringWithUnit(unit as int, ppi as double) as string
{
	var v = getValueAsUnit(unit, ppi)
	return String.forDouble(v) .. unitToString(unit)
}

func toPixelString(ppi as double) as string
{
	var v = getValueAsUnit(UNIT_POINT, ppi)
	return String.forInteger(v as! int) .. "px"
}
