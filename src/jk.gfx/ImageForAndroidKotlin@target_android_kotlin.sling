
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image:

var resourceCache static as map<string,this>?

func forKotlinBitmap(bitmap as [magical:android.graphics.Bitmap]) static as this
{
	if not bitmap:
		return null
	var v = new this()
	v.bitmap = bitmap
	return v
}

func forSize(width as int, height as int) static as this
{
	var v = new this()
	lang "kotlin" {{{
		try {
			v!!.bitmap = android.graphics.Bitmap.createBitmap(width, height, android.graphics.Bitmap.Config.ARGB_8888)
		}
		catch(e: Exception) {
			v!!.bitmap = null
		}
		if(v!!.bitmap == null) {
			return(null)
		}
	}}}
	return v
}

func forFile(file as File) static as this:
	ERROR NOT_IMPLEMENTED

func sanitizeResourceName(n as string) static private as string
{
	if not n:
		return null
	var sb = new StringBuilder()
	var it = String.iterate(n)
	var c as char
	while (c = it.getNextChar()) > 0 {
		if c >= 'A' && c <= 'Z' {
			sb.append(('a' + c - 'A') as! char)
		}
		else if c >= 'a' && c <= 'z' {
			sb.append(c)
		}
		else if c >= '0' && c <= '9' {
			sb.append(c)
		}
		else {
			sb.append('_')
		}
	}
	return sb.toString()
}

func forResource(name as string, context as [magical:android.content.Context]) static as this
{
	if not name || not context:
		return null
	if resourceCache {
		var v = Map.getValue(resourceCache, name)
		if v:
			return v
	}
	var bm as [magical:android.graphics.Bitmap]?
	var rid = (context.getPackageName() as! string) .. ":drawable/" .. sanitizeResourceName(name)
	lang "kotlin" {{{
		var res = context.getResources()
		if(res != null) {
			var aid = res.getIdentifier(rid, null, null)
			if(aid > 0) {
				var d = res.getDrawable(aid)
				if (d != null && d is android.graphics.drawable.BitmapDrawable) {
					bm = (d as android.graphics.drawable.BitmapDrawable).bitmap
				}
			}
		}
	}}}
	if not bm:
		return null
	var v = new this()
	v.bitmap = bm
	if not resourceCache:
		resourceCache = new map<string,this>
	resourceCache[name] = v
	return v
}

func forBuffer(buffer as buffer) static as this
{
	if not buffer:
		return null
	var bm as [magical:android.graphics.Bitmap]?
	lang "kotlin" {{{
		bm = android.graphics.BitmapFactory.decodeByteArray(buffer!!.toByteArray(), 0, buffer.size)
	}}}
	if not bm:
		return null
	return forKotlinBitmap(bm)
}

var bitmap public as [magical:android.graphics.Bitmap]?

func getKotlinBitmap as [magical:android.graphics.Bitmap]:
	return bitmap

func getPixelWidth override as int
{
	var v = 0
	if bitmap:
		v = bitmap.getWidth() as! int
	return v
}

func getPixelHeight override as int
{
	var v = 0
	if bitmap:
		v = bitmap.getHeight() as! int
	return v
}

func scaleToSize(width as int, height as int) override throws Exception as Image
{
	if width < 0 || height < 0:
		return this
	var bm as [magical:android.graphics.Bitmap]?
	lang "kotlin" {{{
		try {
			bm = android.graphics.Bitmap.createScaledBitmap(bitmap, width, height, true)
		}
		catch(e: Exception) {
			bm = null
		}
	}}}
	if not bm:
		return null
	return forKotlinBitmap(bm)
}

func crop(x as int, y as int, w as int, h as int) override throws Exception as Image
{
	if not bitmap:
		return null
	var bm as [magical:android.graphics.Bitmap]?
	lang "kotlin" {{{
		bm = android.graphics.Bitmap.createBitmap(bitmap, x, y, w, h, null, false)
	}}}
	if not bm:
		return null
	return forKotlinBitmap(bm)
}

func crop(x as int, y as int, w as int, h as int, callback as function<(Image)>) override throws Exception
{
	assert callback
	callback(crop(x, y, w, h))
}

func toJPGData override throws Exception as buffer
{
	assert bitmap
	var buf as buffer?
	lang "kotlin" {{{
		var baStream = java.io.ByteArrayOutputStream()
		var cf = android.graphics.Bitmap.CompressFormat.JPEG
		if(bitmap!!.compress(cf, 100, baStream)) {
			buf = baStream.toByteArray()?.toUByteArray()
		}
	}}}
	return buf
}

func toPNGData override throws Exception as buffer
{
	assert bitmap
	var buf as buffer?
	lang "kotlin" {{{
		var baStream = java.io.ByteArrayOutputStream()
		var cf = android.graphics.Bitmap.CompressFormat.PNG
		if(bitmap!!.compress(cf, 70, baStream)) {
			buf = baStream.toByteArray()?.toUByteArray()
		}
	}}}
	return buf
}

func toRGBAData override throws Exception as buffer:
	ERROR NOT_IMPLEMENTED

func releaseImage override:
	ERROR NOT_IMPLEMENTED
