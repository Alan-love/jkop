
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

func initialize static
{
	IFDEF "target_browser_js" {
		registerFontByName(FONT_BRANDS)
		registerFontByName(FONT_REGULAR)
		registerFontByName(FONT_SOLID)
	}
}

const FONT_BRANDS = "fa-brands-400"
const FONT_REGULAR = "fa-regular-400"
const FONT_SOLID = "fa-solid-900"
const FA_BELL = "f0f3"
const FA_BELL_SLASH = "f1f6"
const FA_CIRCLE_EXCLAMATION = "f06a"
const FA_TRIANGLE_EXCLAMATION = "f071"

prop content as string #content = FA_CIRCLE_EXCLAMATION
prop font as string #content = FONT_REGULAR
prop size as string #content = "{iconSize|16px}"
prop color as string #content = "{textColor|#000000}"

IFDEF "target_browser_js"
{
	func registerFontByName(font as string) static:
		CustomFontManager.register(font, new map<string,string> {
			"font-family" font
			src "url(\"" .. font .. ".woff2\") format(\"woff2\"),url(\"" .. font .. ".ttf\") format(\"truetype\")"
		})

	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		base.addCssRules(sheet)
		var theme = JcoThemeProcessor.forComponent(this)
		sheet.define("span", new map<string,string> {
			"font-family" font
			"font-size" lengthToHtml(size)
			color colorToHtml(theme.getValue(color))
		})
	}

	compose
	{
		<span>@{String.forCharacter(Integer.forHexStringOrDefaultValue(content) as! char)}</span>
	}

	func onMounted override throws Exception
	{
		base.onMounted()
		registerFontByName(font)
	}
}
