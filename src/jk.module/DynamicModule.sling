
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.fs

class:

IFDEF "target_dotnet_cs"
{
	depend "nuget:System.Reflection@4.3.*"
	depend "nuget:System.Runtime.Loader@4.3.*"
}

func forFile(file as File) static throws Exception as this
{
	var v = new this()
	v.loadFile(file)
	return v
}

func forObject(oo as object) static as this
{
	IFDEF "target_dotnet_cs" {
		var asm as [magical:System.Reflection.Assembly]?
		lang "cs" (oo) {{{
			var type = oo.GetType();
			if(type != null) {
				asm = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).Assembly;
			}
		}}}
		if not asm:
			Error.throw("failedToGetAssemblyObject", null)
		var v = new this()
		v.assembly = asm
		return v
	}
	ELSE {
		nop oo
		ERROR NOT_SUPPORTED
	}
}

func isModuleFile(file as File) static as bool
{
	IFDEF "target_dotnet_cs" {
		if file.hasExtension("dll"):
			return true
	}
	ELSE IFDEF "target_swift" {
		if file.hasExtension("dylib") || file.hasExtension("tbd"):
			return true
	}
	ELSE {
		nop file
	}
	return false
}

IFDEF "target_dotnet_cs"
{
	var assembly as [magical:System.Reflection.Assembly]?
}

IFDEF "target_swift"
{
	var handle as [magical:UnsafeMutableRawPointer]? #mutated
}

func getModuleDescription as string
{
	IFDEF "target_dotnet_cs" {
		if assembly:
			return lang "cs" as string {{{ assembly.FullName }}}
	}
	return "builtin"
}

func loadFile(file as File) throws Exception
{
	if not file.isFile():
		Error.throw("fileDoesNotExist", file)
	IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			assembly = System.Runtime.Loader.AssemblyLoadContext.Default.LoadFromAssemblyPath(file.getPath());
		}}}
	}
	ELSE IFDEF "target_swift" {
		var path #used = file.getPath()
		var errorString as string? #mutated
		lang "swift" (handle, errorString) {{{
			handle = dlopen(path, RTLD_NOW)
			if (handle == nil) {
				errorString = Swift.String(validatingUTF8: dlerror())
			}
		}}}
		if errorString:
			Error.throw("failedToLoadAssembly", errorString)
	}
	ELSE {
		ERROR NOT_SUPPORTED
	}
}

func executeStaticMethod(entityName as string, methodName as string, parameters as array<object>) throws Exception
{
	IFDEF "target_dotnet_cs" {
		assert assembly:
			Error.throw("noAssemblyHasBeenLoaded")
		var mainType as [magical:System.Type]?
		lang "cs" {{{
			mainType = assembly.GetType(entityName);
		}}}
		assert mainType:
			Error.throw("noMainType", "Failed to find class `" .. entityName .. "' in dynamic module: `" .. getModuleDescription() .. "'")
		var methodRef as [magical:System.Reflection.MethodInfo]?
		lang "cs" {{{
			methodRef = System.Reflection.IntrospectionExtensions.GetTypeInfo(mainType).GetMethod(methodName);
		}}}
		if methodRef == null:
			Error.throw("methodNotFound", "Failed to find method `" .. methodName .. "' in entity `" .. entityName .. "' in module: `" .. getModuleDescription() .. "'")
		lang "cs" (parameters) {{{
			methodRef.Invoke(null, parameters);
		}}}
	}
	ELSE IFDEF "target_swift" {
		if Array.isEmpty(parameters) == false:
			Error.throw("functionWithParametersIsNotSupported")
		var combinedName #used = entityName .. methodName
		var errorString as string? #mutated
		lang "swift" (handle, combinedName, errorString) {{{
			let sym = dlsym(handle, combinedName)
			if (sym == nil) {
				errorString = Swift.String(validatingUTF8: dlerror())
			}
		}}}
		if errorString:
			Error.throw("failedToExecuteMethod", errorString)
		lang "swift" (handle) {{{
			typealias randomFunc = @convention(c) () -> AnyObject
			let f = unsafeBitCast(sym, to: randomFunc.self)
			f()
			dlclose(handle!)
		}}}
	}
	ELSE {
		nop entityName
		nop methodName
		nop parameters
		ERROR NOT_SUPPORTED
	}
}

func createObject(className as string) as object
{
	IFDEF "target_dotnet_cs" {
		if not assembly:
			Error.throw("noAssemblyObjectLoaded")
		var type as [magical:System.Type]?
		lang "cs" {{{
			type = assembly.GetType(className);
		}}}
		if not type:
			Error.throw("failedToFindClassInDynamicModule", className)
		var constructor as [magical:System.Reflection.ConstructorInfo]?
		lang "cs" {{{
			constructor = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).GetConstructor(new System.Type[0]);
		}}}
		if constructor == null:
			Error.throw("failedToFindConstructorInClass", className)
		var v = lang "cs" as object? {{{ constructor.Invoke(null) }}}
		if not v:
			Error.throw("failedToCreateObject", className)
		return v
	}
	ELSE {
		nop className
		ERROR NOT_SUPPORTED
	}
}
