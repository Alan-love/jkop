
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.xml
import jk.json

class is StringObject:

prop data as string

var dataMapValue as DynamicMap?

func getDataMap as DynamicMap
{
	if not dataMapValue {
		var data = this.data
		if String.startsWith(data, "{"):
			dataMapValue = JSONParser.parseStringAsMap(data)
	}
	if not dataMapValue {
		dataMapValue = new DynamicMap()
		dataMapValue.setString("data", data)
	}
	return dataMapValue
}

func forString(data as string) static as this:
	return new this() {
		data data
	}

func setValue(key as string, value as string?):
	getDataMap().setString(key, value)

func getValue(key as string) as string?:
	return getDataMap().getString(key)

func toHtmlWithResolver(language as string?, resolver as RichTextDocumentReferenceResolver) async as string?
{
	var map = getDataMap()
	var text as string?
	var format = map.getString("format")
	if language:
		text = map.getString("data_" .. language)
	if not text:
		text = map.getString("data")
	assert text
	if not format:
		format = "markup"
	if format == "html" {
		return text
	}
	if format == "text" {
		return "<pre>" .. HTMLString.sanitize(text) .. "</pre>"
	}
	if format == "markup" {
		var rtd = RichTextDocument.forWikiMarkupString(text)
		return await rtd.toHtmlWithResolver(resolver)
	}
	Error.throw("unsupportedContentFormat", format)
	return null
}

func toHtml(language as string?) as string?
{
	var map = getDataMap()
	var text as string?
	var format = map.getString("format")
	if language:
		text = map.getString("data_" .. language)
	if not text:
		text = map.getString("data")
	assert text
	if not format:
		format = "markup"
	if format == "html" {
		return text
	}
	if format == "text" {
		return "<pre>" .. HTMLString.sanitize(text) .. "</pre>"
	}
	if format == "markup" {
		var rtd = RichTextDocument.forWikiMarkupString(text)
		return rtd.toHtml()
	}
	Error.throw("unsupportedContentFormat", format)
	return null
}

func toString as string:
	return JSONEncoder.toCompactString(getDataMap())
