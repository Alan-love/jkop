
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log

class:

func forDirectory(ctx as LoggingContext, dir as File, cached as bool = false) static throws Exception as this?
{
	assert dir.isDirectory()
	var v = new map<string,dynamic>
	foreach f in dir.entries() {
		if f.isFile() {
			if cached {
				var b = f.getContentsUTF8()
				Map.set(v, f.getBasename(), b)
				continue
			}
			Map.set(v, f.getBasename(), f)
		}
	}
	return forTemplates(ctx, v)
}

func forTemplates(ctx as LoggingContext, data as map<string,dynamic>) static as this
{
	var v = new this() {
		ctx ctx
	}
	v.setTemplates(data)
	return v
}

prop ctx as LoggingContext

pvar templates as map<string,dynamic>?

func getTemplateData(name as string?) throws Exception as string?
{
	assert name
	assert templates
	var o = assert Map.getValue(templates, name)
	if o is string:
		return o as! string
	if o is buffer:
		return String.forUTF8Buffer(o as! buffer)
	if o is File:
		return (o as! File).getContentsUTF8()
	return null
}

func getText(name as string?, vars as DynamicMap? = null) throws Exception as string?
{
	var td = assert getTemplateData(name)
	var vv = vars
	if not vv:
		vv = new DynamicMap()
	var tt = assert TextTemplate.forHTMLString(ctx, td, null, templates)
	return tt.execute(vv)
}
