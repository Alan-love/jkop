
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class:

func forWikiMarkupFile(file as File) static as this:
	return RichTextWikiMarkupParser.parseFile(file)

func forWikiMarkupString(str as string) static as this:
	return RichTextWikiMarkupParser.parseString(str)

var metadata = new DynamicMap()
pvar paragraphs as vector<RichTextParagraph>?

func getTitle as string?:
	return metadata.getString("title")

func setTitle(v as string?) as this
{
	metadata.setString("title", v)
	return this
}

func getAllMetadata as DynamicMap:
	return metadata

func getMetadata(k as string) as string?:
	return metadata.getString(k)

func setMetadata(k as string, v as string?) as this
{
	metadata.setString(k,v)
	return this
}

func addParagraph(rtp as RichTextParagraph) as this
{
	if paragraphs == null:
		paragraphs = new vector<RichTextParagraph>
	Vector.appendValue(paragraphs, rtp)
	if getTitle() == null && rtp is RichTextStyledParagraph && (rtp as! RichTextStyledParagraph).getHeading() == 1:
		setTitle((rtp as! RichTextStyledParagraph).getTextContent())
	return this
}

func getAllReferences as vector<string>
{
	var v = new vector<string>
	if paragraphs: foreach paragraph in paragraphs {
		if paragraph is RichTextReferenceParagraph {
			var ref = (paragraph as! RichTextReferenceParagraph).getReference()
			if String.isNotEmpty(ref):
				v += ref
		}
		else if paragraph is RichTextStyledParagraph {
			if var segments = (paragraph as! RichTextStyledParagraph).getSegments(): foreach segment in segments {
				var ref = segment.getReference()
				if String.isNotEmpty(ref):
					v += ref
			}
		}
	}
	return v
}

func getAllLinks as vector<string>
{
	var v = new vector<string>
	if paragraphs: foreach paragraph in paragraphs {
		if paragraph is RichTextLinkParagraph {
			var link = (paragraph as! RichTextLinkParagraph).getLink()
			if String.isNotEmpty(link):
				v += link
		}
		else if paragraph is RichTextStyledParagraph {
			if var segments = (paragraph as! RichTextStyledParagraph).getSegments(): foreach segment in segments {
				var link = segment.getLink()
				if String.isNotEmpty(link):
					v += link
			}
		}
	}
	return v
}

func toJson as DynamicMap
{
	var v = new DynamicMap()
	v.setObject("metadata", metadata)
	v.setString("title", getTitle())
	var pp = new vector<object>
	if paragraphs: foreach par in paragraphs {
		var pj = par.toJson()
		Vector.appendValue(pp, pj)
	}
	v.setObject("paragraphs", pp)
	return v
}

func toHtmlWithResolver(refs as RichTextDocumentReferenceResolver?) async as string
{
	var sb = new StringBuilder()
	if paragraphs: foreach paragraph in paragraphs {
		var html = await paragraph.toHtmlWithResolver(refs)
		if String.isNotEmpty(html) {
			sb.appendString(html)
			sb.appendCharacter('\n')
		}
	}
	return sb.toString()
}

func toHtml as string
{
	var sb = new StringBuilder()
	if paragraphs: foreach paragraph in paragraphs {
		var html = paragraph.toHtml()
		if String.isNotEmpty(html) {
			sb.appendString(html)
			sb.appendCharacter('\n')
		}
	}
	return sb.toString()
}
