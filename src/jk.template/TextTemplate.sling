
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.xml
import jk.log
import jk.json
import jk.text

class:

class TagData private
{
	var words public as vector<string>?

	ctor(words as vector<string>):
		this.words = words
}

func processFile(logContext as LoggingContext, file as File, markerBegin as string?, markerEnd as string?, vars as DynamicMap?) static as string?
{
	var v = assert forFile(logContext, file, markerBegin, markerEnd)
	return v.execute(vars)
}

func processString(logContext as LoggingContext, text as string, markerBegin as string?, markerEnd as string?, vars as DynamicMap?) static as string?
{
	var v = assert forString(logContext, text, markerBegin, markerEnd)
	return v.execute(vars)
}

func forFile(logContext as LoggingContext, file as File, markerBegin as string?, markerEnd as string?, type as int = 0, includeDirs as vector<File>? = null, includeFileData as map<string,object>? = null) static as this?
{
	var text = file.getContentsUTF8()
	var ids = includeDirs
	if not ids {
		ids = new vector<File>
		ids += file.getParent()
	}
	return forString(logContext, text, markerBegin, markerEnd, type, ids, includeFileData)
}

func forHTMLFile(logContext as LoggingContext, file as File, includeDirs as vector<File>? = null, includeFileData as map<string,object>? = null) static as this?:
	return forFile(logContext, file, "<%", "%>", TYPE_HTML, includeDirs, includeFileData)

func forString(logContext as LoggingContext, text as string, markerBegin as string?, markerEnd as string?, type as int = 0, includeDirs as vector<File>? = null, includeFileData as map<string,object>? = null) static as this?
{
	var v = new this() {
		logContext logContext
	}
	v.setText(text)
	v.setType(type)
	v.setMarkerBegin(markerBegin)
	v.setMarkerEnd(markerEnd)
	v.setIncludeDirs(includeDirs)
	v.setIncludeFileData(includeFileData)
	if v.prepare() == false:
		return null
	return v
}

func forHTMLString(logContext as LoggingContext, text as string, includeDirs as vector<File>? = null, includeFileData as map<string,object>? = null) static as this?
{
	var v = new this() {
		logContext logContext
	}
	v.setText(text)
	v.setType(TYPE_HTML)
	v.setMarkerBegin("<%")
	v.setMarkerEnd("%>")
	v.setIncludeDirs(includeDirs)
	v.setIncludeFileData(includeFileData)
	if v.prepare() == false:
		return null
	return v
}

func forJSONString(logContext as LoggingContext, text as string, includeDirs as vector<File>? = null, includeFileData as map<string,object>? = null) static as this?
{
	var v = new this() {
		logContext logContext
	}
	v.setText(text)
	v.setType(TYPE_JSON)
	v.setMarkerBegin("{{")
	v.setMarkerEnd("}}")
	v.setIncludeDirs(includeDirs)
	v.setIncludeFileData(includeFileData)
	if v.prepare() == false:
		return null
	return v
}

const TYPE_GENERIC = 0
const TYPE_HTML = 1
const TYPE_JSON = 2

prop logContext as LoggingContext

pvar tokens as vector<object>?
pvar text as string?
pvar markerBegin as string?
pvar markerEnd as string?
pvar type = TYPE_GENERIC
pvar languagePreferences as vector<string>?
pvar includeDirs as vector<File>?
pvar includeFileData as map<string,object>?

func setLanguagePreference(language as string?)
{
	languagePreferences = new vector<string>
	if language:
		languagePreferences += language
}

func getIncludeFileContent(fileName as string?) as string?
{
	assert fileName
	var ff as File?
	if includeFileData {
		var o = Map.getValue(includeFileData, fileName)
		if o {
			if o is string:
				return o as! string
			if o is buffer:
				return String.forUTF8Buffer(o as! buffer)
			if o is File:
				ff = o as! File
		}
	}
	if not ff {
		if PathInfo.isAbsolutePath(fileName):
			ff = File.forPath(fileName)
	}
	if not ff {
		if includeDirs: foreach includeDir in includeDirs {
			var x = File.forRelativePath(fileName, includeDir)
			if x.isFile() {
				ff = x
				break
			}
		}
	}
	assert ff:
		Log.warning(logContext, "Included file was not found: `" .. fileName .. "'")
	assert ff.isFile():
		Log.warning(logContext, "Included file does not exist: `" .. fileName .. "'")
	return ff.getContentsUTF8()
}

func tokenizeString(inputdata as string) private as vector<object>?
{
	if markerBegin == null || markerEnd == null {
		Log.error(logContext, "No template markers were given")
		return null
	}
	if String.getLength(markerBegin) != 2 || String.getLength(markerEnd) != 2 {
		Log.error(logContext, "Invalid template markers: `" .. markerBegin .. "' and `" .. markerEnd .. "'")
		return null
	}
	var mb1 = String.getChar(markerBegin, 0)
	var mb2 = String.getChar(markerBegin, 1)
	var me1 = String.getChar(markerEnd, 0)
	var me2 = String.getChar(markerEnd, 1)
	var pc as char
	var tag as StringBuilder?
	var data as StringBuilder?
	var v = new vector<object>
	foreach c in String.iterate(inputdata) {
		// parsing the tag
		if tag {
			if pc == me1 && tag.count() > 2 {
				tag.appendCharacter(pc)
				tag.appendCharacter(c)
				if c == me2 {
					var tt = tag.toString()
					var tts = String.strip(String.getSubString(tt, 2, String.getLength(tt)-4))
					var words = StringUtil.quotedStringToVector(tts, ' ')
					if Vector.getValue(words, 0) == "include" {
						var fileName = Vector.getValue(words, 1)
						if String.isEmpty(fileName) {
							Log.warning(logContext, "Include tag with empty filename. Ignoring it.")
						}
						else {
							var cc = getIncludeFileContent(fileName)
							if cc {
								var nt = forString(logContext, cc, markerBegin, markerEnd, type, includeDirs, includeFileData)
								if nt == null {
									Log.warning(logContext, "Failed to process included template file: `" .. fileName .. "'")
								}
								else {
									if var tokens = nt.getTokens(): foreach token in tokens:
										v += token
								}
							}
							else {
								Log.warning(logContext, "Failed to get include file content: `" .. fileName .. "'")
							}
						}
					}
					else {
						v += new TagData(words)
					}
					tag = null
				}
			}
			else if c != me1 {
				tag.appendCharacter(c)
			}
		}
		else {
			if pc == mb1 {
				if c == mb2 {
					if data {
						v += data
						data = null
					}
					tag = new StringBuilder()
					tag.appendCharacter(pc)
					tag.appendCharacter(c)
				}
				else {
					if data == null:
						data = new StringBuilder()
					data.appendCharacter(pc)
					data.appendCharacter(c)
				}
			}
			else if c != mb1 {
				if data == null:
					data = new StringBuilder()
				data.appendCharacter(c)
			}
		}
		pc = c
	}
	if pc == mb1 {
		if data == null:
			data = new StringBuilder()
		data.appendCharacter(pc)
	}
	if data {
		v += data
		data = null
	}
	if tag {
		Log.error(logContext, "Unfinished tag: `" .. tag.toString() .. "'")
		return null
	}
	return v
}

func prepare as bool
{
	var str = assert text:
		Log.error(logContext, "No input string was specified.")
	assert tokens = tokenizeString(str)
	return true
}

func execute(vars as DynamicMap?, importDirs as vector<File>? = null) as string?
{
	assert tokens:
		Log.error(logContext, "TextTemplate has not been prepared")
	var result = new StringBuilder()
	assert doExecute(tokens, vars, result, importDirs)
	return result.toString()
}

func substituteVariables(orig as string?, vars as DynamicMap?) private as string?
{
	if orig == null:
		return orig
	if String.getIndexOfString(orig, "${") < 0:
		return orig
	var sb = new StringBuilder()
	var varbuf as StringBuilder?
	var flag = false
	foreach c in String.iterate(orig) {
		if varbuf {
			if c == '}' {
				var varname = varbuf.toString()
				if vars {
					var varcut as string?
					if String.getIndexOfCharacter(varname, '!') > 0 {
						var sp = Vector.iterate(String.split(varname, '!', 2))
						varname = String.safeString(sp.next())
						varcut = sp.next()
					}
					var r = getVariableValueString(vars, varname)
					if r {
						if String.isNotEmpty(varcut) {
							foreach cx in String.iterate(varcut) {
								var n = String.getLastIndexOfCharacter(r, cx)
								if n < 0:
									break
								r = String.getSubString(r, 0, n)
							}
						}
						sb.appendString(r)
					}
				}
				varbuf = null
			}
			else {
				varbuf.appendCharacter(c)
			}
			continue
		}
		if flag == true {
			flag = false
			if c == '{' {
				varbuf = new StringBuilder()
			}
			else {
				sb.appendCharacter('$')
				sb.appendCharacter(c)
			}
			continue
		}
		if c == '$' {
			flag = true
			continue
		}
		sb.appendCharacter(c)
	}
	return sb.toString()
}

func getVariableValue(vars as DynamicMap?, varname as string?) as dynamic?
{
	if vars == null || varname == null:
		return null
	var vv = vars.get(varname)
	if vv:
		return vv
	var ll = String.split(varname, '.')
	if Vector.getSize(ll) < 2:
		return null
	var nvar = Vector.popLastValue(ll)
	var cc as DynamicMap? = vars
	foreach vv2 in ll {
		if cc == null:
			return null
		var vv2o = cc.get(vv2)
		cc = vv2o as DynamicMap
		if cc == null && vv2o != null && vv2o is DynamicMapObject:
			cc = ((vv2o as! DynamicMapObject).toDynamicMap())
	}
	if cc && nvar:
		return cc.get(nvar)
	return null
}

func getVariableValueString(vars as DynamicMap?, varname as string) as string?
{
	var v = assert getVariableValue(vars, varname)
	if v is DynamicMap {
		if languagePreferences {
			foreach language in languagePreferences {
				var s = (v as! DynamicMap).getString(language)
				if s:
					return s
			}
		}
		else {
			var s = (v as! DynamicMap).getString("en")
			if s:
				return s
		}
		return null
	}
	return String.asValueOrNull(v)
}

func getVariableValueVector(vars as DynamicMap?, varname as string) as vector<dynamic>?
{
	var v = assert getVariableValue(vars, varname)
	if v is vector<dynamic>:
		return v as! vector<dynamic>
	if v is VectorObject<dynamic> {
		var vo = v as! VectorObject<dynamic>
		return vo.toVector()
	}
	if v is ArrayObject<dynamic> {
		var vo = v as! ArrayObject<dynamic>
		var vv = vo.toArray()
		return Vector.forArray(vv)
	}
	if v is DynamicVector {
		var dv = v as! DynamicVector
		return dv.toNonNullableVector()
	}
	return null
}

func handleBlock(vars as DynamicMap, tag as vector<string>?, data as vector<object>?, result as StringBuilder, importDirs as vector<File>?) as bool
{
	assert tag
	var tagname = Vector.getValue(tag, 0)
	if String.isEmpty(tagname):
		return false
	if tagname == "for" {
		var varname = Vector.getValue(tag, 1)
		var inword = Vector.getValue(tag, 2)
		var origvar = substituteVariables(Vector.getValue(tag, 3), vars)
		if String.isEmpty(varname) || String.isEmpty(origvar) || inword != "in" {
			Log.error(logContext, "Invalid for tag: `" .. StringUtil.combine(tag, ' ') .. "'")
			return false
		}
		var index = 0
		vars.setString("__for_first", "true")
		var vv = getVariableValueVector(vars, origvar)
		if vv: foreach o in vv {
			if index % 2 == 0 {
				vars.setString("__for_parity", "even")
			}
			else {
				vars.setString("__for_parity", "odd")
			}
			vars.setDynamic(varname, o)
			if doExecute(data, vars, result, importDirs) == false:
				return false
			if index == 0:
				vars.setString("__for_first", "false")
			index ++
		}
		vars.remove("__for_first")
		vars.remove("__for_parity")
		return true
	}
	if tagname == "if" {
		var lvalue as string? = Vector.getValue(tag, 1)
		if String.isEmpty(lvalue):
			return true
		var operator = Vector.getValue(tag, 2)
		if String.isEmpty(operator) {
			var varval = getVariableValue(vars, lvalue)
			if varval == null:
				return true
			if varval is VectorObject<object> {
				if Vector.isEmpty((varval as! VectorObject<object>).toVector()):
					return true
			}
			if varval is DynamicMap {
				var value = varval as! DynamicMap
				if value.getCount() < 1:
					return true
			}
			if varval is string {
				if String.isEmpty(varval as! string):
					return true
			}
			if varval is StringObject {
				if String.isEmpty((varval as! StringObject).toString()):
					return true
			}
			if doExecute(data, vars, result, importDirs) == false:
				return false
			return true
		}
		lvalue = substituteVariables(lvalue, vars)
		var rvalue = Vector.getValue(tag, 3)
		if String.isNotEmpty(rvalue):
			rvalue = substituteVariables(rvalue, vars)
		if lvalue == null || String.isEmpty(operator) || rvalue == null {
			Log.error(logContext, "Invalid if tag: `" .. StringUtil.combine(tag, ' ') .. "'")
			return false
		}
		if operator == "==" || operator == "=" || operator == "is" {
			if rvalue != lvalue:
				return true
			if doExecute(data, vars, result, importDirs) == false:
				return false
			return true
		}
		if operator == "!=" || operator == "not" {
			if rvalue == lvalue:
				return true
			if doExecute(data, vars, result, importDirs) == false:
				return false
			return true
		}
		Log.error(logContext, "Unknown operator `" .. operator .. "' in if tag: `" .. StringUtil.combine(tag, ' ') .. "'")
		return false
	}
	return false
}

func doExecute(data as vector<object>?, avars as DynamicMap?, result as StringBuilder, importDirs as vector<File>?) private as bool
{
	if data == null:
		return true
	var blockctr = 0
	var blockdata as vector<object>?
	var blocktag as vector<string>?
	var vars = avars
	if vars == null:
		vars = new DynamicMap()
	foreach o in data {
		var tagname as string?
		var words as vector<string>?
		var tagData = o as TagData
		if tagData {
			words = tagData.words
			if words {
				tagname = Vector.getValue(words, 0)
				if String.isEmpty(tagname) {
					Log.warning(logContext, "Empty tag encountered. Ignoring it.")
					continue
				}
			}
		}
		if not words:
			continue
		if tagname == "end" {
			blockctr --
			if blockctr == 0 && blockdata != null {
				if handleBlock(vars, blocktag, blockdata, result, importDirs) == false {
					Log.error(logContext, "Handling of a block failed")
					continue
				}
				blockdata = null
				blocktag = null
			}
		}
		if blockctr > 0 {
			if tagname == "for" || tagname == "if":
				blockctr ++
			if blockdata == null:
				blockdata = new vector<object>
			blockdata += o
			continue
		}
		if o is string {
			result.appendString(o as! string)
			continue
		}
		if o is StringObject {
			result.appendString((o as! StringObject).toString())
			continue
		}
		if tagname == "=" || tagname == "printstring" {
			var varname = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(varname) {
				var vv = getVariableValueString(vars, varname)
				if String.isNotEmpty(vv) {
					if this.type == TYPE_HTML:
						vv = HTMLString.sanitize(vv)
					result.appendString(vv)
				}
				else {
					var defaultvalue = substituteVariables(Vector.getValue(words, 2), vars)
					if String.isNotEmpty(defaultvalue) {
						if this.type == TYPE_HTML:
							defaultvalue = HTMLString.sanitize(defaultvalue)
						result.appendString(defaultvalue)
					}
				}
			}
		}
		else if tagname == "printRaw" {
			var varname = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(varname) {
				var vv = getVariableValueString(vars, varname)
				if String.isNotEmpty(vv) {
					result.appendString(vv)
				}
				else {
					var defaultvalue = substituteVariables(Vector.getValue(words, 2), vars)
					if String.isNotEmpty(defaultvalue):
						result.appendString(defaultvalue)
				}
			}
		}
		else if tagname == "catPath" {
			var hasSlash = false
			var n = 0
			foreach word in words {
				n++
				if n == 1:
					continue
				word = String.safeString(substituteVariables(word, vars))
				var it = String.iterateAsCharacterIterator(word)
				if n > 2 && hasSlash == false {
					result.appendCharacter('/')
					hasSlash = true
				}
				loop {
					var c = it.getNextChar()
					if c < 1:
						break
					if c == '/' {
						if hasSlash == false {
							result.appendCharacter(c)
							hasSlash = true
						}
					}
					else {
						result.appendCharacter(c)
						hasSlash = false
					}
				}
			}
		}
		else if tagname == "printJson" {
			var varname = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(varname) {
				var vv = getVariableValue(vars, varname)
				if vv:
					result.appendString(JSONEncoder.toString(vv))
			}
		}
		else if tagname == "printRichText" {
			var markup = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(markup) {
				var doc = RichTextDocument.forWikiMarkupString(markup)
				var html = doc.toHtml()
				result.appendString(html)
			}
		}
		else if tagname == "printDate" {
			var timestamp = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(timestamp) {
				var aslong = LongInteger.forStringOrThrowError(timestamp)
				var asstring = DateTime.forSeconds(aslong).toStringDate('/')
				result.appendString(asstring)
			}
		}
		else if tagname == "printTime" {
			var timestamp = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(timestamp) {
				var aslong = LongInteger.forStringOrThrowError(timestamp)
				var asstring = DateTime.forSeconds(aslong).toStringTime(':')
				result.appendString(asstring)
			}
		}
		else if tagname == "printDateTime" {
			var timestamp = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(timestamp) {
				var aslong = LongInteger.forStringOrThrowError(timestamp)
				var dt = DateTime.forSeconds(aslong)
				result.appendString(dt.toStringDate('/'))
				result.appendCharacter(' ')
				result.appendString(dt.toStringTime(':'))
			}
		}
		else if tagname == "import" {
			var type = Vector.getValue(words, 1)
			var filename = substituteVariables(Vector.getValue(words, 2), vars)
			if String.isEmpty(filename) {
				Log.warning(logContext, "Invalid import tag with empty filename")
				continue
			}
			var ff as File?
			if importDirs: foreach dir in importDirs {
				ff = File.forRelativePath(filename, dir)
				if ff.isFile():
					break
			}
			if ff == null || ff.isFile() == false {
				Log.error(logContext, "Unable to find file to import: `" .. filename .. "'")
				continue
			}
			Log.debug(logContext, "Attempting to import file: `" .. ff.getPath() .. "'")
			var content = ff.getContentsUTF8()
			if String.isEmpty(content) {
				Log.error(logContext, "Unable to read import file: `" .. ff.getPath() .. "'")
				continue
			}
			if type == "html" {
				content = HTMLString.sanitize(content)
			}
			else if type == "template" {
				var t = forString(logContext, content, markerBegin, markerEnd, this.type, importDirs)
				if t == null {
					Log.error(logContext, "Failed to parse imported template file: `" .. ff.getPath() .. "'")
					continue
				}
				if doExecute(t.getTokens(), vars, result, importDirs) == false {
					Log.error(logContext, "Failed to process imported template file: `" .. ff.getPath() .. "'")
					continue
				}
				content = ""
			}
			else if type == "raw" {
				nop // no processing needed
			}
			else {
				Log.error(logContext, "Unknown type for import: `" .. type .. "'. Ignoring the import.")
				continue
			}
			if String.isNotEmpty(content):
				result.appendString(content)
		}
		else if tagname == "escapeHtml" {
			var content = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isNotEmpty(content) {
				content = HTMLString.sanitize(content)
				if String.isNotEmpty(content):
					result.appendString(content)
			}
		}
		else if tagname == "set" {
			if Vector.getSize(words) != 3 {
				Log.warning(logContext, "Invalid number of parameters for set tag encountered: " .. String.forInteger(Vector.getSize(words)))
				continue
			}
			var varname = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isEmpty(varname) {
				Log.warning(logContext, "Empty variable name in set tag encountered.")
				continue
			}
			var newValue = substituteVariables(Vector.getValue(words, 2), vars)
			vars.setString(varname, newValue)
		}
		else if tagname == "assign" {
			if Vector.getSize(words) != 3 {
				Log.warning(logContext, "Invalid number of parameters for assign tag encountered: " .. String.forInteger(Vector.getSize(words)))
				continue
			}
			var varname = substituteVariables(Vector.getValue(words, 1), vars)
			if String.isEmpty(varname) {
				Log.warning(logContext, "Empty variable name in assign tag encountered.")
				continue
			}
			var vv = Vector.getValue(words, 2)
			if vv == "none" {
				vars.remove(varname)
			}
			else {
				vars.setDynamic(varname, getVariableValue(vars, vv))
			}
		}
		else if tagname == "for" || tagname == "if" {
			if blockctr == 0:
				blocktag = words
			blockctr ++
		}
		else if tagname == "end" {
			nop // already handled
		}
		else {
			if type == TYPE_HTML {
				onHTMLTag(vars, result, importDirs, tagname, words)
			}
			else if type == TYPE_JSON {
				onJSONTag(vars, result, importDirs, tagname, words)
			}
			else {
				nop // Ignore unknown tags so they can be used for extensions
			}
		}
	}
	return true
}

func basename(path as string) private as string?
{
	var v = ""
	foreach comp in String.split(path, '/') {
		if String.getLength(comp) > 0:
			v = comp
	}
	return v
}

func onHTMLTag(vars as DynamicMap?, result as StringBuilder, importDirs as vector<File>?, tagname as string?, words as vector<string>?) private
{
	if tagname == "link" && words {
		var path = substituteVariables(Vector.getValue(words, 1), vars)
		var text = substituteVariables(Vector.getValue(words, 2), vars)
		if String.isEmpty(text) && path:
			text = basename(path)
		if String.isEmpty(text):
			return
		result.appendString("<a href=\"" .. path .. "\"><span>" .. text .. "</span></a>")
		return
	}
}

func encodeJSONString(s as string?, sb as StringBuilder)
{
	assert s
	foreach c in String.iterate(s) {
		if c == '"' {
			sb.appendCharacter('\\')
		}
		else if c == '\\' {
			sb.appendCharacter('\\')
		}
		sb.appendCharacter(c)
	}
}

func onJSONTag(vars as DynamicMap?, result as StringBuilder, importDirs as vector<File>?, tagname as string?, words as vector<string>?) private
{
	if tagname == "quotedstring" && words {
		var string = substituteVariables(Vector.getValue(words, 1), vars)
		encodeJSONString(string, result)
	}
}
