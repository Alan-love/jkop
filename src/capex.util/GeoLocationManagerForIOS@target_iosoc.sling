
/*
* This file is part of Jkop
* Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

class is GeoLocationManager imports cape:

depend "plist:{ \"NSLocationWhenInUseUsageDescription\" : \"This app requires access to location services.\" }"
depend "plist:{ \"NSLocationAlwaysUsageDescription\" : \"This app requires access to location services.\" }"
depend "objc-header-m:<CoreLocation/CoreLocation.h>"
depend "objc-header-m:<UIKit/UIKit.h>"
// basetype !"CLLocation​Manager​Delegate" type implements

var instance static as this
var lastLocation as GeoLocation
var locationDelegate as LocationDelegate

func getInstance static as this
{
	if(instance == null) {
		instance = new this()
	}
	return(instance)
}

lang "objc" {{{
	CLLocationManager *locationManager;
}}}

ctor
{
	locationDelegate= new LocationDelegate(this)
	lang "objc" {{{
		locationManager = [[CLLocationManager alloc]init];
		locationManager.delegate = locationDelegate;
	}}}
}

func startLocationUpdates(callback as function<void,bool>) override
{
	PRINT("START Location UPDATES")
	var cb final = callback
	lang "objc" {{{
		CLAuthorizationStatus* authStatus = [CLLocationManager authorizationStatus];
		if (authStatus == kCLAuthorizationStatusAuthorizedWhenInUse) {
			NSLog(@"AUTHORIZED");
			if ([locationManager locationServicesEnabled]) {
				NSLog(@"Location Service Enabled");
				[locationManager startUpdatingLocation];
				cb(true);
			}
			else {
				NSLog(@"Location Service not Enabled");
				cb(false);
			}
		}
		else if (authStatus == kCLAuthorizationStatusNotDetermined){
			NSLog(@"Authorization​ Status​ NOT DETERMINED");
			[locationManager requestWhenInUseAuthorization];
		}
		else if (authStatus == kCLAuthorizationStatusDenied){
			NSLog(@"Authorization​ Status​ DENIED");
			// [locationManager requestWhenInUseAuthorization];
		}
		else if (authStatus == kCLAuthorizationStatusRestricted){
			NSLog(@"Authorization​ Status​ RESTRICTED");
			// [locationManager requestWhenInUseAuthorization];
		}
	}}}
}

func stopLocationUpdates override
{
	lang "objc" {{{
		[locationManager stopUpdatingLocation];
	}}}
}

func getLastLocation(callback as function<void, GeoLocation, Error>) override
{

	PRINT("ENTER getLastLocation")
	PRINT("LLLLLLLLLLLLLLLLastlocationnnnnnnnnnn")
	// PRINT(lastLocation.getLatitude())
	if(lastLocation != null) {
		PRINT("LOCATION NOT NULL")
		callback(lastLocation, null)
		// PRINT(lastLocation.getLatitude())
	}
	else {
		PRINT("location NULL!")
	}

}

class LocationDelegate implements !"CLLocationManagerDelegate"
{
	ctor(parent as GeoLocationManagerForIOS)
	{
		geoLocationManager = parent
	}
	var geoLocationManager as GeoLocationManagerForIOS
	lang "objc" {{{
		// NSLog(@"fdgdfgs");
	- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations
		{
			CLLocation *location = [locations lastObject];
			NSLog(@"%f", location.coordinate.latitude);
			NSLog(@"%f", location.coordinate.longitude);
			[geoLocationManager setLocation:location.coordinate.latitude lon:location.coordinate.longitude];
		}
	- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
				NSLog(@"Error %@", error);
	}
	}}}	
}

func setLocation(lat as double, lon as double)
{	
	// PRINT("*********************")
	// PRINT(lat)
	// PRINT(lon)
	lastLocation = new GeoLocation()
	lastLocation.setLatitude(lat)
	lastLocation.setLongitude(lon)
}