
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.data.sql
import jk.log

class is SQLDatabase abstract:

meta
{
	description [[
		Microsoft SQL Server database driver.
	]]
}

pvar databaseName as string

func instance private static as this
{
	IFDEF "target_netx" {
		return new MSSQLDatabaseForDotNet()
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func forConnectionStringSync(connectionString as string, logContext as LoggingContext) static as this
{
	assert String.isNotEmpty(connectionString)
	var ss = String.split(connectionString, ':', 4)
	assert ss && Vector.getSize(ss) == 4
	return connectSync(ss[0], ss[1], ss[2], ss[3], logContext)
}

func connectSync(serverAddress as string, username as string, password as string, database as string, logger as LoggingContext = null) static as this
{
	assert String.isNotEmpty(serverAddress) && String.isNotEmpty(username) && String.isNotEmpty(password) && String.isNotEmpty(database)
	var v = assert instance()
	v.setLogger(logger)
	assert v.initializeSync(serverAddress, username, password, database)
	return v
}

func getDatabaseTypeId override as string:
	return "mssql"

func initializeSync(serverAddress as string, username as string, password as string, database as string) virtual as bool:
	return true

func querySingleRowSync(stmt as SQLStatement) override async as DynamicMap
{
	var it = assert await querySync(stmt)
	var v as DynamicMap #force = it.next()
	it.close()
	return v
}

func tableExistsSync(table as string) override async as bool
{
	assert String.isNotEmpty(table) && String.isNotEmpty(databaseName)
	var stmt = assert prepareSync("SELECT TABLE_NAME FROM information_schema.tables WHERE table_type = 'BASE TABLE' AND table_name = ? LIMIT 1;")
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	var sr = assert await querySingleRowSync(stmt)
	return String.equals(table, sr.getString("TABLE_NAME"))
}

func queryAllTableNames(callback as function<void, vector>) override async
{
	var stmt = assert prepareSync("SELECT TABLE_NAME FROM information_schema.tables WHERE table_type = 'BASE TABLE';"):
		callback(null)
	await query(stmt, func(it as SQLResultSetIterator) {
		assert it:
			callback(null)
		var v = new vector
		loop {
			var vv = it.next()
			if not vv:
				break
			v += vv.getString("TABLE_NAME")
		}
		it.close()
		callback(v)
	})
}

func queryAllTableNamesSync override async as vector
{
	assert String.isNotEmpty(databaseName)
	var stmt = assert prepareSync("SELECT TABLE_NAME FROM information_schema.tables WHERE table_type = 'BASE TABLE';")
	var it = assert await querySync(stmt)
	var v = new vector
	loop {
		var vv = it.next()
		if not vv:
			break
		v += vv.getString("TABLE_NAME")
	}
	it.close()
	return v
}

func columnToCreateString(cc as SQLTableColumnInfo) private as string
{
	var sb = new StringBuilder()
	var columnName = cc.getName()
	sb.appendString(columnName)
	sb.appendCharacter(' ')
	var tt = cc.getType()
	if tt == SQLTableColumnInfo.TYPE_INTEGER_KEY {
		sb.appendString("INTEGER AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")")
	}
	else if tt == SQLTableColumnInfo.TYPE_INTEGER {
		sb.appendString("INTEGER")
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG_KEY {
		sb.appendString("BIGINT AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")")
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG {
		sb.appendString("BIGINT")
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING {
		sb.appendString("VARCHAR(255)")
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING_KEY {
		sb.appendString("VARCHAR(255), PRIMARY KEY (" .. columnName .. ")")
	}
	else if tt == SQLTableColumnInfo.TYPE_TEXT {
		sb.appendString("LONGTEXT")
	}
	else if tt == SQLTableColumnInfo.TYPE_BLOB {
		sb.appendString("LONGBLOB")
	}
	else if tt == SQLTableColumnInfo.TYPE_DOUBLE {
		sb.appendString("REAL")
	}
	else {
		Log.error(getLogger(), "Unknown column type: " .. String.forInteger(tt))
		sb.appendString("UNKNOWN")
	}
	return sb.toString()
}

func prepareCreateTableStatementSync(table as string, columns as vector<SQLTableColumnInfo>) override as SQLStatement
{
	assert String.isNotEmpty(table) && columns
	var sb = new StringBuilder()
	sb.appendString("CREATE TABLE ")
	sb.appendString(table)
	sb.appendString(" (")
	var first = true
	foreach column as SQLTableColumnInfo in columns {
		if not first:
			sb.appendCharacter(',')
		sb.appendCharacter(' ')
		sb.appendString(columnToCreateString(column))
		first = false
	}
	sb.appendString(" );")
	return prepareSync(sb.toString())
}

func prepareDeleteTableStatementSync(table as string) override as SQLStatement
{
	assert String.isNotEmpty(table)
	var sb = new StringBuilder()
	sb.appendString("DROP TABLE ")
	sb.appendString(table)
	sb.appendString(";")
	return prepareSync(sb.toString())
}

func getLastInsertIdSync(table as string) override async as long
{
	var v = assert await querySingleRowSync(prepareSync("SELECT IDENT_CURRENT('" .. table .. "') AS id;"))
	return v.getLongInteger("id")
}

func getPrimaryKeyColumnNameSync(table as string) override async as string
{
	var v = assert await querySingleRowSync(prepareSync("SELECT COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME LIKE 'PK_%' AND TABLE_NAME='" .. table .. "';"))
	return v.getString("COLUMN_NAME")
}

func getIdentityColumnNameSync(table as string) override async as string
{
	var v = assert await querySingleRowSync(prepareSync("SELECT name FROM sys.columns WHERE object_id = object_id('" .. table .. "') AND is_identity=1;"))
	return v.getString("name")
}

func columnExistsSync(table as string, name as string) override async as bool:
	return false

func isColumnTypeSameSync(table as string, column as SQLTableColumnInfo) override async as bool:
	return false

func prepareCreateColumnStatementSync(table as string, column as SQLTableColumnInfo) stub override as SQLStatement
func prepareUpdateColumnTypeStatementSync(table as string, column as SQLTableColumnInfo) stub override as SQLStatement
