
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.os
import jk.fs

class:

func getTemporaryDirectoryOrNull static as File?
{
	IFDEF "target_dotnet_cs" {
		return File.forPath(lang "cs" as string {{{ System.IO.Path.GetTempPath() }}})
	}
	ELSE IFDEF "target_objc" {
		return File.forPath("/tmp")
	}
	ELSE IFDEF "target_swift" {
		return File.forPath("/tmp")
	}
	ELSE {
		if OS.isLinux() || OS.isMacOS():
			return File.forPath("/tmp")
		if OS.isWindows() {
			var tempDir = EnvironmentVariable.get("TEMP")
			if String.isEmpty(tempDir):
				tempDir = EnvironmentVariable.get("TMP")
			if String.isNotEmpty(tempDir):
				return File.forPath(tempDir)
		}
		return null
	}
}

func getTemporaryDirectoryOrThrowError static throws Exception as File
{
	var v = getTemporaryDirectoryOrNull()
	if not v:
		Error.throw("failedToFindTemporaryDirectory")
	return v
}

func getHomeDirectoryOrNull static as File?
{
	IFDEF "target_dotnet_cs" {
		var v as string? = null
		lang "cs" {{{
			var hd = System.Environment.GetEnvironmentVariable("HOMEDRIVE");
			if(hd != null) {
				var hp = System.Environment.GetEnvironmentVariable("HOMEPATH");
				if(hp != null) {
					v = hd + System.IO.Path.DirectorySeparatorChar + hp;
				}
			}
		}}}
		if v == null {
			lang "cs" {{{
				var h = System.Environment.GetEnvironmentVariable("HOME");
				if(h != null) {
					v = h;
				}
			}}}
		}
		if not v:
			return null
		return File.forPath(v)
	}
	ELSE IFDEF "target_objc" {
		return File.forPath("~")
	}
	ELSE IFDEF "target_swift" {
		return File.forPath("~")
	}
	ELSE {
		var dirname = EnvironmentVariable.get("HOME")
		if String.isNotEmpty(dirname):
			return File.forPath(dirname)
		return null
	}
}

func getHomeDirectoryOrThrowError static throws Exception as File
{
	var v = getHomeDirectoryOrNull()
	if not v:
		Error.throw("failedToFindHomeDirectory")
	return v
}

func getProgramFilesDirectory static as File?:
	return null

func getProgramFilesX86Directory static as File?:
	return null

func getApplicationsDirectory static as File?
{
	IFDEF "target_browser_js" {
		return null
	}
	ELSE IFDEF "target_android" {
		return null
	}
	ELSE IFDEF "target_darwin" {
		var v = File.forPath("/Applications")
		if v.isDirectory() == false:
			v = null
		return v
	}
	ELSE IFDEF "target_windows" {
		return null
	}
	ELSE {
		if OS.isMacOS() {
			var v = File.forPath("/Applications")
			if v.isDirectory() == false:
				return null
			return v
		}
		return null
	}
}
