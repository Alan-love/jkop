
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func getAll static as map<string,string>
{
	IFDEF "target_kotlin" {
		var vars = new map<string,string>
		lang "kotlin" {{{
			val vs = java.lang.System.getenv()
			vs!!.forEach { (a, b) -> vars!!.set(a, b) }
		}}}
		return vars
	}
	ELSE IFDEF "target_sushi" {
		var v = new map<string,string>
		var envs = lang "lua" as vector<string> {{{ _os:get_all_environment_variables() }}}
		if envs: foreach env in envs {
			var comps = String.split(env, '=', 2)
			var key = Vector.getValue(comps, 0)
			var val = Vector.getValue(comps, 1)
			if not key:
				continue
			if not val:
				val = ""
			Map.set(v, key, val)
		}
		return v
	}
	ELSE IFDEF "target_node_js" {
		var v = new map<string,string>
		lang "js" {{{
			for(const key in process.env) {
				v.set(key, process.env[key]);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_browser" {
		return new map<string,string>
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" as map<string,string> {{{ MapValue.forData(ProcessInfo.processInfo.environment) }}}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func get(key as string) static as string?
{
	IFDEF "target_dotnet_cs" {
		var v as string?
		lang "cs" (key) {{{
			v = System.Environment.GetEnvironmentVariable(key);
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v as string?
		lang "java" (key) {{{
			v = java.lang.System.getenv(key);
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		var v as string?
		lang "objc" (key) {{{
			v = [[[NSProcessInfo processInfo] environment] objectForKey:key];
		}}}
		return v
	}
	ELSE IFDEF "target_node_js" {
		var v as string?
		lang "js" (key) {{{
			v = process.env[key];
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v as string?
		lang "kotlin" (key) {{{
			v = java.lang.System.getenv(key)
		}}}
		return v
	}
	ELSE IFDEF "target_stdlua" {
		var v as string?
		lang "lua" (key) {{{
			v = os.getenv(key)
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		var v as string?
		lang "lua" (key) {{{
			v = _os:get_environment_variable(key)
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (key) as string? {{{ ProcessInfo.processInfo.environment[key] }}}
	}
	ELSE {
		return Map.getValue(getAll(), key)
	}
}

func require(key as string) static throws Exception as string
{
	var v = get(key)
	if not v:
		Error.throw("environmentVariableIsNotSet", key)
	return v
}

func set(key as string, val as string?) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (key, val) {{{
			System.Environment.SetEnvironmentVariable(key, val);
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" (key, val) {{{
			_os:set_environment_variable(key, val)
		}}}
	}
	ELSE IFDEF "target_node_js" {
		lang "js" (key, val) {{{
			process.env[key] = val;
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (key, val) {{{
			setenv(key, val ?? "", 1)
		}}}
	}
	ELSE IFDEF "target_browser" {
		nop key
		nop val
		ERROR NOT_SUPPORTED
	}
	ELSE {
		nop key
		nop val
		ERROR NOT_IMPLEMENTED
	}
}

func unset(key as string) static
{
	IFDEF "target_node_js" {
		lang "js" (key) {{{
			delete process.env[key];
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (key) {{{
			unsetenv(key)
		}}}
	}
	ELSE IFDEF "target_browser" {
		nop key
		ERROR NOT_SUPPORTED
	}
	ELSE {
		nop key
		ERROR NOT_IMPLEMENTED
	}
}
