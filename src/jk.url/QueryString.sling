
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func parse(queryString as string) static as map<string,string>
{
	var v = new map<string,string>
	if String.isEmpty(queryString):
		return v
	foreach qs in String.split(queryString, '&') {
		if String.isEmpty(qs):
			continue
		if String.getIndexOfCharacter(qs, '=') < 0 {
			Map.set(v, qs, "")
			continue
		}
		var qsps = String.split(qs, '=', 2)
		var key = Vector.getValue(qsps, 0)
		var val = Vector.getValue(qsps, 1)
		if String.isNotEmpty(key):
			Map.set(v, URLDecoder.decode(key), URLDecoder.decode(val ?? ""))
	}
	return v
}

func encode(queryString as map<string,string>) static as string
{
	var str = new StringBuilder()
	var first = true
	var keys = Map.getKeys(queryString)
	foreach key as string in keys {
		if String.isEmpty(key):
			continue
		var val = Map.getValue(queryString, key)
		if not val:
			val = ""
		if not first:
			str.appendString("&")
		str.appendString(URLEncoder.encode(key))
		str.appendCharacter('=')
		str.appendString(URLEncoder.encode(val))
		first = false
	}
	return str.toString()
}

func appendDynamicVectorToFormData(sb as StringBuilder, key as string, items as DynamicVector) private static
{
	foreach item in items.toVectorOfDynamicMaps() {
		var index = 0
		foreach ikey in item.getKeys() {
			if sb.count() > 0:
				sb.appendString("&")
			sb.appendString(key)
			sb.appendString("[")
			sb.appendInteger(index)
			sb.appendString("]")
			sb.appendString("[")
			sb.appendString(ikey)
			sb.appendString("]")
			sb.appendString("=")
			var rr = item.getString(ikey)
			if not rr:
				rr = ""
			sb.appendString(URLEncoder.encode(rr))
		}
		index++
	}
}

func appendDynamicMapToFormData(sb as StringBuilder, key as string, map as DynamicMap) private static
{
	foreach ikey in map.getKeys() {
		if sb.count() > 0:
			sb.appendString("&")
		sb.appendString(key)
		sb.appendString("[")
		sb.appendString(ikey)
		sb.appendString("]")
		sb.appendString("=")
		var rr = map.getString(ikey)
		if not rr:
			rr = ""
		sb.appendString(URLEncoder.encode(rr))
	}
}

func encodeDynamicMapToString(data as DynamicMap) static as string
{
	var sb = new StringBuilder()
	foreach key in data.iterateKeys() {
		var value = data.getDynamic(key)
		if var valueDynamicVector = value as DynamicVector {
			appendDynamicVectorToFormData(sb, key, valueDynamicVector)
		}
		else if var valueDynamicMap = value as DynamicMap {
			appendDynamicMapToFormData(sb, key, valueDynamicMap)
		}
		else {
			if sb.count() > 0:
				sb.appendString("&")
			sb.appendString(key)
			sb.appendString("=")
			var vs = String.asValueOrEmptyString(value)
			sb.appendString(URLEncoder.encode(vs))
		}
	}
	return sb.toString()
}

func encodeDynamicMapToBuffer(data as DynamicMap) static as buffer:
	return String.toUTF8Buffer(encodeDynamicMapToString(data))
