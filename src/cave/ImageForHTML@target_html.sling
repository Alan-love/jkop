
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image imports cape:

var image public as object

func getSource as string
{
	if(image != null) {
		return(lang "js" string {{{ this.image.src }}})
	}
	return(null)
}

func getPixelWidth override as int
{
	if(image == null) {
		return(0)
	}
	return(lang "js" int {{{ this.image.width }}})
}

func getPixelHeight override as int
{
	if(image == null) {
		return(0)
	}
	return(lang "js" int {{{ this.image.height }}})
}

func scaleToSize(w as int, h as int) override as Image
{
	ERROR("Not implemented")
	return(null)
}

func scaleToWidth(w as int) override as Image
{
	ERROR("Not implemented")
	return(null)
}

func scaleToHeight(h as int) override as Image
{
	ERROR("Not implemented")
	return(null)
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	ERROR("Not implemented")
	return(null)
}

func toJPGData override as buffer
{
	ERROR("Not implemented")
	return(null)
}

func toPNGData override as buffer
{
	if(image == null) {
		return(null)
	}
	var canvas #used = HTMLDOM.createElement("canvas")
	var dataurl as string
	lang "js" {{{
		canvas.width = this.getPixelWidth();
		canvas.height = this.getPixelHeight();
		var ctx = canvas.getContext("2d");
		ctx.drawImage(this.image, 0, 0);
		dataurl = ctx.canvas.toDataURL();
	}}}
	var buffer #used = capex.Base64Decoder.decode(getBase64String(dataurl))
	return(null)
}

func toRGBAData override as buffer
{
	ERROR("Not implemented")
	return(null)
}

func releaseImage override
{
	ERROR("Not implemented")
}

func getBase64String(url as string) private as string
{
	if(String.startsWith(url, "data") == false) {
		return(null)
	}
	var str = String.getSubString(url, String.indexOf(url, ',') + 1)
	return(str)
}
