
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import [magical:UIKit]
import [magical:UserNotifications]
import [magical:FirebaseAnalytics]
import [magical:FirebaseCore]
import [magical:FirebaseMessaging]

class implements [magical:MessagingDelegate] implements [magical:UNUserNotificationCenterDelegate]:

pvar listener as FCMMessagingListener?

lang "swift" (onFCMTokenReceived) {{{
	public func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String) {
		print("Firebase registration token: \(fcmToken)")
		self.onFCMTokenReceived(fcmToken)
	}
}}}

func onFCMTokenReceived(fcmToken as string) private
{
	description [[
		Handles a received FCM token, passing it to the configured instance implementing
		the FCMMessagingListener interface, if there is.
	]]
	assert listener
	listener.onFCMTokenReceived(fcmToken)
}

var instance static as this?

func configure(application as [magical:UIApplication], listener as FCMMessagingListener) static
{
	description [[
		Configures the Firebase Cloud Messaging for iOS push notification.
	]]
	assert not instance
	instance = new this()
	instance.setListener(listener)
	lang "swift" (application, instance) {{{
		FirebaseApp.configure()
		Messaging.messaging().delegate = instance
		if #available(iOS 10.0, *) {
			// For iOS 10 display notification (sent via APNS)
			UNUserNotificationCenter.current().delegate = JkUtilFcmFCMMessaging()
			let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
			UNUserNotificationCenter.current().requestAuthorization(
				options: authOptions,
				completionHandler: {_, _ in })
			} else {
			let settings: UIUserNotificationSettings = UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)
			application.registerUserNotificationSettings(settings)
		}
		application.registerForRemoteNotifications()
	}}}
}
