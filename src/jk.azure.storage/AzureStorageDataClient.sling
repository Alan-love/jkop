
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class abstract:

interface ReadableStream public
{
	func readAsString async as string
	func readAsBuffer async as buffer
}

model CreateBlobContainerModel public
{
	containerName as string
	containerAccess as string
	containerMetadata as DynamicMap
}

model AccessPolicy public
{
	policyId as string
	expiryAsDays as int
	read as bool
	add as bool
	create as bool
	write as bool
	delete as bool
	list as bool
}

model UpdateBlobContainerModel public
{
	containerName as string
	access as string
	accessPolicy as AccessPolicy
}

model BlobContainerProperties public
{
	metadata as DynamicMap
	etag as string
	lastModified as string
	leaseDuration as string
	leaseState as string
	leaseStatus as string
	clientRequestId as string
	requestId as string
	version as string
	date as string
	blobPublicAccess as string
	hasImmutabilityPolicy as bool
	hasLegalHold as bool
	defaultEncryptionScope as string
	denyEncryptionScopeOverride as bool
	isImmutableStorageWithVersioningEnabled as bool
}

model BlobProperties public
{
	name as string
	snapshot as string
	versionId as string
	isCurrentVersion as bool
	createdOn as string
	lastModified as string
	contentLength as int
	contentType as string
	contentEncoding as string
	blobType as string
	accessTier as string
}

func forAccount(account as string, accountKey as string) static as this
{
	IFDEF "target_node_js" {
		return new AzureStorageDataClientForNodeJS() {
			account account
			accountKey accountKey
		}
	}
	ELSE {
		ERROR "notImplemented"
	}
}

func createBlobContainerIfNotExists(properties as CreateBlobContainerModel) abstract async
func getBlobContainerProperties(containerName as string) abstract async as BlobContainerProperties?
func getContainerBlobsList(containerName as string, includeSnapshots as bool, includeVersions as bool) abstract async as AsyncIterator<BlobProperties>
func updateBlobContainerAccessPolicy(properties as UpdateBlobContainerModel) abstract async
func deleteBlobContainer(containerName as string) abstract async
func upload(containerName as string, blobName as string, blobData as buffer, forceUpdate as bool) abstract async
func uploadFile(containerName as string, blobData as File, forceUpdate as bool = false) abstract async
func uploadStream(containerName as string, blobData as File, forceUpdate as bool = false) abstract async
func uploadPageBlob(containerName as string, blobData as File, offset as int, pageSize as int, forceUpdate as bool) abstract async
func uploadAppendBlob(containerName as string, blobData as File, forceUpdate as bool) abstract async
func getBlobProperties(containerName as string, blobName as string) abstract async as BlobProperties
func downloadAsReadableStream(containerName as string, blobName as string) abstract async as ReadableStream
func downloadAsBuffer(containerName as string, blobName as string) abstract async as buffer
func downloadAsFile(containerName as string, blobName as string, directory as File) abstract async
func deleteBlob(containerName as string, blobName as string) abstract async
