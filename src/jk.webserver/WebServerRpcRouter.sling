
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import jk.base64

class is WebServerRouter:

ctor:
	addHealthCheckRoute()

func decodeBase64StringOrThrowError(data as string) as buffer:
	return Base64Decoder.decode(data)

func decodeBase64StringOrReturnNull(data as string?) as buffer?
{
	if not data:
		return null
	return Base64Decoder.decode(data)
}

func addFunction(name as string, handler as function<promise<dynamic?>,DynamicMap>)
{
	addRoute("POST", "/func/" .. name, func(req as WebServerRequest, vars as DynamicMap) async {
		try {
			var body = await req.getBodyAsBuffer()
			var data = JSONParser.parseBufferAsMap(body)
			if ctx.isInDebugMode():
				Log.debug(ctx, "Received : [ Method Name: " .. name .. " ]" .. " [ Paramameters : `" .. JSONEncoder.toString(data)  .. " `] ")
			var v = await handler(data)
			if ctx.isInDebugMode() {
				var response as string?
				if v {
					response = JSONEncoder.toString(v)
				}
				else {
					response = "null"
				}
				Log.debug(ctx, "Responding : [ Method Name: " .. name .. " ]" .. " [ Result : `" .. response  .. " `] ")
			}
			var rdata = String.toUTF8Buffer(JSONEncoder.toString(new map {
				status "ok"
				data v
			}))
			req.setResponseStatus(200)
			req.setResponseHeader("Content-Type", "application/json")
			await req.writeResponseData(rdata)
			await req.endResponse()
		}
		catch e {
			Log.error(ctx, String.asValueOrEmptyString(e))
			req.setResponseStatus(500)
			req.setResponseHeader("Content-Type", "application/json")
			if var ee = e as ExceptionWithError:
				await req.writeResponseData(String.toUTF8Buffer(JSONEncoder.toString(new map {
					status "error"
					errorCode ee.getErrorCode()
					errorDetail String.asValueOrEmptyString(ee.getErrorDetail())
				})))
			await req.endResponse()
		}
	})
}
