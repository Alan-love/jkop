
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class abstract:

class JcoComponentChildIterator is JcoChildIterator
{
	func forComponent(component as JcoComponent) static as this:
		return new this() {
			component component
			children component.children
		}

	prop component as JcoComponent
	prop children as vector<object>

	var position = 0

	func peek implement as object?:
		return Vector.getValue(children, position)

	func step implement:
		position++

	func insert(child as object) implement throws Exception
	{
		Vector.insertValue(children, child, position)
		position++
		component.update()
	}

	func remove implement throws Exception
	{
		Vector.removeIndex(children, position)
		component.update()
	}
}

var stack = new Stack<JcoChildIterator>()

func finalize virtual throws Exception:
	endChild()

func peekNextChild virtual as object?
{
	var iterator = stack.peek()
	if not iterator:
		return null
	return iterator.peek()
}

func stepChild virtual throws Exception
{
	var iterator = stack.peek()
	if not iterator:
		Error.throw("noIteratorInStack")
	iterator.step()
}

func getChildIterator(container as object) virtual as JcoChildIterator?
{
	if container is JcoComponent:
		return JcoComponentChildIterator.forComponent(container as! JcoComponent)
	return null
}

func pushContainer(container as object) throws Exception
{
	var iterator = getChildIterator(container)
	if not iterator:
		Error.throw("noChildIteratorForContainer", container)
	stack.push(iterator)
}

func popContainer:
	stack.pop()

func insertChild(child as object) throws Exception
{
	if child is vector<object> {
		foreach realChild as object in child as! vector<object>:
			insertChild(realChild)
		return
	}
	var iterator = stack.peek()
	if not iterator:
		Error.throw("noParentElementToInsertChildTo")
	iterator.insert(child)
}

func removeRemainingChildren throws Exception
{
	var iterator = stack.peek()
	if not iterator:
		return
	loop {
		var child = iterator.peek()
		if not child:
			break
		iterator.remove()
	}
}

func createCustomElement(type as typeinfo) virtual throws Exception as object:
	return Reflection.createClassInstanceByTypeinfo(type)

func startCustomElement(type as typeinfo) virtual throws Exception as object
{
	var next = peekNextChild()
	if next && Reflection.isInstanceOf(next, type) {
		stepChild()
		pushContainer(next)
		return next
	}
	var v = createCustomElement(type)
	insertChild(v)
	pushContainer(v)
	return v
}

func endComponent virtual throws Exception:
	endChild()

func startHtmlElement(name as string) virtual throws Exception as JcoHtmlElement:
	Error.throw("htmlElementsAreNotSupported", name)

func endHtmlElement virtual throws Exception:
	endChild()

func endChild virtual throws Exception
{
	removeRemainingChildren()
	popContainer()
}

func addContent(content as string) virtual throws Exception:
	Error.throw("elementContentIsNotSupported", content)

func addObject(object as object) virtual throws Exception
{
	var next = peekNextChild()
	if next == object {
		stepChild()
	}
	else {
		insertChild(object)
	}
}
