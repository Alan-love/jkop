
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is JcoComponent #jco:

prop componentWideNarrowThreshold as string = "250mm"

var wasWide = false

func isWide as bool
{
	if getCurrentWidthPixels() > asPixels(componentWideNarrowThreshold):
		return true
	return false
}

func isNarrow as bool:
	return not isWide()

func onComponentResized virtual
{
	var isWideNow = isWide()
	if wasWide != isWideNow {
		wasWide = isWideNow
		update()
	}
}

IFDEF "target_browser_js"
{
	var observer as dynamic?

	func onMounted override throws Exception
	{
		base.onMounted()
		var oo = new ([magical:ResizeObserver])(func {
			onComponentResized()
		})
		oo.observe!(this)
		observer = oo
	}

	func onUnmounted override throws Exception
	{
		base.onUnmounted()
		if observer {
			observer.disconnect!()
			observer = null
		}
	}
}

ELSE IFDEF "target_ios_swift"
{
	func layoutSubviews override
	{
		base.layoutSubviews()
		onComponentResized()
	}
}
