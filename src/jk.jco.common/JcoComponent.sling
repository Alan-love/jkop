
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.gui
import jk.gfx

class #jco:

prop children:childrenValue as vector<object>
{
	get {
		if not childrenValue:
			childrenValue = new vector<object>
		return childrenValue
	}
}

prop width as string? #content
prop minWidth as string? #content
prop maxWidth as string? #content
prop widthRequest as string? #content
prop height as string? #content
prop minHeight as string? #content
prop maxHeight as string? #content
prop heightRequest as string? #content
prop customData as DynamicMap?
prop context as GuiApplicationContext?

prop ctx as LoggingContext
{
	get {
		var gax = try? getGuiApplicationContext()
		if gax:
			return gax
		return new SimpleLoggingContext()
	}
}

var application as JcoApplication?
var isMounted = false

func getApplicationOrNull as JcoApplication?:
	return application

func getApplication throws Exception as JcoApplication
{
	var v = getApplicationOrNull()
	if not v:
		Error.throw("notPartOfJcoApplication", this)
	return v
}

func getGuiApplicationContext throws Exception as GuiApplicationContext
{
	if context:
		return context
	foreach ppc in iterateParentComponents() {
		var v = ppc.context
		if v:
			return v
	}
	Error.throw("noGuiApplicationContext", this)
}

func executeAndHandleExceptions(operation as function<() throws Exception>)
{
	try {
		operation()
	}
	catch e as Exception {
		Log.error(ctx, e.toString())
	}
}

func update
{
	if isMounted:
		JcoComponentUpdateManager.setNeedsUpdate(this)
}

func composeComponent(context as JcoComposeContext) virtual throws Exception:
	nop

func onCreated
{
	try {
		IFDEF "target_browser_js" {
			shadow = lang "js" as object {{{ this.attachShadow({ mode: 'open' }) }}}
		}
	}
	catch e {
		println e
	}
}

func onComposed virtual throws Exception:
	nop

func onConnectedToApplication(application as JcoApplication) virtual:
	nop

func onDisconnectedFromApplication(application as JcoApplication) virtual:
	nop

func onMounted virtual throws Exception
{
	application = findAncestorOfType(typeinfo JcoApplication) as JcoApplication
	if application:
		onConnectedToApplication(application)
	update()
}

func onUnmounted virtual throws Exception
{
	if application {
		onDisconnectedFromApplication(application)
		application = null
	}
}

func composeChildren(context as JcoComposeContext) throws Exception
{
	foreach child in children:
		context.addObject(child)
}

func getParentComponents as vector<this>
{
	IFDEF "target_browser_js" {
		var v = new vector<this>
		var n = 0
		var pp = getParentElement(this)
		while pp {
			if pp is this:
				v += pp as! this
			pp = getParentElement(pp)
			n++
			if n > 1000 {
				println "tooManyParentElements"
				break
			}
		}
		return v
	}
	ELSE IFDEF "target_ios_swift" {
		var v = new vector<this>
		var view as [magical:UIView]? = lang "swift" as [magical:UIView]? {{{ self.superview }}}
		while view {
			var comp = view as this
			if comp:
				v += comp
			view = lang "swift" as [magical:UIView]? {{{ view!.superview }}}
		}
		return v
	}
	ELSE IFDEF "target_headless" {
		ERROR NOT_SUPPORTED
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func iterateParentComponents as Iterator<this>:
	return Vector.iterate(getParentComponents())

func findAncestorOfType(type as typeinfo) as object?
{
	foreach v in iterateParentComponents() {
		if Reflection.isInstanceOf(v, type):
			return v
	}
	return null
}

func executeUpdate throws Exception
{
	IFDEF "target_browser_js" {
		var shadowRoot = this.shadow
		if not shadowRoot:
			Error.throw("noShadowRoot")
		var context = JcoComposeContextForBrowserJS.forRoot(shadowRoot)
		var css = getCssString()
		if String.isNotEmpty(css):
			compose to context {
				<style>@{css}</style>
			}
		try {
			composeComponent(context)
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
		}
		context.finalize()
		onComposed()
	}
	ELSE IFDEF "target_ios_swift" {
		var pfs0 = getPreferredSize()
		var context = JcoComposeContextForIos.forRoot(this)
		try {
			composeComponent(context)
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
		}
		context.finalize()
		onComposed()
		var pfs1 = getPreferredSize()
		if lang "swift" (pfs0, pfs1) as bool {{{ pfs0.width != pfs1.width || pfs0.height != pfs1.height }}} {
			lang "swift" {{{
				var v: UIView? = self
				while v != nil {
					v!.setNeedsLayout()
					v = v!.superview
				}
			}}}
		}
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

IFDEF "target_browser_js"
{
	extend [magical:HTMLElement]

	var shadow as object?
	var mutationObserver as [magical:MutationObserver]?

	ctor:
		nop

	func asElement as JcoHtmlElement:
		return new JcoHtmlElementForBrowserJS() {
			element this
		}

	func lengthToHtml(value as string) as string
	{
		if String.isEmpty(value):
			return "0px"
		if String.endsWith(value, "%"):
			return value
		return Length.forString(value).toPixelString(getPpi())
	}

	func colorToHtml(value as string) as string
	{
		if String.isEmpty(value):
			return "black"
		return Color.forString(value).toHtmlCompatibleString()
	}

	func fontToHtml(font as string) as string
	{
		if String.isEmpty(font):
			return "Arial 14px"
		return FontDescription.parse(font).toCssCompatibleString(getPpi())
	}

	func getParentElement(element as object) as object?
	{
		var shadow = lang "js" (element) as object? {{{ element.getRootNode() }}}
		if not shadow:
			return null
		if lang "js" (shadow) as bool {{{ !shadow }}}:
			return null
		var host = lang "js" (shadow) as object? {{{ shadow.host }}}
		if not host:
			return null
		if lang "js" (host) as bool {{{ !host }}}:
			return null
		return host
	}

	func onAttributeValueChanged(name as string, oldValue as string?, newValue as string?) virtual:
		nop

	func initializeMutationObserver private
	{
		var callback = func(mutations as vector<dynamic>, observer as dynamic) {
			foreach mutation in mutations {
				if String.asValueOrNull(mutation.type) == "attributes" {
					var name = String.asValueOrEmptyString(mutation.attributeName)
					var newValue = String.asValueOrNull(mutation.target?.attributes?[name]?.value)
					var oldValue = String.asValueOrNull(mutation.oldValue)
					onAttributeValueChanged(name, oldValue, newValue)
				}
			}
		}
		var mob = new ([magical:MutationObserver])(callback)
		mob.observe!(this, {
			attributes true
			attributeOldValue true
		})
	}

	func shutdownMutationObserver private
	{
		var mob = mutationObserver
		mutationObserver = null
		if mob:
			mob.disconnect!()
	}

	func connectedCallback private #used
	{
		// This is a standard Javascript callback, called by the web component framework
		isMounted = true
		initializeMutationObserver()
		try {
			onMounted()
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
		}
	}

	func disconnectedCallback private #used
	{
		// This is a standard Javascript callback, called by the web component framework.
		isMounted = false
		try {
			onUnmounted()
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
		}
		shutdownMutationObserver()
	}

	func addCssRules(sheet as CSSBuilder) virtual throws Exception
	{
		var host = sheet.define(":host", new map<string,string> {
			overflow "hidden"
		})
		if width || widthRequest || minWidth || maxWidth || height || heightRequest || minHeight || maxHeight {
			var theme = JcoThemeProcessor.forComponent(this)
			if var w = width {
				host.set("width", lengthToHtml(theme.getValue(w)))
			}
			else if var wr = widthRequest {
				host.set("width", "min(" .. lengthToHtml(theme.getValue(wr)) .. ", 100%)")
			}
			if var mw = minWidth:
				host.set("min-width", lengthToHtml(theme.getValue(mw)))
			if var mw = maxWidth:
				host.set("max-width", lengthToHtml(theme.getValue(mw)))
			if var h = height {
				host.set("height", lengthToHtml(theme.getValue(h)))
			}
			else if var hr = heightRequest {
				host.set("height", "min(" .. lengthToHtml(theme.getValue(hr)) .. ", 100%)")
			}
			if var mh = minHeight:
				host.set("min-height", lengthToHtml(theme.getValue(mh)))
			if var mh = maxHeight:
				host.set("max-height", lengthToHtml(theme.getValue(mh)))
		}
	}

	func getCssString virtual as string?
	{
		try {
			var sheet = new CSSBuilder()
			addCssRules(sheet)
			return sheet.toString()
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
		}
		return null
	}

	func getPpi as double:
		return 96.0
}
ELSE IFDEF "target_ios_swift"
{
	import [magical:UIKit]

	extend [magical:UIView]

	ctor:
		lang "swift" {{{
			super.init(frame: CGRectMake(0,0,0,0))
		}}}

	ctor(aDecoder label coder as [magical:NSCoder]) nullable required:
		lang "swift" (aDecoder) {{{
			super.init(coder: aDecoder)
		}}}

	func getViewController as [magical:UIViewController]?
	{
		lang "swift" {{{
			var responder = self.next
			while responder != nil {
				if responder is UIViewController {
					return responder as! UIViewController
				}
				responder = responder!.next
			}
		}}}
		return null
	}

	func isConnectedToViewController as bool
	{
		if getViewController() == null:
			return false
		return true
	}

	func updateChildMountedStatuses throws Exception
	{
		lang "swift" {{{
			for subview in subviews {
				if let subcomp = subview as? JcoComponent {
					try subcomp.updateMountedStatus()
				}
			}
		}}}
	}

	func updateMountedStatus throws Exception
	{
		if isConnectedToViewController() {
			if isMounted == false {
				isMounted = true
				updateChildMountedStatuses()
				onMounted()
			}
		}
		else if isMounted {
			isMounted = false
			updateChildMountedStatuses()
			onUnmounted()
		}
	}

	func didMoveToSuperview override #magical
	{
		lang "swift" {{{
			super.didMoveToSuperview()
		}}}
		try {
			updateMountedStatus()
		}
		catch e as Exception {
			Log.error(ctx, e.toString())
		}
	}

	func getPreferredSize as [magical:CGSize]:
		return lang "swift" as [magical:CGSize] {{{ sizeThatFits(CGSizeMake(CGFloat.greatestFiniteMagnitude, CGFloat.greatestFiniteMagnitude)) }}}

	func layoutSubviews override #magical
	{
		lang "swift" {{{
			for subview in subviews {
				subview.frame = self.bounds
			}
		}}}
	}

	func computeSizeThatFits(cw as double, ch as double) virtual as Size
	{
		var w #mutated = 0.0
		var h #mutated = 0.0
		lang "swift" {{{
			for subview in subviews {
				let cgsz = subview.sizeThatFits(CGSizeMake(cw, ch))
				if cgsz.width > w {
					w = cgsz.width
				}
				if cgsz.height > h {
					h = cgsz.height
				}
			}
		}}}
		return new Size() {
			width w
			height h
		}
	}

	func sizeThatFits(size as [magical:CGSize]) override as [magical:CGSize] #magical
	{
		var theme = JcoThemeProcessor.forComponent(this)
		var w = 0.0
		var h = 0.0
		var wp = 0.0
		var ws = width
		if ws:
			wp = asPoints(theme.getValue(ws))
		var hp = 0.0
		var hs = height
		if hs:
			hp = asPoints(theme.getValue(hs))
		if ws && hs {
			w = wp
			h = hp
		}
		else {
			var ctxw = lang "swift" (size) as double {{{ size.width }}}
			var ctxh = lang "swift" (size) as double {{{ size.height }}}
			var wrp = 0.0
			var wrs = widthRequest
			if wrs {
				wrp = asPoints(theme.getValue(wrs))
				if wrp > ctxw:
					wrp = ctxw
			}
			var hrp = 0.0
			var hrs = heightRequest
			if hrs {
				hrp = asPoints(theme.getValue(hrs))
				if hrp > ctxh:
					hrp = ctxh
			}
			if wrs && hrs {
				w = wrp
				h = hrp
			}
			else {
				var szw = ctxw
				if wrs:
					szw = wrp
				if ws:
					szw = wp
				var szh = ctxh
				if hrs:
					szh = hrp
				if hs:
					szh = hp
				var sz = computeSizeThatFits(szw, szh)
				w = sz.width
				h = sz.height
			}
			if ws:
				w = wp
			if hs:
				h = hp
		}
		if var minws = minWidth {
			var minw = asPoints(theme.getValue(minws))
			if w < minw:
				w = minw
		}
		if var maxws = maxWidth {
			var maxw = asPoints(theme.getValue(maxws))
			if w > maxw:
				w = maxw
		}
		if var minhs = minHeight {
			var minh = asPoints(theme.getValue(minhs))
			if h < minh:
				h = minh
		}
		if var maxhs = maxHeight {
			var maxh = asPoints(theme.getValue(maxhs))
			if h > maxh:
				h = maxh
		}
		return lang "swift" (w, h) as [magical:CGSize] {{{ CGSizeMake(w, h) }}}
	}

	func getPpi as double
	{
		// FIXME: Do this properly
		return 163
	}

	func colorToUiColor(value as string) as [magical:UIColor]
	{
		if String.isEmpty(value):
			return lang "swift" as [magical:UIColor] {{{ UIColor.black }}}
		var color = Color.forString(value)
		var red = color.getRed()
		var green = color.getGreen()
		var blue = color.getBlue()
		var alpha = color.getAlpha()
		return lang "swift" (red, green, blue, alpha) as [magical:UIColor] {{{ UIColor(red: red, green: green, blue: blue, alpha: alpha) }}}
	}

	func fontToUiFont(font as string) throws Exception as [magical:UIFont]
	{
		if String.isEmpty(font):
			return lang "swift" as [magical:UIFont] {{{ UIFont.systemFont(ofSize: UIFont.systemFontSize) }}}
		var fo = FontDescription.parse(font)
		if fo.file != null:
			Error.throw("fontFileNotSupported")
		var family = fo.family
		var size = lang "swift" as double {{{ UIFont.systemFontSize }}}
		var sizeo = fo.size
		if sizeo:
			size = lengthAsPoints(sizeo)
		if String.isEmpty(family) {
			if fo.bold {
				return lang "swift" as [magical:UIFont] {{{ UIFont.boldSystemFont(ofSize: size) }}}
			}
			else if fo.italic {
				return lang "swift" as [magical:UIFont] {{{ UIFont.italicSystemFont(ofSize: size) }}}
			}
			else {
				return lang "swift" as [magical:UIFont] {{{ UIFont.systemFont(ofSize: size) }}}
			}
		}
		var v = lang "swift" as [magical:UIFont]? {{{ UIFont(name: family!, size: size) }}}
		if v:
			return v
		return lang "swift" as [magical:UIFont] {{{ UIFont.systemFont(ofSize: size) }}}
	}
}
ELSE {
	func getPpi as double:
		return 96.0
}

init:
	#post {
		onCreated()
	}

func asPixels(length as string) as int:
	return Length.asPixels(length, getPpi())

func asPoints(length as string) as double:
	return Length.asPoints(length, getPpi())

func lengthAsPixels(length as Length) as int:
	return length.getValueAsPixels(getPpi())

func lengthAsPoints(length as Length) as double:
	return length.getValueAsPoints(getPpi())

func getThemeProcessor as JcoThemeProcessor:
	return new JcoThemeProcessor() {
		component this
	}
