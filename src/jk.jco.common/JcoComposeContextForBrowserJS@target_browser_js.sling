
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is JcoComposeContext:

class HtmlElementChildIterator is JcoChildIterator
{
	prop element as dynamic

	var position = 0

	func getChildAtPosition(index as int) as object?
	{
		var children = element.childNodes
		if not children:
			return null
		if index >= children.length as! int:
			return null
		return children[index] as object
	}

	func peek implement as object?:
		return getChildAtPosition(position)

	func step implement:
		position++

	func insert(child as object) implement throws Exception
	{
		var nextChild = getChildAtPosition(position)
		if nextChild == null {
			element.appendChild!(child)
		}
		else {
			element.insertBefore!(child, nextChild)
		}
		position++
	}

	func remove implement throws Exception
	{
		var current = getChildAtPosition(position)
		if current:
			element.removeChild!(current)
	}
}

func forRoot(root as object) static throws Exception as this
{
	var v = new this()
	v.pushContainer(root)
	return v
}

func getChildIterator(container as object) override as JcoChildIterator?
{
	var v = base.getChildIterator(container)
	if v:
		return v
	return new HtmlElementChildIterator() {
		element container
	}
}

func createElementByName(name as string) throws Exception as object
{
	var v = lang "js" as object? {{{ document.createElement(name) }}}
	if not v:
		Error.throw("failedToCreateDocumentElementByName", name)
	return v
}

func createCustomElement(type as typeinfo) override throws Exception as object
{
	var name = CustomElementManager.getRegisteredTypeName(type)
	return createElementByName(name)
}

func startHtmlElement(name as string) override throws Exception as JcoHtmlElement
{
	var next = peekNextChild()
	if next && next is JcoComponent == false {
		var tagName = String.asValueOrNull(lang "js" as string? {{{ next.tagName }}})
		if tagName && String.toLowerCase(tagName) == name {
			stepChild()
			pushContainer(next)
			return new JcoHtmlElementForBrowserJS() {
				element next
			}
		}
	}
	var v = createElementByName(name)
	insertChild(v)
	pushContainer(v)
	return new JcoHtmlElementForBrowserJS() {
		element v
	}
}

func addContent(content as string) override throws Exception
{
	var next = peekNextChild()
	if next && lang "js" as bool {{{ next.nodeType == Node.TEXT_NODE }}} {
		if String.equals(content, String.asValueOrNull(lang "js" as dynamic? {{{ next.data }}})) {
			stepChild()
			return
		}
	}
	var node = lang "js" as object? {{{ document.createTextNode(content) }}}
	if not node:
		Error.throw("failedToCreateTextNode")
	insertChild(node)
}
