
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.env
import jk.console

class:

meta
{
	description [[
		A common main class and entry point for scripts. This is commonly used
		in SlingScript files and Sling build scripts.
	]]
}

var entryPoints as map<string,function<int,vector<string>>>?

var ctx public = new ConsoleApplicationContext()

ctor
{
	var appdir = CommonPath.getAppDirectory()
	if not appdir:
		Error.throw("noApplicationDirectory", null)
	CurrentDirectory.set(appdir)
}

func print(message as dynamic):
	println String.asValueOrEmptyString(message)

func status(message as dynamic):
	Log.status(ctx, String.asValueOrEmptyString(message))

func debug(message as dynamic):
	Log.debug(ctx, String.asValueOrEmptyString(message))

func info(message as dynamic):
	Log.info(ctx, String.asValueOrEmptyString(message))

func warning(message as dynamic):
	Log.warning(ctx, String.asValueOrEmptyString(message))

func error(message as dynamic):
	throw ExceptionWithString.forString(String.asValueOrEmptyString(message), false)

func initialize virtual:
	nop

func requireParameter(args as array<string>?, index as int, name as string) as string?
{
	var v as string?
	if args && index < sizeof args:
		v = args[index]
	if String.isEmpty(v):
		error("Missing parameter: <" .. name .. ">")
	return v
}

func executeFunction(script as function<void>) as int
{
	initialize()
	try {
		script()
	}
	catch e {
		Log.error(ctx, Log.asString(ctx, e))
		return 1
	}
	return 0
}

func command(name as dynamic, handler as function<int,vector<string>>)
{
	var sname = assert String.asValueOrNull(name)
	if not entryPoints:
		entryPoints = new map<string,function<int,vector<string>>>
	entryPoints[sname] = handler
}

func main(args as array<string>) virtual as int
{
	initialize()
	var cmd as string?
	if sizeof args > 0:
		cmd = args[0]
	if String.isEmpty(cmd) {
		var sb = new StringBuilder()
		sb.appendString("Missing command parameter: <")
		var first = true
		if entryPoints: foreach cc in Map.getKeys(entryPoints) {
			if not first:
				sb.appendCharacter('|')
			sb.appendString(cc)
			first = false
		}
		sb.appendCharacter('>')
		Log.error(ctx, sb.toString())
		return -1
	}
	if entryPoints {
		var handler = Map.getValue(entryPoints, cmd)
		if handler {
			var v = new vector<string>
			var nargs = sizeof args
			for(var n=1; n<nargs; n++):
				v += args[n]
			var r = -1
			try {
				r = handler(v)
			}
			catch e {
				Log.error(ctx, Log.asString(ctx, e))
				r = -1
			}
			return r
		}
	}
	Log.error(ctx, "Unsupported command: `" .. cmd .. "'")
	return -1
}
