
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import jk.apiclient
import jk.url

class is ApiClient:

func forApiKey(ctx as LoggingContext, stripeApiKey as string) static as this:
	return new this() {
		ctx ctx
		bearerToken stripeApiKey
		baseUrl "https://api.stripe.com/v1"
	}

section "Common" public
{
	model Address
	{
		city as string
		country as string
		line1 as string
		line2 as string
		postal_code as string
		state as string
	}
}

section "Customer" public
{
	model CustomerShipping
	{
		address as Address
		name as string
		phone as string
	}

	model Customer
	{
		id as string
		address as Address
		description as string
		email as string
		metadata as DynamicMap
		name as string
		phone as string
		shipping as CustomerShipping
		balance as int
		// cash_balance
		created as long
		currency as string
		// default_source
		delinquent as bool
		// discount as Discount
		// invoice_credit_balance
		invoice_prefix as string
		// invoice_settings
		livemode as bool
		next_invoice_sequence as int
		preferred_locales as string[]
		// sources
		// subscriptions
		// tax
		tax_exempt as string
		// tax_ids
		test_clock as string
	}

	func getCustomerById(customerId as string) async as Customer
	{
		meta {
			description "Get a customer record"
		}
		var resp = await requestAndValidate("GET", "/customers/" .. URLEncoder.encode(customerId), null, null)
		return Customer.forData(resp.getBodyAsDynamicMap())
	}

	func getCustomers(starting_after as string?) async as vector<Customer>
	{
		meta {
			description "Retrieves a list of all customers"
		}
		var url = URL.forString("/customers")
		url.addQueryParameter("limit", "100")
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<Customer>
		foreach c as DynamicMap in data.toVector():
			v += Customer.forData(c)
		return v
	}

	func createCustomer(customer as Customer) async as Customer
	{
		meta {
			description "Creates a new customer"
		}
		var resp = await requestAndValidate("POST", "/customers", null, QueryString.encodeDynamicMapToBuffer(customer.toDynamicMap()))
		return Customer.forData(resp.getBodyAsDynamicMap())
	}

	func updateCustomer(customer as Customer) async as Customer
	{
		meta {
			description "Creates a new customer"
		}
		var customerId = customer.id
		if not customerId:
			Error.throw("noCustomerId", customer)
		var resp = await requestAndValidate("POST", "/customers/" .. URLEncoder.encode(customerId), null, QueryString.encodeDynamicMapToBuffer(customer.toDynamicMap()))
		return Customer.forData(resp.getBodyAsDynamicMap())
	}

	func applyCustomer(customer as Customer) async as Customer
	{
		meta {
			description "Create or update a customer"
		}
		if customer.id:
			return await updateCustomer(customer)
		return await createCustomer(customer)
	}

	func deleteCustomer(customerId as string) async as Customer
	{
		meta {
			description "Get a customer record"
		}
		var resp = await requestAndValidate("DELETE", "/customers/" .. URLEncoder.encode(customerId), null, null)
		return Customer.forData(resp.getBodyAsDynamicMap())
	}
}

section "Payment Intent" public
{
	model PaymentIntent
	{
		id as string
		amount as int
		// automatic_payment_methods
		client_secret as string
		currency as string
		customer as string
		description as string
		// last_payment_error
		latest_charge as string
		metadata as DynamicMap
		// next_action
		payment_method as string
		receipt_email as string
		setup_future_usage as string
		// shipping
		statement_descriptor as string
		statement_descriptor_suffix as string
		status as string
		amount_capturable as int
		// amount_details
		amount_received as int
		application as string
		application_fee_amount as int
		canceled_at as long
		cancellation_reason as string
		// capture_method
		// confirmation_method
		created as long
		invoice as string
		livemode as bool
		on_behalf_of as string
		// payment_method_options
		// payment_method_types
		// processing
		review as string
		// transfer_data
		transfer_group as string
	}

	func createPaymentIntent(intent as PaymentIntent) async as PaymentIntent
	{
		meta {
			description "Creates a payment intent"
		}
		var resp = await requestAndValidate("POST", "/payment_intents", null, QueryString.encodeDynamicMapToBuffer(intent.toDynamicMap()))
		return PaymentIntent.forData(resp.getBodyAsDynamicMap())
	}

	func updatePaymentIntent(intent as PaymentIntent) async as PaymentIntent
	{
		meta {
			description "Updates a payment intent"
		}
		var intentId = intent.id
		if not intentId:
			Error.throw("noIntentId", intent)
		var resp = await requestAndValidate("POST", "/payment_intents/" .. URLEncoder.encode(intentId), null, QueryString.encodeDynamicMapToBuffer(intent.toDynamicMap()))
		return PaymentIntent.forData(resp.getBodyAsDynamicMap())
	}

	func applyPaymentIntent(intent as PaymentIntent) async as PaymentIntent
	{
		meta {
			description "Create or update a payment intent"
		}
		if intent.id:
			return await updatePaymentIntent(intent)
		return await createPaymentIntent(intent)
	}
}

section "Setup Intent" public
{
	model SetupIntent
	{
		id as string
		client_secret as string
		customer as string
		description as string
		// last_setup_error
		metadata as DynamicMap
		// next_action
		payment_method as string
		// payment_method_types
		status as string
		usage as string
		application as string
		attach_to_self as bool
		// automatic_payment_methods
		cancellation_reason as string
		created as long
		// flow_directions
		latest_attempt as string
		livemode as bool
		mandate as string
		on_behalf_of as string
		// payment_method_options
		single_use_mandate as string
	}

	func createSetupIntent(intent as SetupIntent) async as SetupIntent
	{
		meta {
			description "Creates a setup intent that collects customer's payment credentials for future usage"
		}
		var resp = await requestAndValidate("POST", "/setup_intents", null, QueryString.encodeDynamicMapToBuffer(intent.toDynamicMap()))
		return SetupIntent.forData(resp.getBodyAsDynamicMap())
	}

	func updateSetupIntent(intent as SetupIntent) async as SetupIntent
	{
		meta {
			description "Updates a setup intent"
		}
		var intentId = intent.id
		if not intentId:
			Error.throw("noIntentId", intent)
		var resp = await requestAndValidate("POST", "/setup_intents/" .. URLEncoder.encode(intentId), null, QueryString.encodeDynamicMapToBuffer(intent.toDynamicMap()))
		return SetupIntent.forData(resp.getBodyAsDynamicMap())
	}

	func applySetupIntent(intent as SetupIntent) async as SetupIntent
	{
		meta {
			description "Create or update a payment intent"
		}
		if intent.id:
			return await updateSetupIntent(intent)
		return await createSetupIntent(intent)
	}
}

section "Payment Methods" public
{
	model PaymentMethodCard
	{
		brand as string
		// checks
		country as string
		exp_month as string
		exp_year as string
		fingerprint as string
		funding as string
		// generated_from
		last4 as string
		// networks
		// three_d_secure_usage
		// wallet
	}

	model PaymentMethodBillingDetails
	{
		address as Address
		email as string
		name as string
		phone as string
	}

	model PaymentMethod
	{
		id as string
		billing_details as PaymentMethodBillingDetails
		customer as string
		metadata as DynamicMap
		type as string
		// acss_debit
		// affirm
		// afterpay_clearpay
		// alipay
		// au_becs_debit
		// bacs_debit
		// bancontact
		// blik
		// boleto
		card as PaymentMethodCard
		// card_present
		// cashapp
		created as long
		// customer_balance
		// eps
		// fpx
		// giropay
		// grabpay
		// ideal
		// interac_present
		// klarna
		// konbini
		// link
		livemode as bool
		// oxxo
		// p24
		// paynow
		// paypal
		// pix
		// promptpay
		// radar_options
		// sepa_debit
		// sofort
		// us_bank_account
		// wechat_pay
		// zip
	}

	func getPaymentMethodById(paymentMethodId as string) async as PaymentMethod
	{
		meta {
			description "Retrieves the payment method details for the specified payment method"
		}
		var resp = await requestAndValidate("GET", "/payment_methods/" .. URLEncoder.encode(paymentMethodId), null, null)
		return PaymentMethod.forData(resp.getBodyAsDynamicMap())
	}

	func getPaymentMethodsForCustomer(customerId as string, type as string?, starting_after as string?) async as vector<PaymentMethod>
	{
		meta {
			description "Retrieve a list of payment methods for a given customer"
		}
		var url = URL.forString("/payment_methods")
		url.addQueryParameter("customer", customerId)
		if type:
			url.addQueryParameter("type", type)
		url.addQueryParameter("limit", "100")
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<PaymentMethod>
		foreach c as DynamicMap in data.toVector():
			v += PaymentMethod.forData(c)
		return v
	}

	func attachPaymentMethod(paymentMethodId as string, customerId as string) async as PaymentMethod
	{
		var data = new DynamicMap()
		data.setString("customer", customerId)
		var resp = await requestAndValidate("POST", "/payment_methods/" .. URLEncoder.encode(paymentMethodId) .. "/attach", null, QueryString.encodeDynamicMapToBuffer(data))
		return PaymentMethod.forData(resp.getBodyAsDynamicMap())
	}

	func detachPaymentMethod(paymentMethodId as string) async as PaymentMethod
	{
		var resp = await requestAndValidate("POST", "/payment_methods/" .. URLEncoder.encode(paymentMethodId) .. "/detach", null, null)
		return PaymentMethod.forData(resp.getBodyAsDynamicMap())
	}
}

section "Product" public
{
	model Product
	{
		id as string
		active as bool
		default_price as string
		description as string
		metadata as DynamicMap
		name as string
		created as long
		// images
		// package_dimensions
		shippable as bool
		statement_descriptor as string
		tax_code as string
		unit_label as string
		updated as long
		url as string
	}

	func getProductById(productId as string) async as Product
	{
		meta {
			description "Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information."
		}
		var resp = await requestAndValidate("GET", "/products/" .. URLEncoder.encode(productId), null, null)
		return Product.forData(resp.getBodyAsDynamicMap())
	}

	func getProducts(starting_after as string?) async as vector<Product>
	{
		meta {
			description "Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first."
		}
		var url = URL.forString("/products")
		url.addQueryParameter("limit", "100")
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<Product>
		foreach c as DynamicMap in data.toVector():
			v += Product.forData(c)
		return v
	}

	func createProduct(product as Product) async as Product
	{
		meta {
			description "Creates a new product object."
		}
		var resp = await requestAndValidate("POST", "/products", null, QueryString.encodeDynamicMapToBuffer(product.toDynamicMap()))
		return Product.forData(resp.getBodyAsDynamicMap())
	}

	func updateProduct(product as Product) async as Product
	{
		meta {
			description "Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged."
		}
		var productId = product.id
		if not productId:
			Error.throw("noProductId", product)
		var resp = await requestAndValidate("POST", "/products/" .. URLEncoder.encode(productId), null, QueryString.encodeDynamicMapToBuffer(product.toDynamicMap()))
		return Product.forData(resp.getBodyAsDynamicMap())
	}

	func applyProduct(product as Product) async as Product
	{
		meta {
			description "Create or update a product"
		}
		if product.id:
			return await updateProduct(product)
		return await createProduct(product)
	}

	func deleteProduct(productId as string) async as Product
	{
		meta {
			description "Delete a product. Deleting a product is only possible if it has no prices associated with it."
		}
		var resp = await requestAndValidate("DELETE", "/products/" .. URLEncoder.encode(productId), null, null)
		return Product.forData(resp.getBodyAsDynamicMap())
	}
}

section "Price" public
{
	model PriceRecurring
	{
		aggregate_usage as string
		interval as string
		interval_count as int
		usage_type as string
	}

	model Price
	{
		id as string
		active as bool
		currency as string
		metadata as DynamicMap
		nickname as string
		product as string
		recurring as PriceRecurring
		type as string
		unit_amount as int
		billing_scheme as string
		created as long
		// currency_options
		// custom_unit_amount
		livemode as bool
		lookup_key as string
		tax_behavior as string
		// tiers
		tiers_mode as string
		// transform_quantity
		// unit_amount_decimal
	}

	func getPriceById(priceId as string) async as Price
	{
		meta {
			description "Retrieves the price with the given ID."
		}
		var resp = await requestAndValidate("GET", "/prices/" .. URLEncoder.encode(priceId), null, null)
		return Price.forData(resp.getBodyAsDynamicMap())
	}

	func getPrices(starting_after as string?) async as vector<Price>
	{
		meta {
			description "Returns a list of your prices."
		}
		var url = URL.forString("/prices")
		url.addQueryParameter("limit", "100")
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<Price>
		foreach c as DynamicMap in data.toVector():
			v += Price.forData(c)
		return v
	}

	func createPrice(price as Price) async as Price
	{
		meta {
			description "Creates a new price for an existing product. The price can be recurring or one-time."
		}
		var resp = await requestAndValidate("POST", "/prices", null, QueryString.encodeDynamicMapToBuffer(price.toDynamicMap()))
		return Price.forData(resp.getBodyAsDynamicMap())
	}

	func updatePrice(price as Price) async as Price
	{
		meta {
			description "Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged."
		}
		var priceId = price.id
		if not priceId:
			Error.throw("noPriceId", price)
		var resp = await requestAndValidate("POST", "/prices/" .. URLEncoder.encode(priceId), null, QueryString.encodeDynamicMapToBuffer(price.toDynamicMap()))
		return Price.forData(resp.getBodyAsDynamicMap())
	}

	func applyPrice(price as Price) async as Price
	{
		meta {
			description "Create or update a price"
		}
		if price.id:
			return await updatePrice(price)
		return await createPrice(price)
	}

	func deletePrice(priceId as string) async as Price
	{
		var resp = await requestAndValidate("DELETE", "/prices/" .. URLEncoder.encode(priceId), null, null)
		return Price.forData(resp.getBodyAsDynamicMap())
	}
}

section "Subscription" public
{
	model SubscriptionItem
	{
		id as string
		// billing_thresholds
		created as long
		metadata as DynamicMap
		price as Price
		quantity as int
		subscription as string
		// tax_rates
	}

	model SubscriptionItemList
	{
		object as string
		data as SubscriptionItem[]
		has_more as bool
		total_count as int
		url as string
	}

	model SubscriptionPaymentSettings
	{
		// payment_method_options
		payment_method_types as string[]
		save_default_payment_method as string
	}

	model SubscriptionPlan
	{
		id as string
		object as string
		active as bool
		amount as int
		billing_scheme as string
		created as int
		currency as string
		interval as string
		interval_count as int
		livemode as bool
		metadata as DynamicMap
		nickname as string
		product as string
		trial_period_days as int
		usage_type as string
	}

	model Subscription
	{
		id as string
		cancel_at_period_end as bool
		currency as string
		current_period_end as long
		current_period_start as long
		customer as string
		default_payment_method as string
		description as string
		items as SubscriptionItemList
		latest_invoice as string
		metadata as DynamicMap
		pending_setup_intent as string
		// pending_update
		status as string
		application as string
		application_fee_percent as double
		// automatic_tax
		billing_cycle_anchor as long
		// billing_thresholds
		cancel_at as long
		canceled_at as long
		// cancellation_details
		collection_method as string
		created as long
		days_until_due as int
		default_source as string
		// default_tax_rates
		// discount
		ended_at as long
		livemode as bool
		next_pending_invoice_item_invoice as long
		on_behalf_of as string
		// pause_collection
		payment_settings as SubscriptionPaymentSettings
		// pending_invoice_item_interval
		schedule as string
		start_date as long
		test_clock as string
		// transfer_data
		trial_end as long
		// trial_settings
		trial_start as long
		// plan
		plan as SubscriptionPlan
	}

	model CreateSubscriptionParametersItem
	{
		// billing_threshold
		metadata as DynamicMap
		price as string
		// price_data
		quantity as int
		// tax_rates
	}

	model CreateSubscriptionParameters
	{
		customer as string
		items as CreateSubscriptionParametersItem[]
		cancel_at_period_end as bool
		currency as string
		default_payment_method as string
		description as string
		metadata as DynamicMap
		payment_behavior as string
		// add_invoice_items
		// application_fee_percent
		// automatic_tax
		backdate_start_date as long
		billing_cycle_anchor as long
		// billing_thresholds
		cancel_at as long
		collection_method as string
		coupon as string
		days_until_due as int
		default_source as string
		// default_tax_rates
		off_session as bool
		on_behalf_of as string
		payment_settings as SubscriptionPaymentSettings
		// pending_invoice_item_interval
		promotion_code as string
		proration_behavior as string
		// transfer_data
		trial_end as long
		trial_from_plan as bool
		trial_period_days as int
		// trial_settings
	}

	model UpdateSubscriptionParametersItem
	{
		id as string
		// billing_thresholds
		clear_usage as bool
		deleted as bool
		metadata as DynamicMap
		price as string
		// price_data
		quantity as string
		// tax_rates
	}

	model UpdateSubscriptionParameters
	{
		cancel_at_period_end as bool
		default_payment_method as string
		description as string
		items as UpdateSubscriptionParametersItem[]
		metadata as DynamicMap
		payment_behavior as string
		proration_behavior as string
		// add_invoice_items
		// application_fee_percent
		// automatic_tax
		billing_cycle_anchor as long
		// billing_thresholds
		cancel_at as long
		// cancellation_details
		collection_method as string
		coupon as string
		days_until_due as int
		default_source as string
		// default_tax_rates
		off_session as bool
		on_behalf_of as string
		// pause_collection
		payment_settings as SubscriptionPaymentSettings
		// pending_invoice_item_interval
		promotion_code as string
		proration_date as long
		// transfer_data
		trial_end as long
		trial_from_plan as bool
		// trial_settings
	}

	model CreateSubscriptionItemParameters
	{
		subscription as string
		metadata as DynamicMap
		payment_behavior as string
		price as string
		proration_behavior as string
		quantity as int
		// billing_thresholds
		// price_data
		// proration_date
		// tax_rates
	}

	model UpdateSubscriptionItemParameters
	{
		metadata as DynamicMap
		payment_behavior as string
		price as string
		proration_behavior as string
		quantity as int
		// billing_thresholds
		off_session as bool
		// price_data
		proration_date as string
		// tax_rates
	}

	func getSubscriptionById(subscriptionId as string) async as Subscription
	{
		meta {
			description "Retrieves the subscription with the given ID."
		}
		var resp = await requestAndValidate("GET", "/subscriptions/" .. URLEncoder.encode(subscriptionId), null, null)
		return Subscription.forData(resp.getBodyAsDynamicMap())
	}

	func getSubscriptions(customerId as string?, price as string?, status as string?, starting_after as string?) async as vector<Subscription>
	{
		meta {
			description "By default, returns a list of subscriptions that have not been canceled."
		}
		var url = URL.forString("/subscriptions")
		url.addQueryParameter("limit", "100")
		if customerId:
			url.addQueryParameter("customer", customerId)
		if price:
			url.addQueryParameter("price", price)
		if status:
			url.addQueryParameter("status", status)
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<Subscription>
		foreach c as DynamicMap in data.toVector():
			v += Subscription.forData(c)
		return v
	}

	func createSubscription(subscription as CreateSubscriptionParameters) async as Subscription
	{
		meta {
			description "Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions."
		}
		var resp = await requestAndValidate("POST", "/subscriptions", null, QueryString.encodeDynamicMapToBuffer(subscription.toDynamicMap()))
		return Subscription.forData(resp.getBodyAsDynamicMap())
	}

	func updateSubscription(subscriptionId as string, subscription as UpdateSubscriptionParameters) async as Subscription
	{
		meta {
			description "Updates an existing subscription to match the specified parameters. When changing prices or quantities, we will optionally prorate the price we charge next month to make up for any price changes."
		}
		var resp = await requestAndValidate("POST", "/subscriptions/" .. URLEncoder.encode(subscriptionId), null, QueryString.encodeDynamicMapToBuffer(subscription.toDynamicMap()))
		return Subscription.forData(resp.getBodyAsDynamicMap())
	}

	func deleteSubscription(subscriptionId as string) async as Subscription
	{
		meta {
			description "Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription."
		}
		var resp = await requestAndValidate("DELETE", "/subscriptions/" .. URLEncoder.encode(subscriptionId), null, null)
		return Subscription.forData(resp.getBodyAsDynamicMap())
	}

	func getSubscriptionItems(subscriptionId as string, starting_after as string?) async as vector<SubscriptionItem>
	{
		meta {
			description "Returns a list of your subscription items for a given subscription."
		}
		var url = URL.forString("/subscription_items")
		url.addQueryParameter("limit", "100")
		url.addQueryParameter("subscription", subscriptionId)
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<SubscriptionItem>
		foreach c as DynamicMap in data.toVector():
			v += SubscriptionItem.forData(c)
		return v
	}

	func createSubscriptionItem(item as CreateSubscriptionItemParameters) async as SubscriptionItem
	{
		meta {
			description "Adds a new item to an existing subscription. No existing items will be changed or replaced."
		}
		var resp = await requestAndValidate("POST", "/subscription_items", null, QueryString.encodeDynamicMapToBuffer(item.toDynamicMap()))
		return SubscriptionItem.forData(resp.getBodyAsDynamicMap())
	}

	func updateSubscriptionItem(itemId as string, item as UpdateSubscriptionItemParameters) async as SubscriptionItem
	{
		meta {
			description "Updates the plan or quantity of an item on a current subscription."
		}
		var resp = await requestAndValidate("POST", "/subscription_items/" .. URLEncoder.encode(itemId), null, QueryString.encodeDynamicMapToBuffer(item.toDynamicMap()))
		return SubscriptionItem.forData(resp.getBodyAsDynamicMap())
	}

	func deleteSubscriptionItem(itemId as string) async as SubscriptionItem
	{
		meta {
			description "Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription."
		}
		var resp = await requestAndValidate("DELETE", "/subscription_items/" .. URLEncoder.encode(itemId), null, null)
		return SubscriptionItem.forData(resp.getBodyAsDynamicMap())
	}
}

section "Invoice" public
{
	model InvoiceLinesList
	{
		data as InvoiceLineItem[]
		has_more as bool
		url as string
	}

	model Invoice
	{
		id as string
		auto_advance as bool
		charge as string
		collection_method as string
		currency as string
		customer as string
		description as string
		hosted_invoice_url as string
		lines as InvoiceLinesList
		metadata as DynamicMap
		payment_intent as string
		period_end as long
		period_start as long
		status as string
		subscription as string
		total as int
		account_country as string
		account_name as string
		// account_tax_ids
		amount_due as int
		amount_paid as int
		amount_remaining as int
		amount_shipping as int
		application as string
		application_fee_amount as int
		attempt_count as int
		attempted as bool
		// automatic_tax
		billing_reason as string
		created as long
		// custom_fields
		customer_address as Address
		customer_email as string
		customer_name as string
		customer_phone as string
		// customer_shipping
		customer_tax_exempt as string
		// customer_tax_ids
		default_payment_method as string
		default_source as string
		// default_tax_rates
		// discount
		// discounts
		due_date as long
		effective_at as long
		ending_balance as int
		footer as string
		// from_invoice
		invoice_pdf as string
		// last_finalization_error
		latest_revision as string
		livemode as bool
		next_payment_attempt as long
		number as string
		on_behalf_of as string
		paid as bool
		paid_out_of_band as bool
		// payment_settings
		post_payment_credit_notes_amount as int
		pre_payment_credit_notes_amount as int
		quote as string
		receipt_number as string
		// rendering_options
		// shipping_cost
		// shipping_details
		starting_balance as int
		statement_descriptor as string
		// status_transitions
		subscription_proration_date as int
		subtotal as int
		subtotal_excluding_tax as int
		tax as int
		test_clock as string
		// threshold_reason
		// total_discount_amounts
		total_excluding_tax as int
		// total_tax_amounts
		// transfer_data
		webhooks_delivered_at as long
	}

	model Period
	{
		end as long
		start as long
	}

	model InvoiceLineItem
	{
		id as string
		amount as int
		currency as string
		description as string
		metadata as DynamicMap
		period as Period
		price as Price
		proration as bool
		quantity as int
		type as string
		amount_excluding_tax as int
		// discount_amounts
		discountable as bool
		// discounts
		invoice_item as string
		livemode as bool
		// proration_details
		subscription as string
		subscription_item as string
		// tax_amounts
		// tax_rates
		// unit_amount_excluding_tax
	}

	model FinalizeInvoiceParameters
	{
		auto_advance as bool
	}

	model PayInvoiceParameters
	{
		forgive as bool
		mandate as string
		off_session as bool
		paid_out_of_band as bool
		payment_method as string
		source as string
	}

	func getInvoiceById(invoiceId as string) async as Invoice
	{
		meta {
			description "Retrieves the invoice with the given ID"
		}
		var resp = await requestAndValidate("GET", "/invoices/" .. URLEncoder.encode(invoiceId), null, null)
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func getInvoices(customerId as string?, status as string?, starting_after as string?) async as vector<Invoice>
	{
		meta {
			description "You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first."
		}
		var url = URL.forString("/invoices")
		url.addQueryParameter("limit", "100")
		if customerId:
			url.addQueryParameter("customer", customerId)
		if status:
			url.addQueryParameter("status", status)
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<Invoice>
		foreach c as DynamicMap in data.toVector():
			v += Invoice.forData(c)
		return v
	}

	func createInvoice(invoice as Invoice) async as Invoice
	{
		meta {
			description "This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you finalize the invoice, which allows you to pay or send the invoice to your customers."
		}
		var resp = await requestAndValidate("POST", "/invoices", null, QueryString.encodeDynamicMapToBuffer(invoice.toDynamicMap()))
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func updateInvoice(invoice as Invoice) async as Invoice
	{
		meta {
			description "Draft invoices are fully editable. Once an invoice is finalized, monetary values, as well as collection_method, become uneditable."
		}
		var invoiceId = invoice.id
		if not invoiceId:
			Error.throw("noInvoiceId", invoice)
		var resp = await requestAndValidate("POST", "/invoices/" .. URLEncoder.encode(invoiceId), null, QueryString.encodeDynamicMapToBuffer(invoice.toDynamicMap()))
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func applyInvoice(invoice as Invoice) async as Invoice
	{
		meta {
			description "Create or update an invoice"
		}
		if invoice.id:
			return await updateInvoice(invoice)
		return await createInvoice(invoice)
	}

	func deleteInvoice(invoiceId as string) async as Invoice
	{
		meta {
			description "Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be voided."
		}
		var resp = await requestAndValidate("DELETE", "/invoices/" .. URLEncoder.encode(invoiceId), null, null)
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func finalizeInvoice(invoiceId as string, params as FinalizeInvoiceParameters) async as Invoice
	{
		meta {
			description "Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method."
		}
		var resp = await requestAndValidate("POST", "/invoices/" .. URLEncoder.encode(invoiceId) .. "/finalize", null, QueryString.encodeDynamicMapToBuffer(params.toDynamicMap()))
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func payInvoice(invoiceId as string, params as PayInvoiceParameters) async as Invoice
	{
		meta {
			description "Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your subscriptions settings."
		}
		var resp = await requestAndValidate("POST", "/invoices/" .. URLEncoder.encode(invoiceId) .. "/pay", null, QueryString.encodeDynamicMapToBuffer(params.toDynamicMap()))
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func sendInvoice(invoiceId as string) async as Invoice
	{
		meta {
			description "Stripe will automatically send invoices to customers according to your subscriptions settings. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so."
		}
		var resp = await requestAndValidate("POST", "/invoices/" .. URLEncoder.encode(invoiceId) .. "/send", null, null)
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func voidInvoice(invoiceId as string) async as Invoice
	{
		meta {
			description "Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to deletion, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found."
		}
		var resp = await requestAndValidate("POST", "/invoices/" .. URLEncoder.encode(invoiceId) .. "/void", null, null)
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func markInvoiceAsUncollectible(invoiceId as string) async as Invoice
	{
		meta {
			description "Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes."
		}
		var resp = await requestAndValidate("POST", "/invoices/" .. URLEncoder.encode(invoiceId) .. "/mark_uncollectible", null, null)
		return Invoice.forData(resp.getBodyAsDynamicMap())
	}

	func getInvoiceLineItems(invoiceId as string, starting_after as string?) async as vector<InvoiceLineItem>
	{
		meta {
			description "When retrieving an invoice, you'll get a lines property containing the total count of line items and the first handful of those items."
		}
		var url = URL.forString("/invoices/" .. URLEncoder.encode(invoiceId) .. "/lines")
		url.addQueryParameter("limit", "100")
		if starting_after:
			url.addQueryParameter("starting_after", starting_after)
		var resp = await requestAndValidate("GET", url.toString(), null, null)
		var bodyMap = resp.getBodyAsDynamicMap()
		var data = bodyMap.getDynamicVector("data")
		if not data:
			Error.throw("noDataFieldInResponse", bodyMap)
		var v = new vector<InvoiceLineItem>
		foreach c as DynamicMap in data.toVector():
			v += InvoiceLineItem.forData(c)
		return v
	}
}
