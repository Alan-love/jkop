
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class abstract:

const ANY = 0
const SHA1 = 1
const SHA224 = 2
const SHA256 = 3
const SHA384 = 4
const SHA512 = 5

func forSha1 static as this:
	return forVersion(SHA1)

func forSha224 static as this:
	return forVersion(SHA224)

func forSha256 static as this:
	return forVersion(SHA256)

func forSha384 static as this:
	return forVersion(SHA384)

func forSha512 static as this:
	return forVersion(SHA512)

func forVersion(version as int) static as this
{
	var v as this?
	IFDEF "target_dotnet_cs" {
		v = new SHAEncoderForDotnetCS() {
			version version
		}
	}
	ELSE IFDEF "target_java" {
		v = new SHAEncoderJava() {
			version version
		}
	}
	ELSE IFDEF "target_objc" {
		v = new SHAEncoderObjC() {
			version version
		}
	}
	ELSE IFDEF "target_kotlin" {
		v = new SHAEncoderForKotlin() {
			version version
		}
	}
	ELSE IFDEF "target_node_js" {
		v = new SHAEncoderForNodeJS() {
			version version
		}
	}
	ELSE {
		v = new SHAEncoderGeneric() {
			version version
		}
	}
	return v
}

prop version as int

func encodeBuffer(data as buffer) abstract throws Exception as buffer

func encodeString(data as string) virtual throws Exception as buffer:
	return encodeBuffer(String.toUTF8Buffer(data))

func encodeFile(file as File) virtual throws Exception as buffer
{
	var content = file.getContentsBuffer()
	return encodeBuffer(content)
}

func getHashForString(data as string) virtual throws Exception as string:
	return String.forBufferHex(encodeString(data))

func getHashForBuffer(data as buffer) virtual throws Exception as string:
	return String.forBufferHex(encodeBuffer(data))

func getHashForFile(file as File) virtual throws Exception as string:
	return String.forBufferHex(encodeFile(file))
