
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SHAEncoder:

func encodeBuffer(data as buffer) override throws Exception as buffer
{
	var algorithm as string?
	if SHAEncoder.ANY == version || SHAEncoder.SHA1 == version {
		algorithm = "SHA-1"
	}
	else if SHAEncoder.SHA256 == version {
		algorithm = "SHA-256"
	}
	else if SHAEncoder.SHA384 == version {
		algorithm = "SHA-384"
	}
	else if SHAEncoder.SHA512 == version {
		algorithm = "SHA-512"
	}
	if not algorithm:
		Error.throw("unsupportedShaAlgorithm", String.forInteger(version))
	var v as buffer?
	lang "java" {{{
		try {
			java.security.MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
			md.update(data);
			v = md.digest();
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
			v = null;
		}
	}}}
	if not v:
		Error.throw("failedToComputeShaHash", data)
	return v
}
