
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SHAEncoder:

func encodeBuffer(data as buffer) override throws Exception as buffer
{
	var algorithm as int
	if SHAEncoder.ANY == version || SHAEncoder.SHA1 == version {
		algorithm = 128
	}
	else if SHAEncoder.SHA256 == version {
		algorithm = 256
	}
	else if SHAEncoder.SHA384 == version {
		algorithm = 384
	}
	else if SHAEncoder.SHA512 == version {
		algorithm = 512
	}
	else {
		Error.throw("unsupportedShaAlgorithm", String.forInteger(version))
	}
	var sha = new SHA()
	sha.encode(data, algorithm)
	var v = sha.digest()
	if not v:
		Error.throw("failedToComputeShaHash", data)
	return v
}

class SHA
{
	var sha128 = 160
	var sha256 = 256
	var sha384 = 384
	var sha512 = 512
	var blockSize512 = 512
	var blockSize1024 = 1024
	var block64 = 448
	var block128 = 896
	var digestLength as int
	var blockBitSize as int
	var k as array<uint32>?
	var k2 as array<uint64>?
	var hash1 as array<uint32>?
	var hash2 as array<uint64>?
	var input as buffer?
	var result as buffer?

	func encode(buf as buffer, version as int)
	{
		input = buf
		if version == sha384 || version == sha512:
			k2 = new uint64[] [
				0x428A2F98D728AE22, 0x7137449123EF65CD, 0xB5C0FBCFEC4D3B2F, 0xE9B5DBA58189DBBC,
				0x3956C25BF348B538, 0x59F111F1B605D019, 0x923F82A4AF194F9B, 0xAB1C5ED5DA6D8118,
				0xD807AA98A3030242, 0x12835B0145706FBE, 0x243185BE4EE4B28C, 0x550C7DC3D5FFB4E2,
				0x72BE5D74F27B896F, 0x80DEB1FE3B1696B1, 0x9BDC06A725C71235, 0xC19BF174CF692694,
				0xE49B69C19EF14AD2, 0xEFBE4786384F25E3, 0x0FC19DC68B8CD5B5, 0x240CA1CC77AC9C65,
				0x2DE92C6F592B0275, 0x4A7484AA6EA6E483, 0x5CB0A9DCBD41FBD4, 0x76F988DA831153B5,
				0x983E5152EE66DFAB, 0xA831C66D2DB43210, 0xB00327C898FB213F, 0xBF597FC7BEEF0EE4,
				0xC6E00BF33DA88FC2, 0xD5A79147930AA725, 0x06CA6351E003826F, 0x142929670A0E6E70,
				0x27B70A8546D22FFC, 0x2E1B21385C26C926, 0x4D2C6DFC5AC42AED, 0x53380D139D95B3DF,
				0x650A73548BAF63DE, 0x766A0ABB3C77B2A8, 0x81C2C92E47EDAEE6, 0x92722C851482353B,
				0xA2BFE8A14CF10364, 0xA81A664BBC423001, 0xC24B8B70D0F89791, 0xC76C51A30654BE30,
				0xD192E819D6EF5218, 0xD69906245565A910, 0xF40E35855771202A, 0x106AA07032BBD1B8,
				0x19A4C116B8D2D0C8, 0x1E376C085141AB53, 0x2748774CDF8EEB99, 0x34B0BCB5E19B48A8,
				0x391C0CB3C5C95A63, 0x4ED8AA4AE3418ACB, 0x5B9CCA4F7763E373, 0x682E6FF3D6B2B8A3,
				0x748F82EE5DEFB2FC, 0x78A5636F43172F60, 0x84C87814A1F0AB72, 0x8CC702081A6439EC,
				0x90BEFFFA23631E28, 0xA4506CEBDE82BDE9, 0xBEF9A3F7B2C67915, 0xC67178F2E372532B,
				0xCA273ECEEA26619C, 0xD186B8C721C0C207, 0xEADA7DD6CDE0EB1E, 0xF57D4F7FEE6ED178,
				0x06F067AA72176FBA, 0x0A637DC5A2C898A6, 0x113F9804BEF90DAE, 0x1B710B35131C471B,
				0x28DB77F523047D84, 0x32CAAB7B40C72493, 0x3C9EBE0A15C9BEBC, 0x431D67C49C100D4C,
				0x4CC5D4BECB3E42B6, 0x597F299CFC657E2A, 0x5FCB6FAB3AD6FAEC, 0x6C44198C4A475817
			]
		if version == 128 {
			digestLength = sha128
			blockBitSize = blockSize512
			hash1 = new uint32[] [
				0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476,
				0xC3D2E1F0
			]
		}
		else if version == sha256 {
			digestLength = sha256
			blockBitSize = blockSize512
			hash1 = new uint32[] [
				0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,
				0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19
			]
			k = new uint32[] [
				0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
				0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
				0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
				0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
				0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
				0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
				0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
				0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
				0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
				0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
				0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
				0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
				0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
				0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
				0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
				0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
			]
		}
		else if version == sha384 {
			digestLength = sha384
			blockBitSize = blockSize1024
			hash2 = new uint64[] [
				0xCBBB9D5DC1059ED8, 0x629A292A367CD507, 0x9159015A3070DD17, 0x152FECD8F70E5939,
				0x67332667FFC00B31, 0x8EB44A8768581511, 0xDB0C2E0D64F98FA7, 0x47B5481DBEFA4FA4
			]
		}
		else {
			digestLength = sha512
			blockBitSize = blockSize1024
			hash2 = new uint64[] [
				0x6A09E667F3BCC908, 0xBB67AE8584CAA73B, 0x3C6EF372FE94F82B, 0xA54FF53A5F1D36F1,
				0x510E527FADE682D1, 0x9B05688C2B3E6C1F, 0x1F83D9ABFB41BD6B, 0x5BE0CD19137E2179
			]
		}
	}

	func digest as buffer?
	{
		assert input
		if result:
			return result
		var ptr = bitPadding(input)
		var messageBlocks = blocks(ptr, blockBitSize / 8)
		foreach block in messageBlocks {
			if blockBitSize == blockSize512 {
				shaProcess32(block)
			}
			else {
				shaProcess64(block)
			}
		}
		var ret = Buffer.allocate(digestLength / 8)
		if blockBitSize == blockSize512 {
			var idx = 0
			assert hash1
			foreach element in hash1 {
				var pos = idx * 4
				ret[pos] = (((element >> 24) as! uint32) & 0xFF) as! uint8
				ret[pos + 1] = (((element >> 16) as! uint32) & 0xFF) as! uint8
				ret[pos + 2] = (((element >> 8) as! uint32) & 0xFF) as! uint8
				ret[pos + 3] = ((element as! uint32) & 0xFF) as! uint8
				idx += 1
			}
		}
		else {
			var idx = 0
			assert hash2
			foreach element in hash2 {
				if digestLength == sha384 && idx == 6:
					break
				var pos = idx * 8
				ret[pos] = (((element >> 56) as! uint64) & 0xFF) as! uint8
				ret[pos + 1] = (((element >> 48) as! uint64) & 0xFF) as! uint8
				ret[pos + 2] = (((element >> 40) as! uint64) & 0xFF) as! uint8
				ret[pos + 3] = (((element >> 32) as! uint64) & 0xFF) as! uint8
				ret[pos + 4] = (((element >> 24) as! uint64) & 0xFF) as! uint8
				ret[pos + 5] = (((element >> 16) as! uint64) & 0xFF) as! uint8
				ret[pos + 6] = (((element >> 8) as! uint64) & 0xFF) as! uint8
				ret[pos + 7] = ((element as! uint64) & 0xFF) as! uint8
				idx += 1
			}
		}
		result = ret
		return ret
	}

	func shaProcess32(block as buffer)
	{
		assert hash1
		assert k
		var kcount as int
		if digestLength == sha128 {
			kcount = 80
		}
		else {
			kcount = sizeof k
		}
		var output = new uint32[kcount]
		for(var t = 0 ; t < sizeof output ; t++) {
			if t <= 15 {
				var index = t * 4
				output[t] = ((block[index] as! uint32) << 24) as! uint32
				output[t] = output[t] | ((block[index + 1] as! uint32) << 16) as! uint32
				output[t] = output[t] | ((block[index + 2] as! uint32) << 8) as! uint32
				output[t] = output[t] | (block[index + 3] as! uint32) as! uint32
			}
			else if digestLength == sha128 {
				output[t] = rotateLeft(output[t - 3], 1) ^ rotateLeft(output[t - 8], 1) ^ rotateLeft(output[t - 14], 1) ^ rotateLeft(output[t - 16], 1)
			}
			else {
				var s0 = rotateRight32(output[t - 15] as! uint32, 7) ^ rotateRight32(output[t - 15] as! uint32, 18) ^ (forUint32((output[t - 15] as! uint32) >> 3) as! uint32)
				var s1 = rotateRight32(output[t - 2] as! uint32, 17) ^ rotateRight32(output[t - 2] as! uint32, 19) ^ (forUint32((output[t - 2] as! uint32) >> 10) as! uint32)
				output[t] = forUint32(s1 + output[t - 7] + s0 + output[t - 16])
			}
		}
		var a = hash1[0]
		var b = hash1[1]
		var c = hash1[2]
		var d = hash1[3]
		var e = hash1[4]
		if digestLength == sha128 {
			for(var j = 0 ; j <= 79 ; j++) {
				var f = 0 as! uint32
				var k = 0 as! uint32
				if j <= 19 {
					f = forUint32((b & c) | (~b & d))
					k = 0x5A827999
				}
				else if j <= 39 {
					f = forUint32(b ^ c ^ d)
					k = 0x6ED9EBA1
				}
				else if j <= 59 {
					f = forUint32((b & c) | (b & d) | (c & d))
					k = 0x8F1BBCDC
				}
				else if j <= 79 {
					f = forUint32(b ^ c ^ d)
					k = 0xCA62C1D6
				}
				var temp = forUint32(rotateLeft(a, 5) + f + e + output[j] + k)
				e = d
				d = c
				c = rotateLeft(b, 30)
				b = a
				a = temp
			}
			hash1[0] = a + hash1[0]
			hash1[1] = b + hash1[1]
			hash1[2] = c + hash1[2]
			hash1[3] = d + hash1[3]
			hash1[4] = e + hash1[4]
		}
		else {
			var f = hash1[5]
			var g = hash1[6]
			var h = hash1[7]
			for(var t = 0 ; t < sizeof k ; t++) {
				var e1 = rotateRight32(e, 6) ^ rotateRight32(e, 11) ^ rotateRight32(e, 25)
				var ch = (e & f) ^ (~e & g)
				var t1 = forUint32(h + e1 + ch + k[t] + output[t])
				var e0 = rotateRight32(a, 2) ^ rotateRight32(a, 13) ^ rotateRight32(a, 22)
				var maj = (a & b) ^ (a & c) ^ (b & c)
				var t2 = forUint32(e0 + maj)
				h = g
				g = f
				f = e
				e = forUint32(d + t1)
				d = c
				c = b
				b = a
				a = forUint32(t1 + t2)
			}
			hash1[0] = a + hash1[0]
			hash1[1] = b + hash1[1]
			hash1[2] = c + hash1[2]
			hash1[3] = d + hash1[3]
			hash1[4] = e + hash1[4]
			hash1[5] = f + hash1[5]
			hash1[6] = g + hash1[6]
			hash1[7] = h + hash1[7]
		}
	}

	func forUint32(v as uint32) as uint32:
		return v & 0xFFFFFFFF

	func forUint64(v as uint64) as uint64:
		return v & 0xFFFFFFFFFFFFFFFF

	func shaProcess64(block as buffer)
	{
		assert k2
		assert hash2
		var output = new uint64[sizeof k2]
		for(var t = 0 ; t < sizeof output ; t++) {
			if t <= 15 {
				var index = t * 8
				output[t] = ((block[index + 0] as! uint64) << 56) as! uint64
				output[t] = output[t] | ((block[index + 1] as! uint64) << 48) as! uint64
				output[t] = output[t] | ((block[index + 2] as! uint64) << 40) as! uint64
				output[t] = output[t] | ((block[index + 3] as! uint64) << 32) as! uint64
				output[t] = output[t] | ((block[index + 4] as! uint64) << 24) as! uint64
				output[t] = output[t] | ((block[index + 5] as! uint64) << 16) as! uint64
				output[t] = output[t] | ((block[index + 6] as! uint64) << 8) as! uint64
				output[t] = output[t] | (block[index + 7] as! uint64)
			}
			else {
				var s0 = rotateRight64(output[t - 15] as! uint64, 1) ^ rotateRight64(output[t - 15] as! uint64, 8) ^ (forUint64((output[t - 15] as! uint64) >> 7) as! uint64)
				var s1 = rotateRight64(output[t - 2] as! uint64, 19) ^ rotateRight64(output[t - 2] as! uint64, 61) ^ (forUint64((output[t - 2] as! uint64) >> 6) as! uint64)
				output[t] = forUint64(s1 + output[t - 7] + s0 + output[t - 16])
			}
		}
		var a = hash2[0]
		var b = hash2[1]
		var c = hash2[2]
		var d = hash2[3]
		var e = hash2[4]
		var f = hash2[5]
		var g = hash2[6]
		var h = hash2[7]
		for(var t = 0 ; t < sizeof k2 ; t++) {
			var e0 = forUint64(rotateRight64(a, 28) ^ rotateRight64(a, 34) ^ rotateRight64(a, 39))
			var maj = (a & b) ^ (a & c) ^ (b & c)
			var t2 = forUint64(e0 + maj)
			var e1 = forUint64(rotateRight64(e, 14) ^ rotateRight64(e, 18) ^ rotateRight64(e, 41))
			var ch = (e & f) ^ (~e & g)
			var t1 = forUint64(h + e1 + ch + k2[t] + output[t])
			h = g
			g = f
			f = e
			e = forUint64(d + t1)
			d = c
			c = b
			b = a
			a = forUint64(t1 + t2)
		}
		hash2[0] = a + hash2[0]
		hash2[1] = b + hash2[1]
		hash2[2] = c + hash2[2]
		hash2[3] = d + hash2[3]
		hash2[4] = e + hash2[4]
		hash2[5] = f + hash2[5]
		hash2[6] = g + hash2[6]
		hash2[7] = h + hash2[7]
	}

	func bitPadding(input as buffer) as buffer
	{
		var inputBitLength = Buffer.getSize(input) * 8
		var newBuf = Buffer.resize(input, Buffer.getSize(input) + 1)
		Buffer.setByte(newBuf, Buffer.getSize(newBuf) - 1, 0x80 as! uint8)
		var mod = (inputBitLength % blockBitSize) as! int
		var bitsToAppend as int
		if blockBitSize == blockSize512 {
			if mod < block64 {
				bitsToAppend = (block64 - 1 - mod) as! int
			}
			else {
				bitsToAppend = (blockBitSize + block64 - mod - 1) as! int
			}
			var osz = Buffer.getSize(newBuf)
			var asz = (bitsToAppend - 7) / 8
			newBuf = Buffer.resize(newBuf, osz + asz)
			for(var n = 0 ; n < asz ; n++):
				newBuf[osz as! int + n] = 0 as! uint8
		}
		else {
			if mod < block128 {
				bitsToAppend = (block128 - 1 - mod) as! int
			}
			else {
				bitsToAppend = (blockBitSize + block128 - mod - 1) as! int
			}
			var osz = Buffer.getSize(newBuf)
			var asz = ((bitsToAppend - 7) + 64) / 8
			newBuf = Buffer.resize(newBuf, osz + asz)
			for(var n = 0 ; n < asz ; n++):
				newBuf[osz as! int + n] = 0 as! uint8
		}
		newBuf = Buffer.resize(newBuf, Buffer.getSize(newBuf) + 8)
		var sz = Buffer.getSize(newBuf) as! int
		newBuf[sz - 8] = (((inputBitLength as! uint64) & 0xFF00000000000000) >> 56) as! uint8
		newBuf[sz - 7] = (((inputBitLength as! uint64) & 0x00FF000000000000) >> 48) as! uint8
		newBuf[sz - 6] = (((inputBitLength as! uint64) & 0x0000FF0000000000) >> 40) as! uint8
		newBuf[sz - 5] = (((inputBitLength as! uint64) & 0x000000FF00000000) >> 32) as! uint8
		newBuf[sz - 4] = (((inputBitLength as! uint64) & 0x00000000FF000000) >> 24) as! uint8
		newBuf[sz - 3] = (((inputBitLength as! uint64) & 0x0000000000FF0000) >> 16) as! uint8
		newBuf[sz - 2] = (((inputBitLength as! uint64) & 0x000000000000FF00) >> 8) as! uint8
		newBuf[sz - 1] = ((inputBitLength as! uint64) & 0x00000000000000FF) as! uint8
		return newBuf
	}

	func blocks(buf as buffer, size as int) as vector<buffer>
	{
		var msgBlocks = new vector<buffer>
		for(var i = 0 ; i < Buffer.getSize(buf) ; i += size) {
			var buff = Buffer.allocate(size)
			buff = Buffer.getSubBuffer(buf, i, size)
			msgBlocks += buff
		}
		return msgBlocks
	}

	func rotateRight32(num as uint32, cnt as int) as uint32:
		return forUint32(forUint32(num) >> cnt) | forUint32(forUint32(num) << (32 - cnt))

	func rotateRight64(num as uint64, cnt as int) as uint64:
		return ((num >> cnt) | (num << (64 - cnt))) as! uint64

	func rotateLeft(num as uint32, cnt as int) as uint32:
		return forUint32(forUint32(num) << cnt) | forUint32(forUint32(num) >> (32 - cnt)) as! uint32
}
