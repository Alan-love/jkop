
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.nodejs

class is SHAEncoder:

func createHasher private as dynamic
{
	var algo as string?
	if version == SHAEncoder.ANY {
		algo = "sha256"
	}
	else if version == SHAEncoder.SHA1 {
		algo = "sha1"
	}
	else if version == SHAEncoder.SHA224 {
		algo = "sha224"
	}
	else if version == SHAEncoder.SHA256 {
		algo = "sha256"
	}
	else if version == SHAEncoder.SHA384 {
		algo = "sha384"
	}
	else if version == SHAEncoder.SHA512 {
		algo = "sha512"
	}
	else {
		Error.throw("unsupportedShaAlgorithm", String.forInteger(version))
	}
	var v = NodeModule.require("crypto").createHash!(algo)
	if v == null:
		Error.throw("unableToCreateHasher", String.forInteger(version))
	return v
}

func encodeBuffer(data as buffer) override as buffer
{
	var hasher = createHasher()
	hasher.update!(data)
	var v = hasher.digest!() as! buffer?
	if not v:
		Error.throw("failedToComputeShaHash", data)
	return v
}

func encodeFile(file as File) override as buffer
{
	var bsz = 10 * 1024 * 1024
	var fsz = file.getSize()
	if fsz < bsz {
		if fsz == 0:
			return Buffer.allocate(0)
		var content = file.getContentsBuffer()
		return encodeBuffer(content)
	}
	var rd = file.read()
	var hasher = createHasher()
	var buffer = Buffer.allocate(1024)
	loop {
		var sz = rd.read(buffer)
		if sz < 1:
			break
		var bb = buffer
		if sz < bsz:
			bb = Buffer.getSubBuffer(buffer, 0, sz)
		hasher.update!(bb)
	}
	rd.close()
	var v = hasher.digest!() as! buffer?
	if not v:
		Error.throw("failedToComputeShaHash", file)
	return v
}
