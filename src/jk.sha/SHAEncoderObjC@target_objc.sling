
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SHAEncoder:

depend "objc-header-h:<CommonCrypto/CommonDigest.h>"

func encodeBuffer(data as buffer) override as buffer
{
	var v as buffer?
	if SHAEncoder.ANY == version || SHAEncoder.SHA1 == version {
		lang "objc" {{{
			unsigned char digest[CC_SHA1_DIGEST_LENGTH];
			NSUInteger size = [data length] / sizeof(unsigned char);
			unsigned char* array = (unsigned char*)[data bytes];
			CC_SHA1(array, size, digest);
			v = [NSData dataWithBytes:(const void *)digest length:sizeof(unsigned char)*CC_SHA1_DIGEST_LENGTH];
		}}}
	}
	else if SHAEncoder.SHA224 == version {
		lang "objc" {{{
			unsigned char digest[CC_SHA224_DIGEST_LENGTH];
			NSUInteger size = [data length] / sizeof(unsigned char);
			unsigned char* array = (unsigned char*)[data bytes];
			CC_SHA224(array, size, digest);
			v = [NSData dataWithBytes:(const void *)digest length:sizeof(unsigned char)*CC_SHA224_DIGEST_LENGTH];
		}}}
	}
	else if SHAEncoder.SHA256 == version {
		lang "objc" {{{
			unsigned char digest[CC_SHA256_DIGEST_LENGTH];
			NSUInteger size = [data length] / sizeof(unsigned char);
			unsigned char* array = (unsigned char*)[data bytes];
			CC_SHA256(array, size, digest);
			v = [NSData dataWithBytes:(const void *)digest length:sizeof(unsigned char)*CC_SHA256_DIGEST_LENGTH];
		}}}
	}
	else if SHAEncoder.SHA384 == version {
		lang "objc" {{{
			unsigned char digest[CC_SHA384_DIGEST_LENGTH];
			NSUInteger size = [data length] / sizeof(unsigned char);
			unsigned char* array = (unsigned char*)[data bytes];
			CC_SHA384(array, size, digest);
			v = [NSData dataWithBytes:(const void *)digest length:sizeof(unsigned char)*CC_SHA384_DIGEST_LENGTH];
		}}}
	}
	else if SHAEncoder.SHA512 == version {
		lang "objc" {{{
			unsigned char digest[CC_SHA512_DIGEST_LENGTH];
			NSUInteger size = [data length] / sizeof(unsigned char);
			unsigned char* array = (unsigned char*)[data bytes];
			CC_SHA512(array, size, digest);
			v = [NSData dataWithBytes:(const void *)digest length:sizeof(unsigned char)*CC_SHA512_DIGEST_LENGTH];
		}}}
	}
	else {
		Error.throw("unsupportedShaAlgorithm", String.forInteger(version))
	}
	if not v:
		Error.throw("failedToComputeShaHash", data)
	return v
}
