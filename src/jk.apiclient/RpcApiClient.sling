
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json
import jk.base64

class:

func callRemoteFunction(apiClient as ApiClient, name as string, data as DynamicMap?) static async throws Exception as DynamicMap
{
	var dd = data
	if not dd:
		dd = new DynamicMap()
	var bdata = String.toUTF8Buffer(JSONEncoder.toString(dd))
	var url = "/func/" .. name
	var headers = new KeyValueList<string,string>()
	headers.add("content-type", "application/json")
	var response = await apiClient.request("POST", url, headers, bdata)
	var body = response.body
	var str = String.forUTF8Buffer(body)
	var data = JSONParser.parseString(str) as DynamicMap
	if not data {
		var detail = new DynamicMap()
		detail.setString("url", url)
		detail.setString("responseBody", str)
		Error.throw("failedToCallRemoteFunction", JSONEncoder.toString(detail))
	}
	data.setString("url", url)
	data.setString("name", name)
	return data
}

func validateResponse(response as DynamicMap) static throws Exception as object
{
	if response.getCount() < 1:
		Error.throw("responseWithNoContent", null)
	var statusInBody = response.getString("status")
	if not String.equals(statusInBody, "ok") {
		if String.equals(statusInBody, "error") {
			var error = response.getString("errorCode")
			var detail = response.getString("errorDetail")
			if String.isEmpty(error) {
				error = "errorStatusFromRemoteFunction"
				if String.isEmpty(detail):
					detail = response.getString("name")
			}
			Error.throw(error, detail)
		}
		else {
			Error.throw("unsupportedRpcStatus", statusInBody)
		}
	}
	var v = response.getObject("data")
	if not v:
		Error.throw("responseHasNoData", response)
	return v
}

func responseAsString(response as DynamicMap) static throws Exception as string
{
	var r = validateResponse(response)
	return String.asValueOrThrowError(r)
}

func responseAsBoolean(response as DynamicMap) static throws Exception as bool
{
	var r = validateResponse(response)
	return Boolean.asValueOrThrowError(r)
}

func responseAsLongInteger(response as DynamicMap) static throws Exception as long
{
	var r = validateResponse(response)
	return LongInteger.asValueOrThrowError(r)
}

func responseAsInteger(response as DynamicMap) static throws Exception as long
{
	var r = validateResponse(response)
	return Integer.asValueOrThrowError(r)
}

func responseAsBuffer(response as DynamicMap) static throws Exception as buffer
{
	var r = validateResponse(response)
	var v = Buffer.asValueOrNull(r)
	if not v {
		var rs = String.asValueOrNull(r)
		if rs:
			v = Base64Decoder.decode(rs)
	}
	if not v:
		Error.throw("responseIsNotBuffer", response)
	return v
}

func responseAsDynamicMap(response as DynamicMap) static throws Exception as DynamicMap
{
	var r = validateResponse(response)
	return DynamicMap.asValueOrThrowError(r)
}
