
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is TCPSocket is FileDescriptor:

pvar fd as int = -1

var isBlocking = true

dtor:
	close()

func getFileDescriptor as int:
	return fd

func createSocket private as bool
{
	if fd >= 0:
		close()
	fd = lang "lua" as int {{{ _net:create_tcp_socket() }}}
	if fd < 0:
		return false
	return true
}

func close override
{
	var fd = this.fd
	assert fd >= 0
	lang "lua" {{{
		_net:close_tcp_socket(fd)
	}}}
	this.fd = -1
}

func getRemoteAddress override throws Exception as string
{
	assert fd >= 0
	var fd = this.fd
	return lang "lua" as string {{{ _net:get_tcp_socket_peer_address(fd) }}}
}

func getRemotePort override throws Exception as int
{
	assert fd >= 0
	var fd = this.fd
	return lang "lua" as int {{{ _net:get_tcp_socket_peer_port(fd) }}}
}

func getLocalAddress override throws Exception as string:
	ERROR NOT_IMPLEMENTED

func getLocalPort override throws Exception as int:
	ERROR NOT_IMPLEMENTED

func connect(address as string, port as int) override throws Exception
{
	if not createSocket():
		Error.throw("failedToCreateTcpSocket", null)
	var fd = this.fd
	if lang "lua" as int {{{ _net:connect_tcp_socket(fd, address, port) }}} != 0 {
		close()
		Error.throw("failedToConnectTcpSocket", address .. ":" .. String.forInteger(port))
	}
}

func listen(port as int) override throws Exception
{
	if not createSocket():
		Error.throw("failedToCreateTcpSocket", null)
	var fd = this.fd
	if lang "lua" as int {{{ _net:listen_tcp_socket(fd, port) }}} != 0 {
		close()
		Error.throw("failedToListenToTcpPort", String.forInteger(port))
	}
}

func accept override throws Exception as TCPSocket?
{
	assert fd >= 0
	var r = 0
	var error as string?
	var fd = this.fd
	lang "lua" {{{
		r, error = _net:accept_tcp_socket(fd)
	}}}
	if error:
		throw ExceptionWithError.forCode("failedToAcceptSocket", null, error)
	assert r >= 0
	var v = new this()
	v.setFd(r)
	return v
}

func setBlocking(blocking as bool) override throws Exception as bool
{
	assert fd >= 0
	var r = 0
	var fd = this.fd
	if blocking {
		lang "lua" {{{
			r = _net:set_socket_blocking(fd)
		}}}
	}
	else {
		lang "lua" {{{
			r = _net:set_socket_non_blocking(fd)
		}}}
	}
	if r != 0:
		return false
	isBlocking = blocking
	return true
}

func getBlocking override throws Exception as bool:
	return isBlocking

func read(buffer as buffer) override throws Exception as int:
	return readWithTimeout(buffer, -1)

func readWithTimeout(buffer as buffer, timeout as int) override throws Exception as int
{
	if fd < 0:
		return -1
	if buffer == null:
		return -1
	var v = 0
	var fd = this.fd
	lang "lua" {{{
		v = _net:read_from_tcp_socket(fd, buffer, #buffer, timeout)
	}}}
	return v
}

func write(buffer as buffer, size as int) override throws Exception as int
{
	if fd < 0:
		return -1
	if buffer == null:
		return -1
	var sz = size
	if sz < 0:
		sz = sizeof buffer
	var v = 0
	var fd = this.fd
	lang "lua" {{{
		v = _net:write_to_tcp_socket(fd, buffer, sz)
	}}}
	return v
}
