
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is TCPSocket is FileDescriptor:

depend "objc-header-m:<unistd.h>"
depend "objc-header-m:<errno.h>"
depend "objc-header-m:<string.h>"
depend "objc-header-m:<sys/types.h>"
depend "objc-header-m:<sys/socket.h>"
depend "objc-header-m:<netinet/in.h>"
depend "objc-header-m:<arpa/inet.h>"
depend "objc-header-m:<fcntl.h>"

pvar fileDescriptor = -1

var blocking = true

dtor:
	close()

func getRemoteAddress override as string?
{
	var r as int
	lang "objc" {{{
		socklen_t s = (socklen_t)sizeof(struct sockaddr_in);
		struct sockaddr_in new_addr;
		r = getpeername(fileDescriptor, (struct sockaddr*)(&new_addr), &s);
	}}}
	if r < 0:
		return null
	var v as string? = null
	lang "objc" {{{
		char* adds = (char*)inet_ntoa(new_addr.sin_addr);
		if(adds != NULL) {
			v = [[NSString alloc] initWithUTF8String:adds];
		}
	}}}
	return v
}

func getRemotePort override as int
{
	var r as int
	lang "objc" {{{
		socklen_t s = (socklen_t)sizeof(struct sockaddr_in);
		struct sockaddr_in new_addr;
		r = getpeername(fileDescriptor, (struct sockaddr*)(&new_addr), &s);
	}}}
	if r < 0:
		return 0
	lang "objc" {{{
		r = ntohs(new_addr.sin_port);
	}}}
	return r
}

func getLocalAddress override as string?
{
	var r as int
	lang "objc" {{{
		socklen_t s = (socklen_t)sizeof(struct sockaddr_in);
		struct sockaddr_in new_addr;
		r = getsockname(fileDescriptor, (struct sockaddr*)(&new_addr), &s);
	}}}
	if r < 0:
		return null
	var v as string? = null
	lang "objc" {{{
		char* adds = (char*)inet_ntoa(new_addr.sin_addr);
		if(adds != NULL) {
			v = [[NSString alloc] initWithUTF8String:adds];
		}
	}}}
	return v
}

func getLocalPort override as int
{
	var r as int
	lang "objc" {{{
		socklen_t s = (socklen_t)sizeof(struct sockaddr_in);
		struct sockaddr_in new_addr;
		r = getsockname(fileDescriptor, (struct sockaddr*)(&new_addr), &s);
	}}}
	if r < 0:
		return 0
	lang "objc" {{{
		r = ntohs(new_addr.sin_port);
	}}}
	return r
}

func close override
{
	if fileDescriptor < 0:
		return
	var r as int
	lang "objc" {{{
		r = close(fileDescriptor);
	}}}
	if r < 0 {
		var err as string?
		lang "objc" {{{
			const char* ee = strerror(errno);
			if(ee != NULL) {
				err = [[NSString alloc] initWithUTF8String:ee];
			}
		}}}
		if err:
			println "Failed to close a TCP socket: " .. err
	}
	else {
		fileDescriptor = -1
	}
}

func setBlocking(blocking as bool) override as bool
{
	if fileDescriptor < 0:
		return false
	if blocking == false {
		lang "objc" {{{
			int f = fcntl(fileDescriptor, F_GETFL, 0);
			fcntl(fileDescriptor, F_SETFL, f | O_NONBLOCK);
		}}}
	}
	else {
		lang "objc" {{{
			int f = fcntl(fileDescriptor, F_GETFL, 0);
			fcntl(fileDescriptor, F_SETFL, f & ~O_NONBLOCK);
		}}}
	}
	this.blocking = blocking
	return true
}

func getBlocking override as bool:
	return blocking

func connect(address as string, port as int) override
{
	if port < 1:
		Error.throw("invalidPortNumber", String.forInteger(port))
	if fileDescriptor >= 0:
		close()
	var fd as int
	lang "objc" {{{
		fd = socket(AF_INET, SOCK_STREAM, 0);
	}}}
	if fd < 0:
		Error.throw("failedToCreateTcpStreamSocket", null)
	var err as string? = null
	lang "objc" {{{
		int sai_size = sizeof(struct sockaddr_in);
		struct sockaddr_in svr_addr;
		memset(&svr_addr, 0, sai_size);
		svr_addr.sin_family = AF_INET;
		svr_addr.sin_addr.s_addr = inet_addr([address UTF8String]);
		svr_addr.sin_port = htons(port);
		if(connect(fd, (struct sockaddr*)(&svr_addr), sai_size) != 0) {
			char* ee = strerror(errno);
			if(ee == NULL) {
				ee = (char*)"Unknown error";
			}
			err = [[NSString alloc] initWithUTF8String:ee];
		}
	}}}
	if err {
		lang "objc" {{{
			close(fd);
		}}}
		Error.throw("failedToConnectTcpSocket", address .. ":" .. String.forInteger(port) .. "': " .. err)
	}
	fileDescriptor = fd
}

func listen(port as int) override
{
	if port < 1:
		Error.throw("invalidPortNumber", String.forInteger(port))
	if fileDescriptor >= 0:
		close()
	var fd as int
	lang "objc" {{{
		int reuseaddr = 1;
		fd = socket(AF_INET, SOCK_STREAM, 0);
		setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (const char*)&reuseaddr, sizeof(int));
	}}}
	if fd < 0:
		Error.throw("failedToCreateTcpStreamSocket", null)
	var v = false
	lang "objc" {{{
		struct sockaddr_in addr;
		memset(&addr, 0, sizeof(struct sockaddr_in));
		addr.sin_family = AF_INET;
		addr.sin_port = htons(port);
		if(bind(fd, (struct sockaddr*)(&addr), sizeof(struct sockaddr_in)) >= 0) {
			if(listen(fd, 256) >= 0) {
				v = YES;
			}
		}
	}}}
	if v == false {
		lang "objc" {{{
			close(fd);
		}}}
		Error.throw("failedToListenToTcpPort", String.forInteger(port))
	}
	fileDescriptor = fd
}

func accept override as TCPSocket?
{
	if fileDescriptor < 0:
		return null
	var newfd as int
	lang "objc" {{{
		newfd = accept(fileDescriptor, NULL, NULL);
	}}}
	if newfd < 0:
		return null
	var v = new this()
	v.setFileDescriptor(newfd)
	return v
}

func read(buffer as buffer) override as int
{
	if buffer == null:
		return 0
	if fileDescriptor < 0:
		return -1
	var v as int
	lang "objc" {{{
		v = read(fileDescriptor, [buffer mutableBytes], [buffer length]);
	}}}
	if v == 0 {
		v = -1
	}
	else if v < 0 && blocking == false {
		lang "objc" {{{
			if(errno == EINTR || errno == EAGAIN || errno == EWOULDBLOCK) {
				v = 0;
			}
		}}}
	}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	if buffer == null:
		return 0
	if fileDescriptor < 0:
		return -1
	var v = 0
	var sz = size
	if sz < 0:
		sz = sizeof buffer
	lang "objc" {{{
		v = write(fileDescriptor, [buffer bytes], sz);
	}}}
	if v < 0 && blocking == false {
		lang "objc" {{{
			if(errno == EINTR || errno == EAGAIN || errno == EWOULDBLOCK) {
				v = 0;
			}
		}}}
	}
	return v
}
