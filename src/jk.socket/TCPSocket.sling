
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is ConnectedSocket abstract:

func create static as this
{
	IFDEF "target_android_java" {
		return new TCPSocketForAndroid()
	}
	ELSE IFDEF "target_dotnet_cs" {
		return new TCPSocketForDotnetCS()
	}
	ELSE IFDEF "target_std_java" {
		return new TCPSocketForStdJava()
	}
	ELSE IFDEF "target_objc" {
		return new TCPSocketForObjC()
	}
	ELSE IFDEF "target_kotlin" {
		return new TCPSocketForKotlin()
	}
	ELSE IFDEF "target_sushi" {
		return new TCPSocketForSushi()
	}
	ELSE IFDEF "target_node_js" {
		ERROR NOT_SUPPORTED
	}
	ELSE IFDEF "target_browser" {
		ERROR NOT_SUPPORTED
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func createAndConnect(address as string, port as int) static throws Exception as this
{
	var v = create()
	v.connect(address, port)
	return v
}

func createAndListen(port as int) static throws Exception as this
{
	var v = create()
	v.listen(port)
	return v
}

func getRemoteAddress abstract throws Exception as string
func getRemotePort abstract throws Exception as int
func getLocalAddress abstract throws Exception as string
func getLocalPort abstract throws Exception as int
func connect(address as string, port as int) abstract throws Exception
func listen(port as int) abstract throws Exception
func accept abstract throws Exception as this?
func setBlocking(blocking as bool) abstract throws Exception as bool
func getBlocking abstract throws Exception as bool
func close implement abstract
func read(buffer as buffer) implement abstract throws Exception as int

func readWithTimeout(buffer as buffer, timeout as int) virtual throws Exception as int:
	return read(buffer)

func write(buffer as buffer, size as int) implement abstract throws Exception as int
