
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco:

class ContextMenuItem is JcoComponent #jco
{
	prop clickHandler as function<void>?
	prop itemName as string = ""
	prop parent as ContextMenuPopup?

	stylesheet
	{
		.item {
			padding "8px 10px"
			font-size "15px"
			color "#eee"
			cursor "pointer"
			border-radius "inherit"
		}
		.item:hover {
			background "#343434"
		}
	}

	markup
	{
		<div var item class="item">@{itemName}</div>
	}

	func onRendered override
	{
		var cc = item
		if cc {
			IFDEF "target_browser_js" {
				lang "js" {{{
					cc.addEventListener('click', (event) => {
						event.stopPropagation();
						event.preventDefault();
						this.onClicked();
					})
				}}}
			}
		}
	}

	func onClicked
	{
		var ch = clickHandler
		if ch:
			ch()
		if parent:
			parent.closePopup()
	}
}

class ContextMenuPopup is JcoComponent #jco
{
	prop menuItems as KeyValueList<string,function<void>>?

	stylesheet
	{
		#context-menu {
			position "fixed"
			z-index "10000"
			width "150px"
			background "#1b1a1a"
			border-radius "5px"
			display "none"
		}
		#context-menu.visible {
			display "block"
		}
	}

	markup
	{
		<div var options id="context-menu">
			{
				if menuItems: foreach it in menuItems.iterate():
					render createMenuItem(it)
			}
		</div>
	}

	func createMenuItem(item as KeyValuePair<string,function<void>>) as markup
	{
		var handler = item.value as function<void>
		return new markup {
			<ContextMenuItem itemName=@{item.key} clickHandler=@{handler} parent=@{this} />
		}
	}

	func showpopup
	{
		var celement = options
		IFDEF "target_browser_js" {
			lang "js" {{{
				celement.classList.add("visible");
			}}}
		}
	}

	func closePopup
	{
		var celement = options
		IFDEF "target_browser_js" {
			lang "js" {{{
				celement.classList.remove("visible");
			}}}
		}
	}
}

prop menuItems as KeyValueList<string,function<void>>?

stylesheet
{
	#relative {
		position "relative"
	}
}

markup
{
	<div id="relative">
		<div var contextMenu>
			{
				foreach child in children:
					render child
			}
		</div>
		<ContextMenuPopup var contextMenuPopup menuItems=@{menuItems} />
	</div>
}

func onRendered override
{
	var melement = contextMenu
	var celement = contextMenuPopup
	IFDEF "target_browser_js" {
		lang "js" {{{
			melement.addEventListener("contextmenu", (event) => {
				event.preventDefault();
				celement.style.position = "absolute";
				const rect = melement.getBoundingClientRect();
				const x = event.clientX - rect.left;
				const y = event.clientY - rect.top;
				celement.style.top = `${y}px`;
				celement.style.left = `${x}px`;
				celement.showpopup();
			});
			const body = document.querySelector("body");
			body.addEventListener("click", (e) => {
				if (e.target.offsetParent != celement) {
					celement.closePopup();
				}
			});
		}}}
	}
}
