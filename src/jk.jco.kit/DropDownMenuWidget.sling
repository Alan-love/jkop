
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

prop backgroundColor as string #content = "#000000"
prop textColor as string #content = "#FFFFFF"
prop outlineColor as string #content = "#3f3f3f"
prop outlineWidth as string #content = "1px"
prop rounding as string #content = "1mm"
prop selectedValue as string #content = ""
prop options as vector<string>?

compose
{
	<PointerCaptureLayerWidget var selector clickHandler=@{func throws Exception => onShowPopupMenu()}>
		<CanvasWidget
			backgroundColor=@{backgroundColor}
			outlineColor=@{outlineColor}
			outlineWidth=@{outlineWidth}
			rounding=@{rounding} />
		<HorizontalBoxWidget spacing="2mm" padding="2mm">
			<WeightWidget weight="1">
				<VerticalBoxWidget spacing="500um">
					<LabelWidget text=@{selectedValue} color=@{textColor} wrapping="false" />
					/*
					{
						if label2:
							compose {
								<LabelWidget text=@{label2} color="#bababa" wrapping="false" />
							}
					}
					*/
				</VerticalBoxWidget>
			</WeightWidget>
			<AlignWidget>
				<IconWidget id=@{Icon.CHEVRON_DOWN} iconSize="3mm" color=@{textColor} />
			</AlignWidget>
		</HorizontalBoxWidget>
	</PointerCaptureLayerWidget>
}

func onShowPopupMenu throws Exception
{
	assert selector
	var popup = PopupLayer.instance()
	popup.showWithComponent(selector, PopupLayer.ALIGN_JUSTIFY, func(context as JcoComposeContext) throws Exception {
		compose {
			<MenuWidget popupLayer=@{popup}>
				{
					if options: foreach option in options {
						compose {
							<MenuItemWidget text=@{option} clickHandler=@{func throws Exception {
								selectedValue = option
							 }} />
						}
					}
				}
			</MenuWidget>
		}
	})
}

