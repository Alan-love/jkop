
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

const ALIGN_TOP = "top"
const ALIGN_CENTER = "center"
const ALIGN_BOTTOM = "bottom"
const ALIGN_STRETCH = "stretch"

prop spacing as string #content = "0"
prop padding as string #content = "0"
prop alignment as string #content = ALIGN_STRETCH

compose
{
	{
		composeChildren(context)
	}
}

IFDEF "target_browser_js"
{
	func getAlignItemsValue as string
	{
		if alignment == ALIGN_TOP:
			return "start"
		if alignment == ALIGN_CENTER:
			return "center"
		if alignment == ALIGN_BOTTOM:
			return "end"
		if alignment == ALIGN_STRETCH:
			return "stretch"
		return "center"
	}

	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		var theme = getThemeProcessor()
		sheet.define(":host", new map<string,string> {
			display "flex"
			padding lengthToHtml(theme.getValue(padding))
			"flex-direction" "row"
			"box-sizing" "border-box"
			"align-items" getAlignItemsValue()
			overflow "hidden"
		})
		if alignment == ALIGN_STRETCH:
			sheet.define(":host > :not(style)", new map<string,string> {
				height "100%"
			})
		sheet.define(":host > :not(style) + *", new map<string,string> {
			"margin-left" lengthToHtml(theme.getValue(spacing))
		})
		sheet.define(":host > :not(style)", new map<string,string> {
			overflow "visible"
		})
	}
}
ELSE IFDEF "target_ios_swift"
{
	import jk.gfx
	import [magical:UIKit]

	func getWeight(view as [magical:UIView]) as int
	{
		var ww = view as WeightWidget
		if not ww:
			return -1
		return Integer.forStringOrDefaultValue(ww.weight, 0)
	}

	func computeSizeThatFits(cw as double, ch as double) override as Size
	{
		var theme = getThemeProcessor()
		var spacing = asPoints(theme.getValue(spacing))
		var padding = asPoints(theme.getValue(padding))
		var w #mutated = padding + padding
		var h #mutated = 0.0
		lang "swift" (spacing, padding, w, h) {{{
			var spaces = subviews.count - 1
			if spaces < 0 {
				spaces = 0
			}
			w += Swift.Double(spaces) * spacing
			var ww = cw - padding - padding - Swift.Double(spaces) * spacing
			let rh = ch - padding - padding
			var totalWeight = 0
			for subview in subviews {
				let weight = getWeight(subview)
				if weight >= 0 {
					totalWeight += weight
					continue
				}
				let cgsz = subview.sizeThatFits(CGSizeMake(ww, rh))
				var nw = cgsz.width
				if nw > ww {
					nw = ww
				}
				if nw > 0 {
					let nh = cgsz.height + padding + padding
					if nh > h {
						h = nh
					}
					w += nw
					ww -= nw
				}
			}
			for subview in subviews {
				let weight = getWeight(subview)
				if weight >= 0 {
					var nw = ww * Swift.Double(weight) / Swift.Double(totalWeight)
					if nw > 0 {
						let cgsz = subview.sizeThatFits(CGSizeMake(nw, rh))
						let nh = cgsz.height + padding + padding
						if nh > h {
							h = nh
						}
					}
				}
			}
		}}}
		return new Size() {
			width w
			height h
		}
	}

	func layoutSubviews override #magical
	{
		var theme = getThemeProcessor()
		var spacing = asPoints(theme.getValue(spacing))
		var padding = asPoints(theme.getValue(padding))
		var mh = lang "swift" as double {{{ self.bounds.size.height }}} - padding - padding
		var mw #mutated = lang "swift" as double {{{ self.bounds.size.width }}} - padding - padding
		lang "swift" (spacing, padding, mh, mw) {{{
			var spaces = subviews.count - 1
			if spaces < 0 {
				spaces = 0
			}
			mw -= Swift.Double(spaces) * spacing
			var totalWidth = 0.0
			var totalWeight = 0
			var sizes: Swift.Array<CGSize> = []
			for subview in subviews {
				let cgsz = subview.sizeThatFits(CGSizeMake(mw - totalWidth, mh))
				let w = cgsz.width
				var h = cgsz.height
				if h > mh {
					h = mh
				}
				else if alignment == HorizontalBoxWidget.ALIGN_STRETCH {
					h = mh
				}
				sizes.append(CGSizeMake(w,h))
				let weight = getWeight(subview)
				if weight >= 0 {
					totalWeight += weight
				}
				else {
					totalWidth += w
				}
			}
			let remainingWidth = mw - totalWidth
			var x = padding
			var n = 0
			for subview in subviews {
				var size = sizes[n]
				n += 1
				let weight = getWeight(subview)
				if weight >= 0 {
					var nw = remainingWidth * Swift.Double(weight) / Swift.Double(totalWeight)
					if nw < 0 {
						nw = 0
					}
					size = CGSizeMake(nw, size.height)
				}
				let w = size.width
				let h = size.height
				if w > 0 && x > padding {
					x += spacing
				}
				var y = padding
				if alignment == HorizontalBoxWidget.ALIGN_TOP {
					y = padding
				}
				else if alignment == HorizontalBoxWidget.ALIGN_CENTER {
					y = padding + mh / 2 - h / 2
				}
				else if alignment == HorizontalBoxWidget.ALIGN_BOTTOM {
					y = mh + padding - h
				}
				else if alignment == HorizontalBoxWidget.ALIGN_STRETCH {
					y = padding
				}
				subview.frame = CGRectMake(x, y, w, h)
				x += w
			}
		}}}
	}
}
