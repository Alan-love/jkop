
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

const ALIGN_TOP = "top"
const ALIGN_CENTER = "center"
const ALIGN_BOTTOM = "bottom"
const ALIGN_STRETCH = "stretch"

prop spacing as string #content = "0"
prop padding as string #content = "0"
prop alignment as string #content = ALIGN_STRETCH

IFDEF "target_browser_js"
{
	func getAlignItemsValue as string
	{
		if alignment == ALIGN_TOP:
			return "start"
		if alignment == ALIGN_CENTER:
			return "center"
		if alignment == ALIGN_BOTTOM:
			return "end"
		if alignment == ALIGN_STRETCH:
			return "stretch"
		return "center"
	}

	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		base.addCssRules(sheet)
		var theme = new JcoThemeProcessor() {
			component this
		}
		sheet.define(":host", new map<string,string> {
			display "flex"
			padding lengthToHtml(theme.getValue(padding))
			"flex-direction" "row"
			"box-sizing" "border-box"
			"align-items" getAlignItemsValue()
		})
		sheet.define(":host > :not(style) + *", new map<string,string> {
			"margin-left" lengthToHtml(theme.getValue(spacing))
		})
	}
}

compose
{
	{
		composeChildren(context)
	}
}
