
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent abstract #jco #component:

prop loadingText as string #content = "{loadingDataText|Loading..}"

var loading = false
var error as string?

func load abstract async throws Exception

func composeData(context as JcoComposeContext) abstract throws Exception

func reload async
{
	loading = true
	error = null
	update()
	try {
		await load()
		loading = false
		update()
	}
	catch e as Exception {
		error = e.toString()
	}
}

func composeComponent(context as JcoComposeContext) override throws Exception
{
	if String.isNotEmpty(error) {
		compose {
			<LabelWidget text=@{error} />
		}
	}
	else if loading {
		compose {
			<HorizontalBoxWidget padding="3mm" spacing="3mm" alignment="center">
				<SpinnerWidget size="4mm" />
				<LabelWidget text=@{loadingText} />
			</HorizontalBoxWidget>
		}
	}
	else {
		composeData(context)
	}
}

func onMounted override throws Exception
{
	base.onMounted()
	nowait reload()
}
