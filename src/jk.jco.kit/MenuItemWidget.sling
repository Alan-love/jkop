
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is PointerCaptureLayerWidget public #jco #component:

prop font as string #content = "{menuItemFont|3mm}"
prop textColor as string #content = "{menuItemTextColor|black}"
prop backgroundColor as string #content = "{menuItemBackgroundColor|white}"
prop hoverTextColor as string #content = "{menuItemHoverTextColor|black}"
prop hoverBackgroundColor as string #content = "{menuItemHoverBackgroundColor|#CCCCFF}"
prop pressedTextColor as string #content = "{menuItemPressedTextColor|black}"
prop pressedBackgroundColor as string #content = "{menuItemPressedBackgroundColor|#AAAADD}"
prop padding as string #content = "{menuItemPadding|3mm}"
prop icon as string? #content
prop text as string #content = ""

var hover = false
var pressed = false

func getCurrentBackgroundColor private as string
{
	if pressed:
		return pressedBackgroundColor
	if hover:
		return hoverBackgroundColor
	return backgroundColor
}

func getCurrentTextColor private as string
{
	if pressed:
		return pressedTextColor
	if hover:
		return hoverTextColor
	return textColor
}

compose
{
	<CanvasWidget backgroundColor=@{getCurrentBackgroundColor()} />
	<LayerWithPaddingWidget padding=@{padding}>
		<LabelWidget
			text=@{text}
			font=@{font}
			color=@{getCurrentTextColor()}
			wrapping="false" />
	</LayerWithPaddingWidget>
}

func onClicked override throws Exception
{
	var menu = findAncestorOfType(typeinfo MenuWidget) as MenuWidget
	if menu:
		menu.onItemSelected(this)
	base.onClicked()
}

func onPointerEnter override throws Exception
{
	hover = true
	update()
}

func onPointerLeave override throws Exception
{
	hover = false
	update()
}

func onPressed override throws Exception
{
	base.onPressed()
	pressed = true
	update()
}

func onReleased override throws Exception
{
	base.onReleased()
	pressed = false
	update()
}
