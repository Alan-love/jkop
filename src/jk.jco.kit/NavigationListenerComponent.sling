
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent abstract #jco #component:

func onConnectedToApplication(application as JcoApplication) override
{
	base.onConnectedToApplication(application)
	application.addNavigationListener(this, func => onNavigation())
}

func onDisconnectedFromApplication(application as JcoApplication) override
{
	base.onDisconnectedFromApplication(application)
	application.removeNavigationListener(this)
}

func onNavigation virtual:
	update()

func pathMatches(pattern as string) throws Exception as DynamicMap?
{
	var vars as DynamicMap?
	var path = getApplication().getNavigationPath()
	if String.isEmpty(path):
		path = "/"
	var comps = String.split(path, '/')
	var ccount = Vector.getSize(comps)
	var pcomps = String.split(pattern, '/')
	var plen = Vector.getSize(pcomps)
	var n1 = 0
	var n2 = 0
	loop {
		var s1 as string?
		var s2 as string?
		while String.isEmpty(s1) && n1 < ccount:
			s1 = Vector.getValue(comps, n1++)
		while String.isEmpty(s2) && n2 < plen:
			s2 = Vector.getValue(pcomps, n2++)
		if String.isEmpty(s1):
			s1 = null
		if String.isEmpty(s2):
			s2 = null
		if s1 == null && s2 == null {
			if not vars:
				vars = new DynamicMap()
			return vars
		}
		if s1 && s2 {
			if String.startsWith(s2, ":") {
				if not vars:
					vars = new DynamicMap()
				vars.setString(String.getEndOfString(s2, 1), s1)
				continue
			}
		}
		if s1 == s2:
			continue
		break
	}
	return null
}
