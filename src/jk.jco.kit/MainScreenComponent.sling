
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoSizeAwareComponent abstract #jco #component:

class SideMenuEntry public
{
    prop text as string
    prop path as string
}

class NavigationButton public
{
    prop icon as string
    prop clickHandler as function<(JcoComponent) throws Exception>
}

class ShortcutButton public
{
    prop icon as string
    prop title as string
    prop path as string
}

prop navigationButtonInnerPadding as string #content = "{mainScreenNavigationButtonInnerPadding|2mm}"
prop navigationButtonTextColor as string #content = "{mainScreenNavigationButtonTextColor|black}"
prop navigationButtonBackgroundColor as string #content = "{mainScreenNavigationButtonBackgroundColor|}"
prop navigationButtonPressedTextColor as string #content = "{mainScreenNavigationButtonPressedTextColor|white}"
prop navigationButtonPressedBackgroundColor as string #content = "{mainScreenNavigationButtonPressedBackgroundColor|}"
prop navigationButtonIconSize as string #content = "{mainScreenNavigationButtonIconSize|6mm}"
prop narrowShortcutButtonTextColor as string #content = "{mainScreenNarrowShortcutButtonTextColor|black}"
prop narrowShortcutButtonBackgroundColor as string #content = "{mainScreenNarrowShortcutButtonBackgroundColor|}"
prop narrowShortcutButtonPressedTextColor as string #content = "{mainScreenNarrowShortcutButtonPressedTextColor|}"
prop narrowShortcutButtonPressedBackgroundColor as string #content = "{mainScreenNarrowShortcutButtonPressedBackgroundColor|}"
prop narrowShortcutButtonIconSize as string #content = "{mainScreenNarrowShortcutButtonIconSize|8mm}"
prop narrowShortcutButtonInnerPadding as string #content = "{mainScreenNarrowShortcutButtonInnerPadding|1mm}"
prop narrowShortcutButtonFont as string #content = "{mainScreenNarrowShortcutButtonFont|2mm}"
prop iconShortcutButtonTextColor as string #content = "{mainScreenIconShortcutButtonTextColor|black}"
prop iconShortcutButtonBackgroundColor as string #content = "{mainScreenIconShortcutButtonBackgroundColor|}"
prop iconShortcutButtonPressedTextColor as string #content = "{mainScreenIconShortcutButtonPressedTextColor|}"
prop iconShortcutButtonPressedBackgroundColor as string #content = "{mainScreenIconShortcutButtonPressedBackgroundColor|}"
prop iconShortcutButtonIconSize as string #content = "{mainScreenIconShortcutButtonIconSize|6mm}"
prop iconShortcutButtonInnerPadding as string #content = "{mainScreenIconShortcutButtonInnerPadding|3mm}"
prop iconShortcutButtonFont as string #content = "{mainScreenIconShortcutButtonFont|3mm}"
prop iconShortcutButtonWidth as string #content = "40mm"
prop sideMenuWidth as string #content = "60mm"
prop sideMenuBackgroundColor as string #content = "#303030"
prop sideMenuItemBackgroundHoverColor as string #content = "#505050"
prop sideMenuItemBackgroundPressedColor as string #content = "#707070"
prop sideMenuTextColor as string #content = "#FFFFFF"
prop sideMenuHyperlinkColor as string #content = "#FFFFFF"
prop sideMenuCloseButtonSize as string #content = "5mm"
prop sideMenuEntries as vector<SideMenuEntry> = new vector<SideMenuEntry>
prop navigationBarBackgroundColor as string #content = "{mainScreenNavigationBarBackgroundColor|white}"
prop navigationBarTextColor as string #content = "{mainScreenNavigationBarTextColor|black}"
prop navigationBarLogo as string #content = ""
prop navigationBarLogoHeight as string #content = "10mm"
prop navigationButtons as vector<NavigationButton> = new vector<NavigationButton>
prop narrowShortcutBarBackgroundColor as string #content = "{mainScreenNarrowShortcutBarBackgroundColor|white}"
prop shortcutButtons as vector<ShortcutButton> = new vector<ShortcutButton>
prop topBarBackgroundColor as string #content = "{mainScreenTopBarBackgroundColor|white}"
prop bottomBarBackgroundColor as string #content = "{mainScreenBottomBarBackgroundColor|white}"

func addSideMenuEntry(text as string, path as string):
    sideMenuEntries += new SideMenuEntry() {
        text text
        path path
    }

func addNavigationButton(icon as string, clickHandler as function<(JcoComponent) throws Exception>):
    navigationButtons += new NavigationButton() {
        icon icon
        clickHandler clickHandler
    }

func addShortcutButton(icon as string, title as string, path as string):
    shortcutButtons += new ShortcutButton() {
        icon icon
        title title
        path path
    }

func displaySideMenu throws Exception
{
	var popup = PopupLayer.instance()
	popup.showAsLayer(this, func(context as JcoComposeContext) throws Exception {
		compose {
			<MobileAppScreenContainerWidget topColor=@{sideMenuBackgroundColor} bottomColor=@{sideMenuBackgroundColor} customData=@{customData} width=@{width}>
				{
					composeSideMenu(context, popup)
				}
			</MobileAppScreenContainerWidget>
		}
	})
}

func navigateFromSideMenu(path as string, popup as PopupLayer?) throws Exception
{
	if popup:
		popup.hide()
	getApplication().navigateToPath(path)
}

func composeNavigationButton(context as JcoComposeContext, icon as string, clickHandler as function<(JcoComponent) throws Exception>) throws Exception
{
	compose {
		<ButtonWidget
			icon=@{icon}
			iconSize=@{navigationButtonIconSize}
			clickComponentHandler=@{clickHandler}
			innerPadding=@{navigationButtonInnerPadding}
			textColor=@{navigationButtonTextColor}
			backgroundColor=@{navigationButtonBackgroundColor}
			pressedTextColor=@{navigationButtonPressedTextColor}
            pressedBackgroundColor=@{navigationButtonPressedBackgroundColor}
		/>
	}
}

func composeNarrowShortcutButton(context as JcoComposeContext, icon as string, text as string, path as string) throws Exception
{
	var theme = getThemeProcessor()
	var icon = theme.getValue(icon)
	var path = theme.getValue(path)
	compose {
		<ButtonWidget
			icon=@{icon}
			text=@{text}
			innerPadding=@{narrowShortcutButtonInnerPadding}
			textColor=@{narrowShortcutButtonTextColor}
			backgroundColor=@{narrowShortcutButtonBackgroundColor}
			pressedTextColor=@{narrowShortcutButtonPressedTextColor}
			pressedBackgroundColor=@{narrowShortcutButtonPressedBackgroundColor}
			iconSize=@{narrowShortcutButtonIconSize}
			font=@{narrowShortcutButtonFont}
			arrangement="vertical"
			clickHandler=@{func throws Exception {
				getApplication().navigateToPath(path)
			}}
		/>
	}
}

func composeIconShortcutButton(context as JcoComposeContext, icon as string, path as string) throws Exception
{
	var theme = getThemeProcessor()
	var icon = theme.getValue(icon)
	var path = theme.getValue(path)
	compose {
		<ButtonWidget
			icon=@{icon}
			innerPadding=@{iconShortcutButtonInnerPadding}
			textColor=@{iconShortcutButtonTextColor}
			backgroundColor=@{iconShortcutButtonBackgroundColor}
			pressedTextColor=@{iconShortcutButtonPressedTextColor}
			pressedBackgroundColor=@{iconShortcutButtonPressedBackgroundColor}
			iconSize=@{iconShortcutButtonIconSize}
			font=@{iconShortcutButtonFont}
			arrangement="horizontal"
			clickHandler=@{func throws Exception {
				getApplication().navigateToPath(path)
			}}
		/>
	}
}

func composeSideMenu(context as JcoComposeContext, popup as PopupLayer?) throws Exception
{
	var customData = DynamicMap.forStringMap(new map<string,string> {
		textColor sideMenuTextColor
		hyperlinkColor sideMenuHyperlinkColor
		hyperlinkUnderline "false"
	})
	var width as string?
	if popup == null:
		width = sideMenuWidth
	compose {
		<LayerWidget customData=@{customData} width=@{width}>
			<CanvasWidget backgroundColor=@{sideMenuBackgroundColor} />
			<VerticalBoxWidget padding="3mm" spacing="3mm">
				{
					if popup {
						compose {
							<HorizontalBoxWidget>
								<PointerCaptureLayerWidget clickHandler=@{func throws Exception {
									popup.hide()
								}}>
									<IconWidget id=@{Icon.XMARK} iconSize=@{sideMenuCloseButtonSize} />
								</PointerCaptureLayerWidget>
							</HorizontalBoxWidget>
						}
					}
					else {
						compose {
							<HorizontalBoxWidget spacing="2mm">
								{
									foreach shortcutButton in shortcutButtons:
										compose {
											<WeightWidget weight="1">
												{
													composeIconShortcutButton(context, shortcutButton.icon, shortcutButton.path)
												}
											</WeightWidget>
										}
								}
							</HorizontalBoxWidget>
						}
					}
					compose {
						<WeightWidget weight="1">
							<VerticalScrollerWidget>
								<MenuWidget separatorHeight="0px" customData=@{DynamicMap.forStringMap(new map<string,string> {
									menuItemTextColor sideMenuTextColor
									menuItemBackgroundColor sideMenuBackgroundColor
									menuItemHoverTextColor sideMenuTextColor
									menuItemHoverBackgroundColor sideMenuItemBackgroundHoverColor
									menuItemPressedBackgroundColor sideMenuItemBackgroundPressedColor
									menuItemPadding "3mm"
									menuItemFont "4mm"
								})}>
									{
										foreach entry in sideMenuEntries {
											compose {
												<MenuItemWidget text=@{entry.text} clickHandler=@{func throws Exception => navigateFromSideMenu(entry.path, popup)} />
											}
										}
									}
								</MenuWidget>
							</VerticalScrollerWidget>
						</WeightWidget>
					}
				}
			</VerticalBoxWidget>
		</LayerWidget>
	}
}

func composeNavigationBar(context as JcoComposeContext) throws Exception
{
	compose {
		<LayerWidget customData=@{DynamicMap.forStringMap(new map<string,string> {
			textColor navigationBarTextColor
		})}>
			<CanvasWidget backgroundColor=@{navigationBarBackgroundColor} />
			<HorizontalBoxWidget padding="2mm" spacing="1mm" alignment="center">
				{
					if isNarrow():
						composeNavigationButton(context, Icon.THREE_HORIZONTAL_LINES, func(component as JcoComponent) throws Exception {
							displaySideMenu()
						})
				}
				<WeightWidget weight="1">
                    {
                        if String.isNotEmpty(navigationBarLogo):
                            compose {
                                <AlignWidget horizontal="left">
                                    <ImageWidget source=@{navigationBarLogo} height=@{navigationBarLogoHeight} />
                                </AlignWidget>
                            }
                    }
				</WeightWidget>
				{
                    foreach navigationButton in navigationButtons:
                        composeNavigationButton(context, navigationButton.icon, navigationButton.clickHandler)
				}
			</HorizontalBoxWidget>
		</LayerWidget>
	}
}

func composeNarrowShortcutBar(context as JcoComposeContext) throws Exception
{
	compose {
		<LayerWidget>
			<CanvasWidget backgroundColor=@{narrowShortcutBarBackgroundColor} />
			<HorizontalBoxWidget padding="1mm" spacing="1mm">
                {
                    foreach shortcutButton in shortcutButtons {
                        compose {
                            <WeightWidget weight="1">
                                <AlignWidget>
                                    {
                                        composeNarrowShortcutButton(context, shortcutButton.icon, shortcutButton.title, shortcutButton.path)
                                    }
                                </AlignWidget>
                            </WeightWidget>
                        }
                    }
                }
			</HorizontalBoxWidget>
		</LayerWidget>
	}
}

func composeComponent(context as JcoComposeContext) override throws Exception
{
	compose {
		<MobileAppScreenContainerWidget topColor=@{topBarBackgroundColor} bottomColor=@{bottomBarBackgroundColor}>
			<VerticalBoxWidget>
				{
					composeNavigationBar(context)
					if isWide() {
						compose {
							<WeightWidget weight="1">
								<HorizontalBoxWidget>
									{
										composeSideMenu(context, null)
									}
									<WeightWidget weight="1">
										{
											composeMainContent(context)
										}
									</WeightWidget>
								</HorizontalBoxWidget>
							</WeightWidget>
						}
					}
					else {
						compose {
							<WeightWidget weight="1">
								{
									composeMainContent(context)
								}
							</WeightWidget>
							{
								composeNarrowShortcutBar(context)
							}
						}
					}
				}
			</VerticalBoxWidget>
		</MobileAppScreenContainerWidget>
	}
}

func composeMainContent(context as JcoComposeContext) abstract throws Exception
