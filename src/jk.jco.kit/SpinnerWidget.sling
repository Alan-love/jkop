
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

const ROTATE_2D = "2D"
const ROTATE_3D = "3D"

prop color as string #content = "{textColor|white}"
prop image as string #content = ""
prop rotate as string #content = ROTATE_3D
prop size as string #content = "15mm"
prop speed as string #content = "5s"

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		var theme = JcoThemeProcessor.forComponent(this)
		var host = sheet.define(":host", new map<string,string> {
			display "block"
		})
		sheet.define(".circle", new map<string,string> {
			"border-radius" "50%"
			background colorToHtml(theme.getValue(color))
			width lengthToHtml(theme.getValue(size))
			height lengthToHtml(theme.getValue(size))
		})
		if rotate == ROTATE_2D {
			host.set("animation", "spin2d " .. speed .. " linear infinite")
			var spin = sheet.nest("@keyframes spin2d")
			spin.define("100%", new map<string,string> {
				transform "rotate(360deg)"
			})
		}
		else if rotate == ROTATE_3D {
			host.set("animation", "spin3d " .. speed .. " cubic-bezier(0, 0.2, 0.8, 1) infinite")
			var spin = sheet.nest("@keyframes spin3d")
			spin.define("0%, 100%", new map<string,string> {
				"animation-timing-function" "cubic-bezier(0.5, 0, 1, 0.5)"
			})
			spin.define("0%", new map<string,string> {
				transform "rotateY(0deg)"
			})
			spin.define("50%", new map<string,string> {
				transform "rotateY(1800deg)"
				"animation-timing-function" "cubic-bezier(0, 0.5, 0.5, 1)"
			})
			spin.define("100%", new map<string,string> {
				transform "rotateY(3600deg)"
			})
		}
		else {
			Error.throw("unsupportedRotateConfiguration", rotate)
		}
	}

	compose
	{
		{
			var theme = JcoThemeProcessor.forComponent(this)
			var img = theme.getValue(image)
			if String.isNotEmpty(img) {
				compose {
					<ImageWidget source=@{img} height=@{size} />
				}
			}
			else {
				compose {
					<div class="circle" />
				}
			}
		}
	}
}
