
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.jco.common

class is JcoComponent #jco #component:

prop text as string #content = ""
prop font as string #content = "{textFont|4mm}"
prop padding as string #content = "{textPadding|0}"
prop color as string #content = "{textColor|#000000}"
prop wrapping as string #content = "true"
prop alignment as string #content = "left"

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		var theme = JcoThemeProcessor.forComponent(this)
		var host = sheet.define(":host", new map<string,string> {
			display "block"
			color colorToHtml(theme.getValue(color))
			padding lengthToHtml(theme.getValue(padding))
			font fontToHtml(theme.getFontValue(font))
			"text-overflow" "ellipsis"
			"text-align" theme.getValue(alignment)
		})
		if Boolean.asValueOrThrowError(theme.getValue(wrapping)) == false:
			host.set("white-space", "nowrap")
	}

	func initializeHtmlChildren override
	{
		var inner = lang "js" as string? {{{ this.innerHTML }}}
		if String.isNotEmpty(inner):
			text = inner
	}

	compose
	{
		{
			var theme = JcoThemeProcessor.forComponent(this)
			compose {
				<span>@{theme.getValue(text)}</span>
			}
		}
	}
}
ELSE IFDEF "target_ios_swift"
{
	import [magical:UIKit]

	func computeSizeThatFits(cw as double, ch as double) override as Size
	{
		var theme = getThemeProcessor()
		var padding = asPoints(theme.getValue(padding))
		var w #mutated = 0.0
		var h #mutated = 0.0
		lang "swift" {{{
			for subview in subviews {
				var rsz = CGSizeMake(CGFloat.greatestFiniteMagnitude, CGFloat.greatestFiniteMagnitude)
				if wrapping == "true" {
					rsz = CGSizeMake(cw - padding - padding, CGFloat.greatestFiniteMagnitude)
				}
				let cgsz = subview.sizeThatFits(rsz)
				if cgsz.width > w {
					w = cgsz.width
				}
				if cgsz.height > h {
					h = cgsz.height
				}
			}
		}}}
		w += padding + padding
		h += padding + padding
		return new Size() {
			width w
			height h
		}
	}

	func layoutSubviews override #magical
	{
		var theme = getThemeProcessor()
		var padding = asPoints(theme.getValue(padding))
		lang "swift" (padding) {{{
			for subview in subviews {
				subview.frame = CGRectMake(padding, padding, self.bounds.size.width - padding - padding, self.bounds.size.height - padding - padding)
			}
		}}}
	}

	func toTextAlignment(value as string) as [magical:NSTextAlignment]
	{
		if value == "left":
			return lang "swift" as [magical:NSTextAlignment] {{{ NSTextAlignment.left }}}
		if value == "right":
			return lang "swift" as [magical:NSTextAlignment] {{{ NSTextAlignment.right }}}
		if value == "center":
			return lang "swift" as [magical:NSTextAlignment] {{{ NSTextAlignment.center }}}
		if value == "justify":
			return lang "swift" as [magical:NSTextAlignment] {{{ NSTextAlignment.justified }}}
		return lang "swift" as [magical:NSTextAlignment] {{{ NSTextAlignment.left }}}
	}

	compose
	{
		{
			var theme = getThemeProcessor()
			compose {
				<[magical:UILabel]
					text=@{theme.getValue(text)}
					textColor=@{colorToUiColor(theme.getValue(color))}
					textAlignment=@{toTextAlignment(theme.getValue(alignment))}
					font=@{fontToUiFont(theme.getFontValue(font))}
					numberOfLines=@{wrapping == "true" ? 0 : 1} />
			}
		}
	}
}
