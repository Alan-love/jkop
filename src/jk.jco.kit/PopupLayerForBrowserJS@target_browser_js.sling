
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is PopupLayer:

class MyRootWidget is LayerWidget #jco #component
{
	prop composer as function<(JcoComposeContext) throws Exception>?

	func composeComponent(context as JcoComposeContext) override throws Exception
	{
		var cc = composer
		if cc:
			cc(context)
	}
}

func getBody as JcoHtmlElementForBrowserJS
{
	var body = lang "js" as dynamic {{{ document.documentElement }}}
	return new JcoHtmlElementForBrowserJS() {
		element body
	}
}

var topLevelElement as dynamic?

func show(element as dynamic) private throws Exception
{
	if topLevelElement:
		hide()
	var body = getBody()
	var tel = element
	body.element.appendChild!(tel)
	body.setEventFilter("click", func(event as dynamic) as bool {
		var path = event.composedPath!() as! vector<dynamic>?
		if path: foreach element #used in path {
			if lang "js" as bool {{{ element == tel }}}:
				return false
		}
		try {
			hide()
		}
		return true
	})
	this.topLevelElement = element
}

func showAsLayer(reference as JcoComponent, composer as function<(JcoComposeContext) throws Exception>) override throws Exception
{
	var element = CustomElementManager.createElementForType(typeinfo MyRootWidget) as MyRootWidget
	if not element:
		Error.throw("failedToCreatePopupBaseWidget")
	element.composer = composer
	lang "js" {{{
		element.style.position = "absolute";
		element.style.top = 0;
		element.style.bottom = 0;
		element.style.left = 0;
		element.style.right = 0;
	}}}
	show(element)
}

func showWithComponent(reference as JcoComponent, align as int, composer as function<(JcoComposeContext) throws Exception>) override throws Exception
{
	var original = (reference as! dynamic).getBoundingClientRect!()
	var element = CustomElementManager.createElementForType(typeinfo MyRootWidget) as MyRootWidget
	if not element:
		Error.throw("failedToCreatePopupBaseWidget")
	element.composer = composer
	lang "js" (element, original) {{{
		element.style.position = "absolute";
		element.style.top = original.bottom;
	}}}
	if align == PopupLayer.ALIGN_LEFT {
		lang "js" (element, original) {{{
			element.style.left = original.left;
		}}}
	}
	else if align == PopupLayer.ALIGN_CENTER {
		ERROR NOT_IMPLEMENTED
	}
	else if align == PopupLayer.ALIGN_JUSTIFY {
		lang "js" (element, original) {{{
			element.style.left = original.left;
			element.style.width = original.right - original.left;
		}}}
	}
	else if align == PopupLayer.ALIGN_RIGHT {
		lang "js" (element, original) {{{
			element.style.right = document.documentElement.clientWidth - original.right;
		}}}
	}
	show(element)
}

func hide override throws Exception
{
	if topLevelElement {
		var body = getBody()
		body.element.removeChild!(topLevelElement)
		body.setEventCapturer("click", null)
	}
}
