
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json
import jk.jco.common

class is NavigationListenerComponent #jco #component:

func getAllRoutes virtual as vector<RouterPathWidget>
{
	var routes = new vector<RouterPathWidget>
	foreach child in children {
		if child is RouterPathWidget:
			routes += child as! RouterPathWidget
	}
	return routes
}

func getRouteByName(name as string) as RouterPathWidget?
{
	var routes = getAllRoutes()
	foreach route in routes {
		if name == route.name:
			return route
	}
	return null
}

compose
{
	{
		var path = getApplication().getNavigationPath()
		while String.startsWith(path, "/"):
			path = String.getEndOfString(path, 1)
		if String.isEmpty(path):
			path = "home"
		var route = getRouteByName(path)
		if not route:
			route = getRouteByName("notfound")
		if route:
			context.addObject(route)
	}
}

func onConnectedToApplication(application as JcoApplication) override
{
	base.onConnectedToApplication(application)
	application.addNavigationListener(this, func => update())
}

func onDisconnectedFromApplication(application as JcoApplication) override
{
	base.onDisconnectedFromApplication(application)
	application.removeNavigationListener(this)
}
