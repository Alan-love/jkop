
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

prop title as string #content = ""
prop font as string #content = "{tabHeaderFont|bold 4mm}"
prop backgroundColor as string #content = "{tabHeaderBackgroundColor|}"
prop textColor as string #content = "{tabHeaderTextColor|#000000}"
prop selectedTextColor as string #content = "{tabHeaderSelectedTextColor|#222288}"
prop useUnderline as string #content = "{tabHeaderUseUnderline|true}"
prop selected as string #content = "false"

func composeContent(context as JcoComposeContext) throws Exception:
	compose {
		<AlignWidget>
			<VerticalBoxWidget spacing="500um" padding="2mm">
				<LabelWidget text=@{title} font=@{font} color=@{selected == "true" ? selectedTextColor : textColor} />
				<CanvasWidget backgroundColor=@{selected == "true" ? selectedTextColor : "#00000000"} height="500um" />
			</VerticalBoxWidget>
		</AlignWidget>
	}

compose
{
	{
		var theme = getThemeProcessor()
		var backgroundColor = theme.getValue(backgroundColor)
		if String.isNotEmpty(backgroundColor) {
			compose {
				<LayerWidget>
					<CanvasWidget backgroundColor=@{backgroundColor} />
					{
						composeContent(context)
					}
				</LayerWidget>
			}
		}
		else {
			composeContent(context)
		}
	}
}
