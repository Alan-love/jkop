
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common
import [magical:UIKit]

class is PopupLayer:

class MyRootWidget is JcoApplication #jco #component
{
	prop composer as function<(JcoComposeContext) throws Exception>?

	func composeComponent(context as JcoComposeContext) override throws Exception
	{
		var cc = composer
		if cc:
			cc(context)
	}
}

class MyPositionedRootWidget is JcoApplication #jco #component
{
	prop composer as function<(JcoComposeContext) throws Exception>?
	prop popup as PopupLayer?
	prop childx as double = 0.0
	prop childy as double = 0.0
	prop childWidth as double = 0.0
	prop align as string = ""

	func getChildWidthString as string?
	{
		if childWidth > 0.0:
			return String.forDouble(childWidth)
		return null
	}

	func composeComponent(context as JcoComposeContext) override throws Exception:
		compose {
			<PointerCaptureLayerWidget clickHandler=@{func throws Exception {
				if popup:
					popup.hide()
			}}>
				<CanvasWidget backgroundColor="#00000080" />
				<AbsolutePositionWidget
					childX=@{String.forDouble(childx)}
					childY=@{String.forDouble(childy)}
					childWidth=@{getChildWidthString()}
					alignment=@{align}>
					{
						var cc = composer
						if cc:
							cc(context)
					}
				</AbsolutePositionWidget>
			</PointerCaptureLayerWidget>
		}
}

var viewController as JcoIosViewController?

func showAsLayer(reference as JcoComponent, composer as function<(JcoComposeContext) throws Exception>) override throws Exception
{
	if viewController:
		hide()
	var cvc = reference.getViewController()
	if not cvc:
		Error.throw("referenceComponentIsNotConnectedToViewController")
	var customData as DynamicMap?
	var app = reference.getApplicationOrNull()
	if app:
		customData = app.customData
	var rootComponent = new MyRootWidget() {
		composer composer
		context try? reference.getGuiApplicationContext()
		customData customData
	}
	var nvc = JcoIosViewController.forComponent(rootComponent)
	viewController = nvc
	lang "swift" {{{
		viewController!.modalPresentationStyle = .overFullScreen
		viewController!.modalTransitionStyle = .crossDissolve
		cvc!.present(nvc, animated: true)
	}}}
}

func showWithComponent(reference as JcoComponent, align as int, composer as function<(JcoComposeContext) throws Exception>) override throws Exception
{
	if viewController:
		hide()
	var cvc = reference.getViewController()
	if not cvc:
		Error.throw("referenceComponentIsNotConnectedToViewController")
	var childx #mutated = 0.0
	var childy #mutated = 0.0
	var ww #mutated = 0.0
	var fixedWidth = 0.0
	lang "swift" {{{
		let rect = reference.convert(reference.bounds, to: nil)
		childx = rect.origin.x
		childy = rect.origin.y + rect.size.height
		ww = rect.size.width
	}}}
	var aa = ""
	if align == PopupLayer.ALIGN_LEFT {
		aa = "left"
	}
	else if align == PopupLayer.ALIGN_CENTER {
		aa = "center"
		childx += ww / 2
	}
	else if align == PopupLayer.ALIGN_JUSTIFY {
		aa = "left"
		fixedWidth = ww
	}
	else if align == PopupLayer.ALIGN_RIGHT {
		aa = "right"
		childx += ww
	}
	var customData as DynamicMap?
	var app = reference.getApplicationOrNull()
	if app:
		customData = app.customData
	var rootComponent = new MyPositionedRootWidget() {
		composer composer
		context try? reference.getGuiApplicationContext()
		popup this
		childx childx
		childy childy
		childWidth fixedWidth
		align aa
		customData customData
	}
	var nvc = JcoIosViewController.forComponent(rootComponent)
	viewController = nvc
	lang "swift" {{{
		viewController!.modalPresentationStyle = .overFullScreen
		viewController!.modalTransitionStyle = .crossDissolve
		cvc!.present(nvc, animated: true)
	}}}
}

func hide override throws Exception
{
	if viewController {
		lang "swift" {{{
			viewController!.dismiss(animated: true)
		}}}
		viewController = null
	}
}
