
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is PointerCaptureLayerWidget #jco #component:

prop text as string #content = ""
prop icon as string #content = ""
prop iconSize as string #content = "{buttonIconSize|4mm}"
prop font as string #content = "{buttonFont|Arial 14px bold}"
prop backgroundColor as string #content = "{buttonBackgroundColor|#0000FF}"
prop textColor as string #content = "{buttonTextColor|white}"
prop pressedBackgroundColor as string #content = "{buttonPressedBackgroundColor|#8080CC}"
prop pressedTextColor as string #content = "{buttonPressedTextColor|black}"
prop innerPadding as string #content = "{buttonInnerPadding|12px}"
prop rounding as string #content = "{buttonRounding|1500um}"
prop contentAlignment as string #content = "{buttonContentAlignment|center}"
prop arrangement as string #content = "horizontal"

var pressed = false

func onPressed override throws Exception
{
	base.onPressed()
	pressed = true
	update()
}

func onReleased override throws Exception
{
	base.onReleased()
	pressed = false
	update()
}

func composeLabel(context as JcoComposeContext) throws Exception:
	compose {
		<LabelWidget
			text=@{text}
			font=@{font}
			color=@{pressed ? pressedTextColor : textColor}
			wrapping="false" />
	}

func composeIcon(context as JcoComposeContext) throws Exception:
	compose {
		<AlignWidget>
			<IconWidget id=@{icon} iconSize=@{iconSize} color=@{pressed ? pressedTextColor : textColor} />
		</AlignWidget>
	}

compose
{
	{
		var cc = pressed ? pressedBackgroundColor : backgroundColor
		if String.isNotEmpty(cc):
			compose {
				<CanvasWidget rounding=@{rounding} backgroundColor=@{cc} />
			}
	}
	<LayerWithPaddingWidget padding=@{innerPadding}>
		<AlignWidget horizontal=@{contentAlignment} vertical="center">
			{
				if String.isEmpty(icon) == false && String.isEmpty(text) == false {
					if arrangement == "horizontal" {
						compose {
							<HorizontalBoxWidget spacing="1mm" alignment="center">
								{
									composeIcon(context)
									composeLabel(context)
								}
							</HorizontalBoxWidget>
						}
					}
					else if arrangement == "vertical" {
						compose {
							<VerticalBoxWidget spacing="1mm" alignment="center">
								{
									composeIcon(context)
									composeLabel(context)
								}
							</VerticalBoxWidget>
						}
					}
				}
				else if String.isEmpty(icon) == false {
					composeIcon(context)
				}
				else if String.isEmpty(text) == false {
					composeLabel(context)
				}
			}
		</AlignWidget>
	</LayerWithPaddingWidget>
}
