
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

const DIRECTION_VERTICAL = "vertical"
const DIRECTION_HORIZONTAL = "horizontal"

prop rounding as string? #content
prop backgroundColor as string? #content
prop outlineColor as string? #content
prop outlineWidth as string? #content
prop gradientStartColor as string? #content
prop gradientEndColor as string? #content
prop gradientDirection as string? #content

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		var theme = getThemeProcessor()
		var host = sheet.define(":host", new map<string,string> {
			display "block"
		})
		var oc = outlineColor
		if String.isNotEmpty(oc) {
			var width = outlineWidth
			if String.isEmpty(width):
				width = "0px"
			width = lengthToHtml(theme.getValue(width))
			host.set("border", width .. " solid " .. oc)
		}
		if var rr = rounding:
			host.set("border-radius", lengthToHtml(theme.getValue(rr)))
		var bgc = backgroundColor
		if String.isNotEmpty(bgc):
			host.set("background-color", colorToHtml(theme.getValue(bgc)))
		var start = gradientStartColor
		var end = gradientEndColor
		var direction = gradientDirection
		if String.isNotEmpty(start) && String.isNotEmpty(end) && String.isNotEmpty(direction) {
			var sb = new StringBuilder()
			sb.appendString("linear-gradient(")
			if direction == DIRECTION_HORIZONTAL {
				sb.appendString("to left")
			}
			else if direction == DIRECTION_VERTICAL {
				sb.appendString("to bottom")
			}
			else {
				sb.appendString("0deg")
			}
			sb.appendString(", ")
			sb.appendString(colorToHtml(theme.getValue(start)))
			sb.appendString(", ")
			sb.appendString(colorToHtml(theme.getValue(end)))
			sb.appendString(")")
			host.set("background-image", sb.toString())
		}
	}
}
ELSE IFDEF "target_ios_swift"
{
	import [magical:UIKit]

	func getUikitBackgroundColor(theme as JcoThemeProcessor) as [magical:UIColor]?
	{
		var bgc = backgroundColor
		if String.isNotEmpty(bgc):
			return colorToUiColor(theme.getValue(bgc))
		return null
	}

	func getUikitCornerRadius(theme as JcoThemeProcessor) as double
	{
		if var rr = rounding:
			return asPoints(theme.getValue(rr))
		return 0.0
	}

	func getUikitBorderWidth(theme as JcoThemeProcessor) as double
	{
		var width = outlineWidth
		if String.isEmpty(width):
			return 0.0
		return asPoints(theme.getValue(width))
	}

	func getUikitBorderColor(theme as JcoThemeProcessor) as [magical:CGColor]?
	{
		var olc = outlineColor
		if String.isNotEmpty(olc):
			return lang "swift" (theme) as [magical:CGColor] {{{ colorToUiColor(theme.getValue(olc!)).cgColor }}}
		return null
	}

	func composeComponent(context as JcoComposeContext) override throws Exception
	{
		var theme = getThemeProcessor()
		lang "swift" (theme) {{{
			self.backgroundColor = getUikitBackgroundColor(theme)
			self.layer.masksToBounds = true
			self.layer.cornerRadius = getUikitCornerRadius(theme)
			self.layer.borderWidth = getUikitBorderWidth(theme)
			self.layer.borderColor = getUikitBorderColor(theme)
		}}}
		// FIXME: Gradient support
	}
}
