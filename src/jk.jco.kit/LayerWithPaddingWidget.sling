
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is LayerWidget #jco #component:

prop padding as string #content = "0"

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		base.addCssRules(sheet)
		var theme = JcoThemeProcessor.forComponent(this)
		sheet.define(":host", new map<string,string> {
			"box-sizing" "border-box"
			padding lengthToHtml(theme.getValue(padding))
		})
	}
}
ELSE IFDEF "target_ios_swift"
{
	import jk.gfx
	import [magical:UIKit]

	func computeSizeThatFits(cw as double, ch as double) override as Size
	{
		var theme = getThemeProcessor()
		var padding = asPoints(theme.getValue(padding))
		var w #mutated = 0.0
		var h #mutated = 0.0
		lang "swift" {{{
			for subview in subviews {
				let cgsz = subview.sizeThatFits(CGSizeMake(cw - padding - padding, ch - padding - padding))
				if cgsz.width > w {
					w = cgsz.width
				}
				if cgsz.height > h {
					h = cgsz.height
				}
			}
		}}}
		w += padding + padding
		h += padding + padding
		return new Size() {
			width w
			height h
		}
	}

	func layoutSubviews override #magical
	{
		var theme = getThemeProcessor()
		var padding = asPoints(theme.getValue(padding))
		lang "swift" (padding) {{{
			for subview in subviews {
				subview.frame = CGRectMake(padding, padding, self.bounds.size.width - padding - padding, self.bounds.size.height - padding - padding)
			}
		}}}
	}
}

compose
{
	{
		composeChildren(context)
	}
}
