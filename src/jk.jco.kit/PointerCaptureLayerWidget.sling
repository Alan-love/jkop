
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is LayerWidget #jco #component:

prop clickHandler as function<() throws Exception>?
prop clickComponentHandler as function<(JcoComponent) throws Exception>?
prop pointerEnterHandler as function<() throws Exception>?
prop pointerLeaveHandler as function<() throws Exception>?

func onClicked virtual throws Exception
{
	var ch = clickHandler
	if ch:
		ch()
	var cch = clickComponentHandler
	if cch:
		cch(this)
}

func onPressed virtual throws Exception:
	nop

func onReleased virtual throws Exception:
	nop

func onPointerEnter virtual throws Exception
{
	var ch = pointerEnterHandler
	if ch:
		ch()
}

func onPointerLeave virtual throws Exception
{
	var ch = pointerLeaveHandler
	if ch:
		ch()
}

section private
{
	func handleOnClicked:
		executeAndHandleExceptions(func throws Exception => onClicked())

	func handleOnPressed:
		executeAndHandleExceptions(func throws Exception => onPressed())

	func handleOnReleased:
		executeAndHandleExceptions(func throws Exception => onReleased())

	func handleOnPointerEnter:
		executeAndHandleExceptions(func throws Exception => onPointerEnter())

	func handleOnPointerLeave:
		executeAndHandleExceptions(func throws Exception => onPointerLeave())
}

IFDEF "target_browser_js"
{
	var isPressed = false

	func getCssPointerEventsValue override as string?:
		return "all"

	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		base.addCssRules(sheet)
		sheet.define(":host", new map<string,string> {
			cursor "pointer"
			"user-select" "none"
		})
	}

	func onMounted override throws Exception
	{
		base.onMounted()
		var element = asElement()
		element.setEventCapturer("click", func(event as dynamic) => handleOnClicked())
		element.setEventObserver("pointerenter", func(event as dynamic) => handleOnPointerEnter())
		element.setEventObserver("pointercancel", func(event as dynamic) {
			if isPressed {
				isPressed = false
				handleOnReleased()
			}
		})
		element.setEventObserver("pointerleave", func(event as dynamic) {
			if isPressed {
				isPressed = false
				handleOnReleased()
			}
			handleOnPointerLeave()
		})
		element.setEventObserver("pointerdown", func(event as dynamic) {
			if not isPressed {
				isPressed = true
				handleOnPressed()
			}
		})
		element.setEventObserver("pointerup", func(event as dynamic) {
			if isPressed {
				isPressed = false
				handleOnReleased()
			}
		})
	}

	func onUnmounted override throws Exception
	{
		base.onUnmounted()
		var element = asElement()
		element.setEventCapturer("click", null)
		element.setEventObserver("pointerenter", null)
		element.setEventObserver("pointercancel", null)
		element.setEventObserver("pointerleave", null)
		element.setEventObserver("pointerdown", null)
		element.setEventObserver("pointerup", null)
	}
}
ELSE IFDEF "target_ios_swift"
{
	import [magical:UIKit]

	var isPressed #mutated = false

	func onMounted override throws Exception
	{
		base.onMounted()
		lang "swift" {{{
			self.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(self.onTapGesture(_:))))
		}}}
	}

	func onUnmounted override throws Exception
	{
		base.onUnmounted()
		lang "swift" {{{
			if let recs = self.gestureRecognizers {
				for rec in recs {
					self.removeGestureRecognizer(rec)
				}
			}
		}}}
	}

	lang "swift" (handleOnClicked, handleOnPressed, handleOnReleased) {{{
		@objc func onTapGesture(_ sender: UITapGestureRecognizer? = nil) {
			if isPressed {
				isPressed = false
				self.handleOnReleased()
			}
			self.handleOnClicked()
		}

		public override func touchesBegan(_ touches: Swift.Set<UITouch>, with event: UIEvent?) {
			if isPressed == false {
				isPressed = true
				handleOnPressed()
			}
		}

		public override func touchesEnded(_ touches: Swift.Set<UITouch>, with event: UIEvent?) {
			if isPressed {
				isPressed = false
				handleOnReleased()
			}
		}

		public override func touchesCancelled(_ touches: Swift.Set<UITouch>, with event: UIEvent?) {
			if isPressed {
				isPressed = false
				handleOnReleased()
			}
		}
	}}}
}

compose
{
	{
		composeChildren(context)
	}
}
