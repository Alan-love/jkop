
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

prop placeholder as string #content = ""
prop font as string #content = "{textInputFont|Arial 14px}"
prop backgroundColor as string #content = "{textInputBackgroundColor|#FFFFFF}"
prop textColor as string #content = "{textInputTextColor|#000000}"
prop borderColor as string #content = "{textInputBorderColor|black}"
prop borderWidth as string #content = "{textInputBorderWidth|1px}"
prop focusBorderColor as string #content = "{textInputFocusBorderColor|blue}"
prop focusBorderWidth as string #content = "{textInputFocusBorderWidth|1mm}"
prop rounding as string #content = "{textInputRounding|0px}"
prop padding as string #content = "{textInputPadding|2mm}"
prop enterEventHandler as function<() throws Exception>?

func getValue as string
{
	IFDEF "target_browser_js" {
		var element = inputElement
		return lang "js" (element) as string {{{ element.value }}}
	}
	ELSE IFDEF "target_headless" {
		ERROR NOT_SUPPORTED
	}
	ELSE {
		ERROR NOT_IMPLEMENTED
	}
}

func setValue(val as string)
{
	IFDEF "target_browser_js" {
		var element = inputElement
		lang "js" (element, val) {{{
			element.value = val;
		}}}
	}
	ELSE IFDEF "target_headless" {
		nop val
		ERROR NOT_SUPPORTED
	}
	ELSE {
		nop val
		ERROR NOT_IMPLEMENTED
	}
}

func onEnterPressed virtual throws Exception
{
	var handler = enterEventHandler
	if handler:
		handler()
}

section private
{
	func handleOnEnterPressed #used:
		executeAndHandleExceptions(func throws Exception => onEnterPressed())
}

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		base.addCssRules(sheet)
		var theme = JcoThemeProcessor.forComponent(this)
		sheet.define(":host", new map<string,string> {
			display "block"
		})
		sheet.define(":host input", new map<string,string> {
			width "100%"
			height "100%"
			"box-sizing" "border-box"
			"background-color" colorToHtml(theme.getValue(backgroundColor))
			color colorToHtml(theme.getValue(textColor))
			padding lengthToHtml(theme.getValue(padding))
			font fontToHtml(theme.getValue(font))
			"border-radius" lengthToHtml(theme.getValue(rounding))
			"border-color" colorToHtml(theme.getValue(borderColor))
			"border-width" lengthToHtml(theme.getValue(borderWidth))
			outline "none"
		})
		sheet.define(":host input:focus", new map<string,string> {
			"box-shadow" "0 0 0 " .. lengthToHtml(theme.getValue(focusBorderWidth)) .. " " .. colorToHtml(theme.getValue(focusBorderColor))
		})
	}

	compose
	{
		{
			var theme = JcoThemeProcessor.forComponent(this)
			compose {
				<input var inputElement type="text" placeholder=@{theme.getValue(placeholder)} />
			}
		}
	}

	func onComposed override throws Exception
	{
		var element = inputElement
		if element:
			element.setEventCapturer("keyup", func(event as dynamic) {
				if event.keyCode as! int == 13:
					handleOnEnterPressed()
			})
	}
}
