
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

prop text as string #content = ""
prop font as string #content = "{hyperlinkFont|Arial 16px}"
prop textColor as string #content = "{hyperlinkColor|blue}"
prop textHoverColor as string #content = "{hyperlinkHoverColor|#CCCCFF}"
prop textUnderline as string #content = "{hyperlinkUnderline|true}"
prop handler as function<() throws Exception>?

func onClicked virtual throws Exception
{
	var oc = handler
	if oc:
		oc()
}

section private
{
	func handleOnClicked:
		executeAndHandleExceptions(func throws Exception => onClicked())
}

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		base.addCssRules(sheet)
		var theme = getThemeProcessor()
		var a = sheet.define("a", new map<string,string> {
			color colorToHtml(theme.getValue(textColor))
		})
		if Boolean.asValueOrThrowError(theme.getValue(textUnderline)):
			a.set("text-decoration", "underline")
		sheet.define("a:hover", new map<string,string> {
			color colorToHtml(theme.getValue(textHoverColor))
		})
	}

	compose
	{
		<a var link href="#">
			{
				if String.isNotEmpty(text):
					compose {
						@{text}
					}
				composeChildren(context)
			}
		</a>
	}

	func onComposed override throws Exception
	{
		var link = this.link
		if link:
			link.setEventCapturer("click", func(event as dynamic) => handleOnClicked())
	}
}
ELSE {
	class LinkDisplayWidget is PointerCaptureLayerWidget #jco #component
	{
		prop text as string #content = ""
		prop font as string #content = ""
		prop textColor as string #content = ""
		prop textHoverColor as string #content = ""
		prop textUnderline as string #content = ""

		var hovered = false

		func onPointerEnter override throws Exception
		{
			base.onPointerEnter()
			hovered = true
			update()
		}

		func onPointerLeave override throws Exception
		{
			base.onPointerLeave()
			hovered = false
			update()
		}

		compose
		{
			<VerticalBoxWidget spacing="2px">
				<LabelWidget
					text=@{text}
					font=@{font}
					color=@{hovered ? textHoverColor : textColor}
					wrapping="false" />
				{
					if textUnderline == "true":
						compose {
							<CanvasWidget backgroundColor=@{hovered ? textHoverColor : textColor} height="1px" />
						}
				}
			</VerticalBoxWidget>
		}
	}

	compose
	{
		<LinkDisplayWidget
			text=@{text}
			font=@{font}
			textColor=@{textColor}
			textHoverColor=@{textHoverColor}
			textUnderline=@{textUnderline}
			clickHandler=@{func throws Exception => handleOnClicked()} />
	}
}
