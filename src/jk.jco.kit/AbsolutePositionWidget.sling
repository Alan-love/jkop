
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.jco.common

class is JcoComponent #jco #component:

prop childX as string = "0" #content
prop childY as string = "0" #content
prop childWidth as string? #content
prop childHeight as string? #content
prop alignment as string = "left" #content

IFDEF "target_browser_js"
{
	func addCssRules(sheet as CSSBuilder) override throws Exception
	{
		// FIXME
	}
}
ELSE IFDEF "target_ios_swift"
{
	import [magical:UIKit]

	func layoutSubviews override #magical
	{
		var x = Double.forString(childX)
		var y = Double.forString(childY)
		var fixedWidth = 0.0
		var fixedHeight = 0.0
		if var childWidth = childWidth:
			fixedWidth = Double.forString(childWidth)
		if var childHeight = childHeight:
			fixedHeight = Double.forString(childHeight)
		lang "swift" (x, y) {{{
			let csize = self.bounds.size
			let rsz = CGSizeMake(csize.width, csize.height)
			for subview in subviews {
				let sframe = subview.sizeThatFits(rsz)
				var szw = sframe.width
				var szh = sframe.height
				if fixedWidth > 0.0 {
					szw = fixedWidth
				}
				if fixedHeight > 0.0 {
					szh = fixedHeight
				}
				if alignment == "left" {
					subview.frame = CGRectMake(x, y, szw, szh)
				}
				else if alignment == "right" {
					subview.frame = CGRectMake(x - sframe.width, y, szw, szh)
				}
				else if alignment == "center" {
					subview.frame = CGRectMake(x - sframe.width / 2, y, szw, szh)
				}
			}
		}}}
	}
}

compose
{
	{
		composeChildren(context)
	}
}
