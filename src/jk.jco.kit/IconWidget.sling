
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.log
import jk.jco.common

class is JcoComponent #jco #component:

prop id as string #content = Icon.CIRCLE_EXCLAMATION
prop iconSize as string #content = "{iconSize|4mm}"
prop color as string #content = "{textColor|#000000}"

IFDEF "target_browser_js"
{
	import jk.jco.awesome

	func translateIconId(id as string) as string
	{
		var mappingTable = new map<string,string> {
			@{Icon.CIRCLE_EXCLAMATION} "fa-solid-900:f06a"
			@{Icon.TRIANGLE_EXCLAMATION} "fa-solid-900:f071"
			@{Icon.BELL} "fa-regular-400:f0f3"
			@{Icon.BELL_SLASH} "fa-regular-400:f1f6"
			@{Icon.THREE_HORIZONTAL_LINES} "fa-solid-900:f0c9"
			@{Icon.HOME} "fa-solid-900:f015" // wrong
			@{Icon.HOME_CIRCLE} "fa-solid-900:f015" // wrong
			@{Icon.ELECTRICITY} "fa-solid-900:f0e7" // wrong
			@{Icon.ELECTRICITY_CIRCLE} "fa-solid-900:f0e7" // wrong
			@{Icon.PERSON} "fa-regular-400:f007"
			@{Icon.PERSON_CIRCLE} "fa-regular-400:f2bd"
			@{Icon.SETTINGS} "fa-solid-900:f013"
			@{Icon.SETTINGS_CIRCLE} "fa-solid-900:f013" // wrong
			@{Icon.NEWS} "fa-regular-400:f1ea"
			@{Icon.NEWS_CIRCLE} "fa-regular-400:f1ea" // wrong
			@{Icon.MESSAGE} "fa-regular-400:f0e0"
			@{Icon.MESSAGE_CIRCLE} "fa-regular-400:f0e0" // wrong
			@{Icon.WIFI} "fa-solid-900:f1eb"
			@{Icon.WIFI_CIRCLE} "fa-solid-900:f1eb" // wrong
			@{Icon.PLUS} "fa-solid-900:2b"
			@{Icon.PLUS_CIRCLE} "fa-solid-900:f055"
			@{Icon.CHEVRON_RIGHT} "fa-solid-900:f054"
			@{Icon.CHEVRON_RIGHT_CIRCLE} "fa-solid-900:f054" // wrong
			@{Icon.CHEVRON_LEFT} "fa-solid-900:f053"
			@{Icon.CHEVRON_LEFT_CIRCLE} "fa-solid-900:f053" // wrong
			@{Icon.CHEVRON_UP} "fa-solid-900:f077"
			@{Icon.CHEVRON_UP_CIRCLE} "fa-solid-900:f077" // wrong
			@{Icon.CHEVRON_DOWN} "fa-solid-900:f078"
			@{Icon.CHEVRON_DOWN_CIRCLE} "fa-solid-900:f078" // wrong
			@{Icon.XMARK} "fa-solid-900:f00d"
			@{Icon.XMARK_CIRCLE} "fa-regular-400:f057"
		}
		var v = Map.getValue(mappingTable, id)
		if String.isEmpty(v) {
			Log.error(ctx, "Unsupported icon ID: `" .. id .. "'")
			v = "fa-regular-400:f06a"
		}
		return v
	}

	compose
	{
		{
			var icon = translateIconId(id)
			var comps = String.split(icon, ':', 2)
			var font = Vector.getValue(comps, 0) ?? "fa-regular-400"
			var content = Vector.getValue(comps, 1) ?? "f06a"
			compose {
				<FontAwesomeIconWidget font=@{font} content=@{content} size=@{iconSize} color=@{color} />
			}
		}
	}
}
ELSE IFDEF "target_ios_swift"
{
	import [magical:UIKit]

	func computeSizeThatFits(cw as double, ch as double) override as Size
	{
		var theme = getThemeProcessor()
		var sz = asPoints(theme.getValue(iconSize))
		if sz > cw:
			sz = cw
		if sz > ch && ch < cw:
			sz = ch
		return new Size() {
			width sz
			height sz
		}
	}

	func translateIconId(id as string) as string
	{
		var mappingTable = new map<string,string> {
			@{Icon.CIRCLE_EXCLAMATION} "exclamationmark.circle"
			@{Icon.TRIANGLE_EXCLAMATION} "exclamationmark.triangle"
			@{Icon.BELL} "bell"
			@{Icon.BELL_SLASH} "bell.slash"
			@{Icon.THREE_HORIZONTAL_LINES} "line.3.horizontal"
			@{Icon.HOME} "house"
			@{Icon.HOME_CIRCLE} "house.circle"
			@{Icon.ELECTRICITY} "bolt"
			@{Icon.ELECTRICITY_CIRCLE} "bolt.circle"
			@{Icon.PERSON} "person"
			@{Icon.PERSON_CIRCLE} "person.circle"
			@{Icon.SETTINGS} "gearshape"
			@{Icon.SETTINGS_CIRCLE} "gearshape.circle"
			@{Icon.NEWS} "newspaper"
			@{Icon.NEWS_CIRCLE} "newspaper.circle"
			@{Icon.MESSAGE} "envelope"
			@{Icon.MESSAGE_CIRCLE} "envelope.circle"
			@{Icon.WIFI} "wifi"
			@{Icon.WIFI_CIRCLE} "wifi.circle"
			@{Icon.PLUS} "plus"
			@{Icon.PLUS_CIRCLE} "plus.circle"
			@{Icon.CHEVRON_RIGHT} "chevron.right"
			@{Icon.CHEVRON_RIGHT_CIRCLE} "chevron.right.circle"
			@{Icon.CHEVRON_LEFT} "chevron.left"
			@{Icon.CHEVRON_LEFT_CIRCLE} "chevron.left.circle"
			@{Icon.CHEVRON_UP} "chevron.up"
			@{Icon.CHEVRON_UP_CIRCLE} "chevron.up.circle"
			@{Icon.CHEVRON_DOWN} "chevron.down"
			@{Icon.CHEVRON_DOWN_CIRCLE} "chevron.down.circle"
			@{Icon.XMARK} "xmark"
			@{Icon.XMARK_CIRCLE} "xmark.circle"
		}
		var v = Map.getValue(mappingTable, id)
		if v == null {
			Log.error(ctx, "Unsupported icon ID: `" .. id .. "'")
			v = "exclamationmark.circle"
		}
		return v
	}

	func getUiImage throws Exception as [magical:UIImage]
	{
		var systemName = translateIconId(id)
		var v = lang "swift" as [magical:UIImage]? {{{ UIImage(systemName: systemName) }}}
		if not v:
			Error.throw("failedToFindIconWithSystemName", systemName)
		return v
	}

	compose
	{
		<[magical:UIImageView] image=@{getUiImage()} tintColor=@{colorToUiColor(getThemeProcessor().getValue(color))} />
	}
}
ELSE {
	compose
	{
	}
}
