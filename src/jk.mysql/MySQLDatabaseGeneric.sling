
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sql
import jk.log
import jk.sha
import jk.time
import jk.thread
import jk.socket
import jk.socket.ssl
import jk.mypacket

class is MySQLDatabase:

description [[
	A generic MySQL client implementation, fully written in Sling. This class is not
	normally meant to be used directly but through MySQLDatabase.
]]

// Protocol reference: https://dev.mysql.com/doc/internals/en/client-server-protocol.html
// FIXME: Do we need a keepalive of some kind?

class MyStatement is SQLStatement
{
	func forStatementId(id as long, columns as vector<ColumnDefinition>?, db as parent) static as this
	{
		var v = new this()
		v.setId(id)
		v.setColumns(columns)
		v.setDb(db)
		return v
	}

	pvar id as long = -1L
	pvar db as parent?
	pvar params as vector<dynamic>?
	pvar columns as vector<ColumnDefinition>?

	IFDEF "target_supports_destructor"
	{
		dtor:
			close()
	}

	func addToParams(param as dynamic?)
	{
		assert param
		if not params:
			params = new vector<dynamic>
		params += param
	}

	func addParamString(val as string) override:
		addToParams(val)

	func addParamInteger(val as int) override:
		addToParams(Integer.asObject(val))

	func addParamLongInteger(val as long) override:
		addToParams(LongInteger.asObject(val))

	func addParamDouble(val as double) override:
		addToParams(Double.asObject(val))

	func addParamBlob(val as buffer) override:
		addToParams(val)

	func setParamString(name as string, val as string) override:
		addToParams(val)

	func setParamInteger(name as string, val as int) override:
		addToParams(Integer.asObject(val))

	func setParamLongInteger(name as string, val as long) override:
		addToParams(LongInteger.asObject(val))

	func setParamDouble(name as string, val as double) override:
		addToParams(Double.asObject(val))

	func setParamBlob(name as string, val as buffer) override:
		addToParams(val)

	func resetStatement override throws Exception
	{
		if db:
			db.resetStatement(this)
		params = null
	}

	func close throws Exception
	{
		if db:
			db.closeStatementSync(this)
		db = null
		id = -1L
		params = null
	}
}

class CapabilityFlags
{
	const CLIENT_LONG_PASSWORD = 0x00000001
	const CLIENT_FOUND_ROWS = 0x00000002
	const CLIENT_LONG_FLAG = 0x00000004
	const CLIENT_CONNECT_WITH_DB = 0x00000008
	const CLIENT_NO_SCHEMA = 0x00000010
	const CLIENT_COMPRESS = 0x00000020
	const CLIENT_ODBC = 0x00000040
	const CLIENT_LOCAL_FILES = 0x00000080
	const CLIENT_IGNORE_SPACE = 0x00000100
	const CLIENT_PROTOCOL_41 = 0x00000200
	const CLIENT_INTERACTIVE = 0x00000400
	const CLIENT_SSL = 0x00000800
	const CLIENT_IGNORE_SIGPIPE = 0x00001000
	const CLIENT_TRANSACTIONS = 0x00002000
	const CLIENT_RESERVED = 0x00004000
	const CLIENT_SECURE_CONNECTION = 0x00008000
	const CLIENT_MULTI_STATEMENTS = 0x00010000
	const CLIENT_MULTI_RESULTS = 0x00020000
	const CLIENT_PS_MULTI_RESULTS = 0x00040000
	const CLIENT_PLUGIN_AUTH = 0x00080000
	const CLIENT_CONNECT_ATTRS = 0x00100000
	const CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA = 0x00200000
	const CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS = 0x00400000
	const CLIENT_SESSION_TRACK = 0x00800000
	const CLIENT_DEPRECATE_EOF = 0x01000000
}

class ConnectionState
{
	const DISCONNECTED = 0
	const CONNECTION = 1
	const COMMAND = 2
	const DISCONNECTING = 3
}

class FieldType
{
	const MYSQL_TYPE_DECIMAL = 0
	const MYSQL_TYPE_TINY = 1
	const MYSQL_TYPE_TINYINT = 1
	const MYSQL_TYPE_BOOL = 1
	const MYSQL_TYPE_SHORT = 2
	const MYSQL_TYPE_SMALLINT = 2
	const MYSQL_TYPE_LONG = 3
	const MYSQL_TYPE_INTEGER = 3
	const MYSQL_TYPE_FLOAT = 4
	const MYSQL_TYPE_DOUBLE = 5
	const MYSQL_TYPE_NULL = 6
	const MYSQL_TYPE_TIMESTAMP = 7
	const MYSQL_TYPE_LONGLONG = 8
	const MYSQL_TYPE_BIGINT = 8
	const MYSQL_TYPE_SERIAL = 8
	const MYSQL_TYPE_INT24 = 9
	const MYSQL_TYPE_MEDIUMINT = 9
	const MYSQL_TYPE_DATE = 10
	const MYSQL_TYPE_TIME = 11
	const MYSQL_TYPE_DATETIME = 12
	const MYSQL_TYPE_YEAR = 13
	const MYSQL_TYPE_NEWDATE = 14
	const MYSQL_TYPE_VARCHAR = 15
	const MYSQL_TYPE_BIT = 16
	const MYSQL_TYPE_TIMESTAMP2 = 17
	const MYSQL_TYPE_DATETIME2 = 18
	const MYSQL_TYPE_TIME2 = 19
	const MYSQL_TYPE_JSON = 245
	const MYSQL_TYPE_NEWDECIMAL = 246
	const MYSQL_TYPE_ENUM = 247
	const MYSQL_TYPE_SET = 248
	const MYSQL_TYPE_TINY_BLOB = 249
	const MYSQL_TYPE_MEDIUM_BLOB = 250
	const MYSQL_TYPE_LONG_BLOB = 251
	const MYSQL_TYPE_BLOB = 252
	const MYSQL_TYPE_VAR_STRING = 253
	const MYSQL_TYPE_STRING = 254
	const MYSQL_TYPE_GEOMETRY = 255
}

class ProtocolHandshake private
{
	pvar protocolVersion as int
	pvar serverVersion as string?
	pvar connectionId as int
	pvar capabilityFlags as int
	pvar characterSet as int
	pvar statusFlags as int
	pvar capabilityFlagsLower as int
	pvar capabilityFlagsUpper as int
	pvar authPluginName as string?
	pvar authPluginData as string?
	pvar authPluginDataPart1 as string?
	pvar authPluginDataPart2 as string?
}

pvar authenticationPlugin as string?

var socket as ConnectedSocket?
var receiveBuffer = Buffer.allocate(1024 * 1024)
var sequence = 0
var connectionState = ConnectionState.DISCONNECTED
var reconnectTime as long
var serverAddress as string?
var username as string?
var password as string?
var database as string?
var sslMode as string?
var protocol as string?
var enableUTF8 = true
var serverCapabilityFlags = 0 as! uint32
var sslEnabled = false
var overflowBuffer as buffer?

IFDEF "target_supports_destructor"
{
	dtor:
		closeSocket()
}

func isSecureConnection as bool:
	return sslEnabled

func getMyCapabilityFlags as int
{
	var v = 0 as! uint32
	if serverSupportsSSL():
		v |= CapabilityFlags.CLIENT_SSL
	v |= CapabilityFlags.CLIENT_PROTOCOL_41
	v |= CapabilityFlags.CLIENT_SECURE_CONNECTION
	v |= CapabilityFlags.CLIENT_PLUGIN_AUTH
	return v as! int
}

func createPacket as MyPacketBuilder
{
	var v = new MyPacketBuilder()
	v.appendMultipleBytes(0, 4)
	return v
}

func finalizePacket(packet as MyPacketBuilder, seqnum as int) throws Exception as buffer
{
	var v = packet.finalize()
	if not v:
		Error.throw("nullFinalizedPacket", null)
	Buffer.copyFrom(v, Buffer.forInt32LE((sizeof v - 4) as! uint32), 0, 0, 4)
	v[3] = (seqnum & (0xFF as! int)) as! uint8
	return v
}

func setConnectionDetails(serverAddress as string, username as string, password as string, database as string, sslMode as string, protocol as string, enableUTF8 as bool) override throws Exception
{
	if protocol != MySQLDatabase.PROTOCOL_SOCKET:
		Error.throw("unsupportedMySqlProtocol", protocol)
	this.serverAddress = serverAddress
	this.username = username
	this.password = password
	this.database = database
	this.sslMode = sslMode
	this.protocol = protocol
	this.enableUTF8 = enableUTF8
	this.reconnectTime = 0L
	if not reconnectSync():
		Error.throw("failedToStartMySqlConnection", null)
}

func serverSupportsSSL as bool
{
	if serverCapabilityFlags & CapabilityFlags.CLIENT_SSL:
		return true
	return false
}

func openSocketForAddress(address as string) throws Exception as TCPSocket
{
	var host = address
	var port = 3306
	if String.getIndexOfCharacter(host, ':') >= 0 {
		var comps = String.split(host, ':', 2)
		host = comps[0]
		port = Integer.forStringOrThrowError(comps[1])
	}
	Log.debug(ctx, "Connecting to MySQL server `" .. host .. ":" .. String.forInteger(port) .. "' ..")
	return TCPSocket.createAndConnect(host, port)
}

func getHostName(address as string) as string
{
	var colon = String.getIndexOfCharacter(address, ':')
	if colon >= 0:
		return String.getSubString(address, 0, colon)
	return address
}

func parseProtocolHandshake(buffer as buffer) private as ProtocolHandshake
{
	var walker = MyPacketParser.forBuffer(buffer)
	var v = new ProtocolHandshake()
	v.setProtocolVersion(walker.getInt8())
	v.setServerVersion(walker.getNullTerminatedString())
	v.setConnectionId(walker.getInt32())
	if v.getProtocolVersion() >= 10 {
		v.setAuthPluginDataPart1(walker.getStaticLengthString(8))
		walker.skipBytes(1)
		v.setCapabilityFlagsLower(walker.getInt16())
		v.setCharacterSet(walker.getInt8())
		v.setStatusFlags(walker.getInt16())
		v.setCapabilityFlagsUpper(walker.getInt16())
		var apdatalen = walker.getInt8()
		walker.skipBytes(10)
		apdatalen -= 8
		if apdatalen > 13:
			apdatalen = 13
		v.setAuthPluginDataPart2(walker.getStaticLengthString(apdatalen))
		v.setAuthPluginName(walker.getNullTerminatedString())
		v.setAuthPluginData(String.appendString(v.getAuthPluginDataPart1(), v.getAuthPluginDataPart2()))
	}
	return v
}

class OkPacket private
{
	pvar affectedRows as long
	pvar lastInsertId as long
	pvar statusFlags as int
	pvar warningCount as int
}

func isOkPacket(packet as buffer?) private as bool
{
	assert packet
	if packet[0] == 0x00:
		return true
	return false
}

func parseOkPacket(packet as buffer) private as OkPacket
{
	var v = new OkPacket()
	var walker = MyPacketParser.forBuffer(packet)
	walker.getInt8() // header
	v.setAffectedRows(walker.getLengthEncodedInteger())
	v.setLastInsertId(walker.getLengthEncodedInteger())
	v.setStatusFlags(walker.getInt16())
	v.setWarningCount(walker.getInt16())
	return v
}

func logOkPacket(v as OkPacket) private:
	Log.debug(ctx, "MySQL server responded with OK status: affectedRows=" .. String.forLongInteger(v.getAffectedRows()) .. ", lastInsertId=" .. String.forLongInteger(v.getLastInsertId()) .. ", statusFlags=" .. String.forInteger(v.getStatusFlags()) .. ", warningCount=" .. String.forInteger(v.getWarningCount()))

func handleAsErrorPacket(packet as buffer?) private as bool
{
	assert packet
	if packet[0] == 0xFF {
		logErrorPacket(packet)
		return true
	}
	return false
}

func logErrorPacket(packet as buffer) private
{
	var walker = MyPacketParser.forBuffer(packet)
	walker.getInt8() // header
	var errorCode = walker.getInt16()
	walker.getStaticLengthString(1) // sqlStateMarker
	walker.getStaticLengthString(5) // sqlState
	var errorMessage = walker.getEofTerminatedString()
	Log.error(ctx, "MySQL server sent error: errorCode=" .. String.forInteger(errorCode) .. ", errorMessage=`" .. errorMessage .. "'")
}

func reconnectSync private throws Exception as bool
{
	closeSocket()
	var now = SystemClock.asSeconds()
	if now - reconnectTime < 5 {
		Log.debug(ctx, "Reconnecting too fast. Waiting for 5 seconds..")
		CurrentThread.sleepSeconds(5)
	}
	reconnectTime = SystemClock.asSeconds()
	if not serverAddress:
		Error.throw("noServerAddress", this)
	var osocket = openSocketForAddress(serverAddress)
	connectionState = ConnectionState.CONNECTION
	this.socket = osocket
	var header = assert receivePacketDataSync()
	var hs = parseProtocolHandshake(header)
	Log.debug(ctx, "protocolVersion: " .. String.forInteger(hs.getProtocolVersion()))
	Log.debug(ctx, "serverVersion: " .. hs.getServerVersion())
	Log.debug(ctx, "connectionId: " .. String.forInteger(hs.getConnectionId()))
	Log.debug(ctx, "authPluginData: " .. String.forInteger(String.getLength(hs.getAuthPluginData() ?? "")) .. " bytes")
	Log.debug(ctx, "authPluginName: " .. hs.getAuthPluginName())
	Log.debug(ctx, "capabilityFlags: " .. String.forInteger(hs.getCapabilityFlags()))
	Log.debug(ctx, "characterSet: " .. String.forInteger(hs.getCharacterSet()))
	Log.debug(ctx, "statusFlags: " .. String.forInteger(hs.getStatusFlags()))
	Log.debug(ctx, "capabilityFlagsLower: " .. String.forInteger(hs.getCapabilityFlagsLower()))
	Log.debug(ctx, "capabilityFlagsUpper: " .. String.forInteger(hs.getCapabilityFlagsUpper()))
	serverCapabilityFlags = (hs.getCapabilityFlagsUpper() << 16 | hs.getCapabilityFlagsLower()) as! uint32
	if sslMode != MySQLDatabase.SSL_MODE_NONE {
		if not serverSupportsSSL() {
			Log.warning(ctx, "Server does not support SSL. Trying to initialize it anyway...")
		}
		else {
			Log.debug(ctx, "Server supports SSL")
		}
		sendSync(createSSLRequest())
		var sslsocket = SSLSocket.forClient(ctx, osocket, getHostName(serverAddress), true)
		Log.debug(ctx, "SSL connection successfully established.")
		this.socket = sslsocket
		sslEnabled = true
	}
	else {
		Log.debug(ctx, "SSL disabled as requested")
	}
	var ap = authenticationPlugin
	if String.isEmpty(ap):
		ap = hs.getAuthPluginName()
	assert handleAuthenticationSync(ap ?? "", hs.getAuthPluginData() ?? "") {
		Log.error(ctx, "Authentication failed.")
		closeSocket()
	}
	if not executePacketSync(createComInitDb(database ?? "")) {
		closeSocket()
		return false
	}
	connectionState = ConnectionState.COMMAND
	Log.debug(ctx, "Successfully connected and authenticated to MySQL server.")
	return true
}

func getNextSequence as int8
{
	if connectionState == ConnectionState.COMMAND:
		return 0 as! int8
	var v = (sequence & (0xFF as! int)) as! int8
	sequence++
	if sequence > 0xFF:
		sequence = 0
	return v
}

func onSequenceReceived(number as int)
{
	sequence = number + 1
	if sequence > 0xFF:
		sequence = 0
}

func createSSLRequest throws Exception as buffer
{
	var pm = createPacket()
	pm.appendInt32(getMyCapabilityFlags() as! uint32)
	pm.appendInt32(0xFFFFFFFF)
	pm.appendByte(0xFF)
	pm.appendMultipleBytes(0, 23)
	return finalizePacket(pm, getNextSequence())
}

func createComQuit throws Exception as buffer
{
	var pm = createPacket()
	pm.appendByte(0x01)
	return finalizePacket(pm, getNextSequence())
}

func createComInitDb(dbname as string) throws Exception as buffer
{
	var pm = createPacket()
	pm.appendByte(0x02)
	pm.appendEofTerminatedString(dbname)
	return finalizePacket(pm, getNextSequence())
}

func createComQuery(query as string) throws Exception as buffer
{
	var pm = createPacket()
	pm.appendByte(0x03)
	pm.appendEofTerminatedString(query)
	return finalizePacket(pm, getNextSequence())
}

func createAuthenticationPacket(authPlugin as string, authData as string, forAuthSwitch as bool = false) private throws Exception as buffer
{
	var password = this.password ?? ""
	var pm = createPacket()
	if not forAuthSwitch {
		pm.appendInt32(getMyCapabilityFlags() as! uint32)
		pm.appendInt32(0xFFFFFFFF)
		pm.appendByte(0xFF)
		pm.appendMultipleBytes(0, 23)
		pm.appendNullTerminatedString(username)
	}
	if authPlugin == "mysql_clear_password" {
		if not forAuthSwitch {
			pm.appendByte(String.getLength(password))
			pm.appendBuffer(String.toUTF8Buffer(password))
			pm.appendNullTerminatedString("mysql_clear_password")
		}
		else {
			pm.appendBuffer(String.toUTF8Buffer(password))
		}
	}
	else if authPlugin == "mysql_native_password" {
		var bpassword = String.toUTF8Buffer(password)
		var bdata = String.toUTF8Buffer(authData)
		var encoder = SHAEncoder.forSha1()
		var h1 = encoder.encodeBuffer(bpassword)
		var hpw2 = encoder.encodeBuffer(h1)
		var concat = Buffer.append(bdata, hpw2)
		var h2 = encoder.encodeBuffer(concat)
		if sizeof h1 != 20 || sizeof h2 != 20:
			Error.throw("shaEncoderReturnedWrongSizedBuffers", null)
		for(var n = 0 ; n < 20 ; n++):
			h1[n] = h1[n] ^ h2[n]
		if not forAuthSwitch {
			pm.appendByte(20)
			pm.appendBuffer(h1)
			pm.appendNullTerminatedString("mysql_native_password")
		}
		else {
			pm.appendBuffer(h1)
		}
	}
	else if authPlugin == "caching_sha2_password" || authPlugin == "sha256_password" {
		var bpassword = String.toUTF8Buffer(password)
		var bdata = String.toUTF8Buffer(authData)
		var encoder = SHAEncoder.forSha256()
		var h1 = encoder.encodeBuffer(bpassword)
		var hpw2 = encoder.encodeBuffer(h1)
		var concat = Buffer.append(hpw2, bdata)
		var h2 = encoder.encodeBuffer(concat)
		var sz = sizeof h1
		var sz2 = sizeof h2
		if sz != sz2:
			Error.throw("sha256EncoderReturnedWrongSizedBuffers", null)
		for(var n = 0 ; n < sz ; n++):
			h1[n] = h1[n] ^ h2[n]
		if not forAuthSwitch {
			pm.appendByte(sz as! int)
			pm.appendBuffer(h1)
			pm.appendNullTerminatedString("caching_sha2_password")
		}
		else {
			pm.appendBuffer(h1)
		}
	}
	else {
		Error.throw("unsupportedAuthenticationPluginRequestedByServer", authPlugin)
	}
	return finalizePacket(pm, getNextSequence())
}

func handleAuthenticationSync(authPlugin as string, authData as string, forAuthSwitch as bool = false) throws Exception as bool
{
	var response = sendAndReceive(createAuthenticationPacket(authPlugin, authData, forAuthSwitch))
	if not response:
		return false
	if authPlugin == "caching_sha2_password" {
		if sizeof response == 2 && response[0] == 0x01 && response[1] == 0x04 {
			if isSecureConnection() {
				var pm = createPacket()
				pm.appendNullTerminatedString(password)
				response = sendAndReceive(finalizePacket(pm, getNextSequence()))
			}
			else {
				Log.error(ctx, "Using caching_sha2_password over unsecure connection is not supported.")
				return false
			}
		}
		else if sizeof response == 2 && response[0] == 0x01 && response[1] == 0x03 {
			var packet = receivePacketDataSync()
			if packet && isOkPacket(packet) {
				Log.debug(ctx, "Received a fast_auth_success message from MySQL server.")
				logOkPacket(parseOkPacket(packet))
				sequence = 0
				return true
			}
			Log.error(ctx, "Received an unexpected (non-ok) packet from MySQL server.")
			closeSocket()
			return false
		}
	}
	if handleAsErrorPacket(response) {
		closeSocket()
		return false
	}
	if isOkPacket(response) {
		logOkPacket(parseOkPacket(response))
		sequence = 0
		return true
	}
	if response[0] == 0xFE {
		var walker = MyPacketParser.forBuffer(response)
		walker.getInt8()
		var pluginName = walker.getNullTerminatedString()
		var authPluginData = walker.getEofTerminatedString()
		if String.isNotEmpty(pluginName) {
			Log.debug(ctx, "Server responded with auth switch request. Plugin name=`" .. pluginName .. "'")
			if pluginName == authPlugin {
				Log.error(ctx, "Auth switch request to plugin `" .. pluginName .. "' received from server, but already using that plugin! Aborting.")
				closeSocket()
				return false
			}
			return handleAuthenticationSync(pluginName, authPluginData ?? "", true)
		}
	}
	Log.error(ctx, "Unknown packet received from MySQL server as response to handshake response.")
	closeSocket()
	return false
}

func asCompletePacket(buffer as buffer?) private as buffer?
{
	assert buffer
	assert sizeof buffer > 4
	var nb = Buffer.allocate(4)
	nb[0] = buffer[0]
	nb[1] = buffer[1]
	nb[2] = buffer[2]
	nb[3] = 0 as! uint8
	var psize = Buffer.getInt32LE(nb, 0)
	var bsize = sizeof buffer
	if bsize == psize + 4u {
		overflowBuffer = null
		onSequenceReceived(buffer[3])
		return buffer
	}
	if bsize > psize + 4u {
		var v = Buffer.getSubBuffer(buffer, 0, (psize + 4u) as! int)
		overflowBuffer = Buffer.getSubBuffer(buffer, (psize + 4u) as! int)
		onSequenceReceived(v[3])
		return v
	}
	return null
}

func receivePacketSync throws Exception as buffer?
{
	assert socket
	var v = asCompletePacket(overflowBuffer)
	if not v {
		var data = overflowBuffer
		overflowBuffer = null
		loop {
			var n = socket.read(receiveBuffer)
			if n < 1 {
				if connectionState == ConnectionState.COMMAND {
					Log.warning(ctx, "Failed to receive packet. Reconnecting.")
					reconnectSync()
				}
				return null
			}
			data = Buffer.append(data, receiveBuffer, n)
			v = asCompletePacket(data)
			if v:
				break
		}
	}
	if v:
		Log.debug(ctx, "Received packet: " .. String.forBufferHex(v))
	return v
}

func receivePacketsSync throws Exception as vector<buffer>?
{
	var v as vector<buffer>?
	loop {
		var packet = receivePacketSync()
		if not packet:
			return null
		if packet[0] == 0x00 && packet[1] == 0x00 && packet[2] == 0x00:
			break
		if not v:
			v = new vector<buffer>
		v += packet
		if packet[0] == 0xFF && packet[1] == 0xFF && packet[2] == 0xFF:
			continue
		break
	}
	return v
}

func receivePacketDataSync throws Exception as buffer?
{
	var packets = assert receivePacketsSync()
	if sizeof packets == 1 {
		var packet = packets[0]
		assert sizeof packet > 4
		return Buffer.getSubBuffer(packet, 4)
	}
	var v as buffer?
	foreach packet in packets {
		if sizeof packet < 4:
			continue
		v = Buffer.append(v, Buffer.getSubBuffer(packet, 4))
	}
	return v
}

func sendSync(packet as buffer) throws Exception as bool
{
	assert socket
	assert socket.write(packet, -1) > 0 {
		if connectionState == ConnectionState.COMMAND {
			Log.warning(ctx, "Failed to send packet of " .. String.forLongInteger(sizeof packet) .. " bytes. Reconnecting.")
			reconnectSync()
		}
	}
	Log.debug(ctx, "Sent packet: " .. String.forBufferHex(packet))
	return true
}

func sendAndReceive(packet as buffer) throws Exception as buffer?
{
	assert sendSync(packet)
	return receivePacketDataSync()
}

func executePacketSync(packet as buffer) throws Exception as bool
{
	var result = assert sendAndReceive(packet)
	if isOkPacket(result) {
		logOkPacket(parseOkPacket(result))
		return true
	}
	if handleAsErrorPacket(result):
		return false
	Log.warning(ctx, "Received an unexpected (non-error, non-ok) packet from MySQL server.")
	return false
}

func closeSocket private
{
	if socket {
		Log.debug(ctx, "Closing MySQL socket")
		socket.close()
		socket = null
		connectionState = ConnectionState.DISCONNECTED
		sslEnabled = false
		overflowBuffer = null
	}
}

func closeConnection async override throws Exception
{
	connectionState = ConnectionState.DISCONNECTING
	sendAndReceive(createComQuit())
	closeSocket()
}

func receiveColumnsSync(numColumns as long) private throws Exception as vector<ColumnDefinition>?
{
	var columns as vector<ColumnDefinition>?
	if numColumns > 0 {
		columns = new vector<ColumnDefinition>
		var n = 0
		loop {
			var packet = receivePacketDataSync()
			if not packet {
				closeSocket()
				Error.throw("failedToReceiveColumns", null)
			}
			if isEofPacket(packet):
				break
			var column = parseColumnDefinition(packet)
			Log.debug(ctx, "Column: `" .. column.getName() .. "'")
			columns += column
			n++
		}
		Log.debug(ctx, "Received " .. String.forInteger(n) .. " columns")
	}
	return columns
}

func prepareStatement(sql as string) async override throws Exception as SQLStatement
{
	var prep = createPacket()
	prep.appendByte(0x16)
	prep.appendEofTerminatedString(sql)
	Log.debug(ctx, "Preparing query: `" .. sql .. "'")
	var prepresp = sendAndReceive(finalizePacket(prep, getNextSequence()))
	if prepresp == null || handleAsErrorPacket(prepresp):
		Error.throw("errorInPrepareStatement", null)
	var walker = MyPacketParser.forBuffer(prepresp)
	var status = walker.getInt8()
	if status != 0:
		Error.throw("prepareStatementReturnedNonZeroStatus", null)
	var statementId = walker.getInt32()
	var numColumns = walker.getInt16()
	var numParams = walker.getInt16()
	walker.skipBytes(1)
	walker.getInt16() // warningCount
	Log.debug(ctx, "Query prepared as statement id " .. String.forInteger(statementId))
	if numParams > 0 {
		var n = 0
		loop {
			var packet = receivePacketDataSync()
			if not packet {
				closeSocket()
				Error.throw("failedToReceivePacketData", null)
			}
			if isEofPacket(packet):
				break
			// Note: We don't care about these. We just count them for debugging purposes...
			n++
		}
		Log.debug(ctx, "Query has " .. String.forInteger(n) .. " parameter(s)")
	}
	var columns = receiveColumnsSync(numColumns)
	return MyStatement.forStatementId(statementId, columns, this)
}

func isEofPacket(packet as buffer) private as bool
{
	if packet[0] == 0xFE && sizeof packet <= 5:
		return true
	return false
}

class ColumnDefinition private
{
	pvar catalog as string?
	pvar schema as string?
	pvar table as string?
	pvar orgTable as string?
	pvar name as string?
	pvar orgName as string?
	pvar nextLength as int
	pvar characterSet as int
	pvar columnLength as int
	pvar type as int
	pvar flags as int
	pvar decimals as int
}

func parseColumnDefinition(packet as buffer) private as ColumnDefinition
{
	var walker = MyPacketParser.forBuffer(packet)
	var v = new ColumnDefinition()
	v.setCatalog(walker.getLengthEncodedString())
	v.setSchema(walker.getLengthEncodedString())
	v.setTable(walker.getLengthEncodedString())
	v.setOrgTable(walker.getLengthEncodedString())
	v.setName(walker.getLengthEncodedString())
	v.setOrgName(walker.getLengthEncodedString())
	v.setNextLength(walker.getLengthEncodedInteger() as! int)
	v.setCharacterSet(walker.getInt16())
	v.setColumnLength(walker.getInt32())
	v.setType(walker.getInt8())
	v.setFlags(walker.getInt16())
	v.setDecimals(walker.getInt8())
	return v
}

class MyResultSet is SQLResultSetIterator abstract private
{
	pvar columns as vector<ColumnDefinition>?
	pvar rowData as vector<dynamic?>?

	func next override throws Exception as DynamicMap
	{
		step()
		var v = new DynamicMap()
		var cc = getColumnCount()
		for(var n = 0 ; n < cc ; n++) {
			var kk = getColumnName(n)
			v.setDynamic(kk, getColumnValue(n))
		}
		return v
	}

	func nextValues(values as vector<dynamic?>) override throws Exception
	{
		Vector.clear(values)
		step()
		var cc = getColumnCount()
		for(var n = 0 ; n < cc ; n++):
			values += getColumnValue(n)
	}

	func getColumnCount override throws Exception as int
	{
		if not columns:
			return 0
		return Vector.getSize(columns)
	}

	func getColumnName(n as int) override throws Exception as string
	{
		if not columns:
			Error.throw("noColumns", this)
		var v = Vector.getValue(columns, n)
		if not v:
			Error.throw("invalidColumnIndex", String.forInteger(n))
		var vv = v.getName()
		if not vv:
			Error.throw("columnHasNoName", v)
		return vv
	}

	func getColumnNames override throws Exception as vector<string>
	{
		var v = new vector<string>
		var cc = getColumnCount()
		for(var n = 0 ; n < cc ; n++):
			v += getColumnName(n)
		return v
	}

	func getColumnValue(n as int) override throws Exception as dynamic?
	{
		if not rowData:
			Error.throw("noRowData", this)
		if n < 0 || n > Vector.getSize(rowData):
			Error.throw("invalidColumnIndex", String.forInteger(n))
		return rowData[n]
	}

	func getColumnInt(n as int) override throws Exception as int:
		return Integer.asValueOrThrowError(getColumnValue(n))

	func getColumnLong(n as int) override throws Exception as long:
		return LongInteger.asValueOrThrowError(getColumnValue(n))

	func getColumnDouble(n as int) override throws Exception as double:
		return Double.asValueOrThrowError(getColumnValue(n))

	func getColumnBuffer(n as int) override throws Exception as buffer:
		return Buffer.asValueOrThrowError(getColumnValue(n))
}

class SyncFetchResultSet is MyResultSet private
{
	pvar statement as MyStatement?
	pvar db as parent?

	var nextStored as vector<dynamic?>?

	IFDEF "target_supports_destructor"
	{
		dtor:
			close()
	}

	func getNext private throws Exception as vector<dynamic?>?
	{
		var v = nextStored
		if v {
			nextStored = null
			return v
		}
		if not db || not statement:
			return null
		var columns = getColumns()
		if columns:
			v = db.fetchNext(statement, columns)
		if not v:
			close()
		return v
	}

	func hasNext override as bool
	{
		if nextStored:
			return true
		nextStored = try? getNext()
		if nextStored:
			return true
		return false
	}

	func step override throws Exception
	{
		var v = getNext()
		if not v:
			Error.throw("noMoreRecords", this)
		setRowData(v)
	}

	func close override throws Exception
	{
		if statement:
			statement.resetStatement()
		statement = null
		db = null
	}
}

class ExecuteStatementSyncResponse private
{
	func forOk static as this
	{
		var v = new this()
		v.setStatus(true)
		v.setAffectedRows(0)
		v.setResults(null)
		return v
	}

	func forError static as this
	{
		var v = new this()
		v.setStatus(false)
		v.setAffectedRows(0)
		v.setResults(null)
		return v
	}

	func forAffectedRows(n as int) static as this
	{
		var v = new this()
		v.setStatus(true)
		v.setAffectedRows(n)
		v.setResults(null)
		return v
	}

	func forResults(results as MyResultSet) static as this
	{
		var v = new this()
		v.setStatus(true)
		v.setAffectedRows(0)
		v.setResults(results)
		return v
	}

	pvar status as bool
	pvar affectedRows as int
	pvar results as MyResultSet?

	func closeResults throws Exception
	{
		if results {
			results.close()
			results = null
		}
	}
}

func executeStatement(stmt as SQLStatement) override async throws Exception
{
	var v = executeStatementSync(stmt, false)
	v.closeResults()
}

func executeUpdateDeleteStatement(stmt as SQLStatement) override async throws Exception as int
{
	var v = executeStatementSync(stmt, false)
	v.closeResults()
	return v.getAffectedRows()
}

func executeQueryStatement(stmt as SQLStatement) override async throws Exception as SQLResultSetIterator
{
	var v = executeStatementSync(stmt, true)
	var vv = v.getResults()
	if not vv:
		Error.throw("noResultSet", v)
	return vv
}

func closeStatementSync(statement as MyStatement) private throws Exception
{
	var id = statement.getId()
	Log.debug(ctx, "Closing statement " .. String.forLongInteger(id))
	var close = createPacket()
	close.appendByte(0x19)
	close.appendInt32(id as! uint32)
	sendSync(finalizePacket(close, getNextSequence()))
}

func resetStatement(statement as MyStatement) private throws Exception as bool
{
	var id = statement.getId()
	Log.debug(ctx, "Resetting statement " .. String.forLongInteger(id))
	var close = createPacket()
	close.appendByte(0x1A)
	close.appendInt32(id as! uint32)
	var resp = sendAndReceive(finalizePacket(close, getNextSequence()))
	if handleAsErrorPacket(resp):
		return false
	if resp && isOkPacket(resp) {
		logOkPacket(parseOkPacket(resp))
		return true
	}
	Log.error(ctx, "Unknown response to resetStatement")
	return false
}

func isNullInBitmap(bitmap as buffer?, index as int) private as bool
{
	assert bitmap
	assert index > 0
	var idx = index + 2
	var byte = idx / 8
	var bit = idx % 8
	assert byte < sizeof bitmap
	var n = 1
	n = n << bit
	if bitmap[byte] & n as! uint8:
		return true
	return false
}

func parseRecord(packet as buffer, columns as vector<ColumnDefinition>) private throws Exception as vector<dynamic?>
{
	var walker = MyPacketParser.forBuffer(packet)
	var hdr = walker.getInt8()
	if hdr != 0x00:
		Error.throw("recordBufferHasInvalidHeader", String.forIntegerHex(hdr))
	var columnCount = Vector.getSize(columns)
	var nullBytes = (columnCount + 9) / 8
	var nullBitmap = walker.getBuffer(nullBytes)
	var v = new vector<dynamic?>
	Vector.setSize(v, columnCount, Integer.wrapValue(0))
	var n = 0
	foreach column in columns {
		var type = column.getType()
		var o as dynamic?
		if isNullInBitmap(nullBitmap, n) {
			o = null
		}
		else if type == FieldType.MYSQL_TYPE_FLOAT {
			o = Double.asObject(walker.getFloat() as! double)
		}
		else if type == FieldType.MYSQL_TYPE_DOUBLE {
			o = Double.asObject(walker.getDouble())
		}
		else if type == FieldType.MYSQL_TYPE_LONGLONG {
			o = LongInteger.asObject(walker.getInt64())
		}
		else if type == FieldType.MYSQL_TYPE_INTEGER {
			o = Integer.asObject(walker.getInt32())
		}
		else if type == FieldType.MYSQL_TYPE_MEDIUMINT {
			o = Integer.asObject(walker.getInt24())
		}
		else if type == FieldType.MYSQL_TYPE_SMALLINT {
			o = Integer.asObject(walker.getInt16())
		}
		else if type == FieldType.MYSQL_TYPE_YEAR {
			o = Integer.asObject(walker.getInt16())
		}
		else if type == FieldType.MYSQL_TYPE_TINYINT {
			o = Integer.asObject(walker.getInt8())
		}
		else if type == FieldType.MYSQL_TYPE_DATE {
			var length = walker.getInt8()
			if length != 4:
				Error.throw("unsupportedLengthForDateField", String.forInteger(length))
			var year = walker.getInt16()
			var month = walker.getInt8()
			var day = walker.getInt8()
			var dt = new DateTime()
			dt.setYear(year)
			dt.setMonth(month)
			dt.setDayOfMonth(day)
			o = dt
		}
		else if type == FieldType.MYSQL_TYPE_TIMESTAMP || type == FieldType.MYSQL_TYPE_DATETIME {
			var length = walker.getInt8()
			var year = walker.getInt16()
			var month = walker.getInt8()
			var days = walker.getInt8()
			var hours = walker.getInt8()
			var minutes = walker.getInt8()
			var seconds = walker.getInt8()
			var microseconds as int32
			if length == 11 {
				microseconds = walker.getInt32()
			}
			else if length == 7 {
				nop
			}
			else {
				Error.throw("unsupportedLengthForDatetimeField", String.forInteger(length))
			}
			var dt = new DateTime()
			dt.setYear(year)
			dt.setMonth(month)
			dt.setDayOfMonth(days)
			dt.setHours(hours)
			dt.setMinutes(minutes)
			dt.setSeconds(seconds)
			// FIXME: microseconds is currently ignored.
			o = dt
		}
		else if type == FieldType.MYSQL_TYPE_TIME {
			var length = walker.getInt8()
			walker.getInt8() // isNegative
			walker.getInt32()
			var hours = walker.getInt8()
			var minutes = walker.getInt8()
			var seconds = walker.getInt8()
			var microseconds as int32
			if length == 8 {
				nop
			}
			else if length == 12 {
				microseconds = walker.getInt32()
			}
			else {
				Error.throw("unsupportedLengthForTimeField", String.forInteger(length))
			}
			var dt = new DateTime()
			dt.setHours(hours)
			dt.setMinutes(minutes)
			dt.setSeconds(seconds)
			// FIXME: date field is ignored
			// FIXME: microseconds are ignored
			o = dt
		}
		else if type == FieldType.MYSQL_TYPE_DECIMAL || type == FieldType.MYSQL_TYPE_NEWDECIMAL {
			// FIXME: We treat decimals here as string. We could have a more proper type for them though..
			o = walker.getLengthEncodedString()
		}
		else if type == FieldType.MYSQL_TYPE_TINY_BLOB || type == FieldType.MYSQL_TYPE_MEDIUM_BLOB || type == FieldType.MYSQL_TYPE_LONG_BLOB || type == FieldType.MYSQL_TYPE_BLOB {
			var cs = column.getCharacterSet()
			if cs == 63 {
				// binary
				o = walker.getLengthEncodedBuffer()
			}
			else if cs == 255 || cs == 45 || cs == 33 || cs == 224 {
				// utf8mb4 or utf8
				var bb = walker.getLengthEncodedBuffer()
				if bb:
					o = String.forUTF8Buffer(bb)
			}
			else if cs == 11 {
				// ascii
				var bb = walker.getLengthEncodedBuffer()
				if bb:
					o = String.forASCIIBuffer(bb)
			}
			else {
				Log.warning(ctx, "Unsupported character set " .. String.forInteger(cs) .. " encountered. Assuming binary.")
				o = walker.getLengthEncodedBuffer()
			}
		}
		else if type == FieldType.MYSQL_TYPE_GEOMETRY {
			// FIXME: We treat geometry data here as string. We could have a more proper type for it though..
			o = walker.getLengthEncodedString()
		}
		else if type == FieldType.MYSQL_TYPE_STRING || type == FieldType.MYSQL_TYPE_VARCHAR || type == FieldType.MYSQL_TYPE_VAR_STRING {
			var bb = walker.getLengthEncodedBuffer()
			if bb:
				o = String.forUTF8Buffer(bb)
		}
		else if type == FieldType.MYSQL_TYPE_JSON {
			o = walker.getLengthEncodedString()
		}
		else {
			Error.throw("unsupportedFieldTypeInResponse", String.forInteger(type))
		}
		if ctx.isInDebugMode():
			Log.debug(ctx, "Field " .. String.forInteger(n) .. " or `" .. column.getName() .. "' type=" .. String.forInteger(type) .. ", value=`" .. String.asValueOrEmptyString(o) .. "'")
		v[n] = o
		n++
	}
	return v
}

func fetchNext(statement as MyStatement, columns as vector<ColumnDefinition>) private throws Exception as vector<dynamic?>?
{
	var statementId = statement.getId()
	Log.debug(ctx, "Fetching next record for statement " .. String.forLongInteger(statementId))
	var req = createPacket()
	req.appendByte(0x1C)
	req.appendInt32(statementId as! uint32)
	req.appendInt32(1 as! uint32)
	sendSync(finalizePacket(req, getNextSequence()))
	var v as vector<dynamic?>?
	loop {
		var resp = receivePacketDataSync()
		if handleAsErrorPacket(resp):
			return null
		if not resp || isEofPacket(resp):
			break
		var rr = parseRecord(resp, columns)
		if v:
			Log.warning(ctx, "Multiple records received in response to a single fetch statement")
		v = rr
	}
	return v
}

func executeStatementSync(stmt as SQLStatement, withCursor as bool) private throws Exception as ExecuteStatementSyncResponse
{
	var ms = stmt as MyStatement
	if not ms:
		Error.throw("invalidStatementObject", stmt)
	var statementId = ms.getId()
	Log.debug(ctx, "Executing prepared statement with id " .. String.forLongInteger(statementId))
	var xx = createPacket()
	xx.appendByte(0x17)
	xx.appendInt32(statementId as! uint32)
	if withCursor {
		xx.appendByte(0x01)
	}
	else {
		xx.appendByte(0x00)
	}
	xx.appendInt32(1 as! uint32)
	var params = ms.getParams()
	if not params:
		params = new vector<dynamic>
	var pc = Vector.getSize(params)
	if pc > 0 {
		var nullbytes = (pc + 7) / 8
		var bb = Buffer.allocate(nullbytes)
		for(var n = 0 ; n < nullbytes ; n++):
			bb[n] = 0 as! uint8
		for(var n = 0 ; n < pc ; n++) {
			if Vector.getValue(params, n) == null {
				var by = n / 8
				var bi = n % 8
				var x = 1
				if bi > 0:
					x << bi
				bb[by] |= x as! uint8
			}
		}
		xx.appendBuffer(bb)
		xx.appendByte(1)
		for(var n = 0 ; n < pc ; n++) {
			var param = Vector.getValue(params, n)
			if param is string {
				xx.appendByte(FieldType.MYSQL_TYPE_VARCHAR)
				xx.appendByte(0)
			}
			else if param is IntegerObject {
				xx.appendByte(FieldType.MYSQL_TYPE_LONG)
				xx.appendByte(0)
			}
			else if param is LongIntegerObject {
				xx.appendByte(FieldType.MYSQL_TYPE_LONGLONG)
				xx.appendByte(0)
			}
			else if param is DoubleObject {
				xx.appendByte(FieldType.MYSQL_TYPE_DOUBLE)
				xx.appendByte(0)
			}
			else if param is buffer {
				xx.appendByte(FieldType.MYSQL_TYPE_BLOB)
				xx.appendByte(0)
			}
			else {
				Log.warning(ctx, "Unsupported parameter type encountered.")
				xx.appendByte(FieldType.MYSQL_TYPE_BLOB)
				xx.appendByte(0)
			}
		}
		for(var n = 0 ; n < pc ; n++) {
			var param = Vector.getValue(params, n)
			if param is string {
				xx.appendLengthEncodedString(param as! string)
			}
			else if param is IntegerObject {
				var value = (param as! IntegerObject).toInteger()
				xx.appendInt32(value as! uint32)
			}
			else if param is LongIntegerObject {
				var value = (param as! LongIntegerObject).toLongInteger()
				xx.appendInt64(value as! uint64)
			}
			else if param is DoubleObject {
				var value = (param as! DoubleObject).toDouble()
				xx.appendDouble(value)
			}
			else if param is buffer {
				xx.appendLengthEncodedBuffer(param as! buffer)
			}
			else {
				Log.warning(ctx, "Unsupported parameter type encountered.")
				xx.appendLengthEncodedInteger(0)
			}
		}
	}
	var execresp = sendAndReceive(finalizePacket(xx, getNextSequence()))
	if execresp == null || handleAsErrorPacket(execresp):
		Error.throw("errorInExecuteStatementSync", null)
	if isOkPacket(execresp) {
		var pp = parseOkPacket(execresp)
		logOkPacket(pp)
		return ExecuteStatementSyncResponse.forAffectedRows(pp.getAffectedRows() as! int)
	}
	var walker = MyPacketParser.forBuffer(execresp)
	var numColumns = walker.getLengthEncodedInteger()
	var columns = receiveColumnsSync(numColumns)
	var rs = new SyncFetchResultSet()
	rs.setDb(this)
	rs.setStatement(ms)
	rs.setColumns(columns)
	return ExecuteStatementSyncResponse.forResults(rs)
}
