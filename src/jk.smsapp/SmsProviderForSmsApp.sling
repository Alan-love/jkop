
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.md5
import jk.sms
import jk.json
import jk.time
import jk.random
import jk.webserver
import jk.wsprotocol
import jk.wsserver

class is SmsProvider:

class SmsAppServerProtocol is WebSocketProtocol
{
	prop secretKey as string
	prop parent as parent
	prop authenticated as bool = false

	func onConnectionOpened async override throws Exception
	{
		await base.onConnectionOpened()
		parent.onConnectionOpened(this)
	}

	func onConnectionClosed(code as int, reason as string?) async override throws Exception
	{
		await base.onConnectionClosed(code, reason)
		parent.onConnectionClosed(this)
	}

	func authenticateConnection(data as buffer) async throws Exception
	{
		var cred = try? JSONParser.parseBufferAsMap(data)
		if cred == null || not String.equals(secretKey, cred.getString("auth")) {
			Log.error(ctx, "Invalid secret key received when authenticating the connection")
			await closeConnection()
			return
		}
		authenticated = true
		var v = new DynamicMap()
		v.setInteger("type", 2)
		v.setString("command", "authentication_acknowledged")
		await sendMessage(String.toUTF8Buffer(JSONEncoder.toString(v)))
	}

	func onMessageReceived(message as buffer) async override throws Exception
	{
		if not authenticated:
			await authenticateConnection(message)
	}
}

func forWebServer(ctx as LoggingContext, server as WebServer, secretKey as string) static async throws Exception as this
{
	var v = new this() {
		ctx ctx
		secretKey secretKey
	}
	var wsServer = WebSocketServer.forConnectionFactory(ctx, func as WebSocketProtocol => new SmsAppServerProtocol() {
		ctx ctx
		secretKey secretKey
		parent v
	})
	await wsServer.attachToWebServer(server)
	return v
}

prop ctx as LoggingContext
prop secretKey as string

var connections = new vector<SmsAppServerProtocol>

func onConnectionOpened(connection as SmsAppServerProtocol) private throws Exception:
	connections += connection

func onConnectionClosed(connection as SmsAppServerProtocol) private throws Exception:
	Vector.removeValue(connections, connection)

func sendBroadcastMessage(message as buffer) async private throws Exception
{
	foreach cc in connections:
		await cc.sendMessage(message)
}

func sendSmsContent(recipientNumber as string, messageText as string) override async throws Exception
{
	var smsdata = new DynamicMap()
	smsdata.setInteger("type", 1)
	smsdata.setInteger("priority", 1)
	smsdata.setString("message", messageText)
	smsdata.setObject("recipients", new DynamicVector().appendString(recipientNumber))
	var str = JSONEncoder.toString(smsdata)
	if ctx.isInDebugMode():
		Log.debug(ctx, "Sending message data `" .. str .. "'")
	await sendBroadcastMessage(String.toUTF8Buffer(str))
}

func sendSmsTemplate(recipientNumber as string, templateName as string, language as string, parameters as DynamicMap) override async throws Exception:
	ERROR NOT_IMPLEMENTED
