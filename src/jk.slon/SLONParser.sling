
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class:

class NullObject public
{
}

class ParseError is Exception is StringObject public
{
	prop iterator as CharacterIterator
	prop expected as string

	var lineNumber = 0
	var columnNumber = 0
	var lineString as string?

	func computeData
	{
		var opos = iterator.getCurrentPosition()
		lineNumber = 0
		columnNumber = 0
		iterator.setCurrentPosition(0)
		loop {
			if iterator.getCurrentPosition() >= opos:
				break
			if iterator.getCurrentChar() == '\n' {
				lineNumber++
				columnNumber = 0
			}
			else {
				columnNumber++
			}
			iterator.moveToNextChar()
		}
		iterator.setCurrentPosition(opos)
		loop {
			if iterator.getCurrentPosition() < 1:
				break
			iterator.moveToPreviousChar()
			if iterator.getCurrentChar() == '\n' {
				iterator.moveToNextChar()
				break
			}
		}
		var sb = new StringBuilder()
		loop {
			var c = iterator.getCurrentChar()
			if Character.isEOF(c):
				break
			if c == '\n':
				break
			if c == '\t' {
				sb.appendCharacter(' ')
			}
			else {
				sb.appendCharacter(c)
			}
			iterator.moveToNextChar()
		}
		lineString = sb.toString()
		iterator.setCurrentPosition(opos)
	}

	func toString as string
	{
		if not lineString:
			computeData()
		var sb = new StringBuilder()
		for(var n = 0 ; n < columnNumber ; n++):
			sb.appendCharacter(' ')
		sb.appendCharacter('^')
		return "line=" .. String.forInteger(lineNumber + 1) .. ", col=" .. String.forInteger(columnNumber + 1) .. ", expected=`" .. expected .. "'\n" .. lineString .. "\n" .. sb.toString()
	}
}

func parse(data as dynamic?) static as object
{
	var dataBuffer = data as buffer
	if dataBuffer:
		return parseBuffer(dataBuffer)
	var dataString = data as string
	if dataString:
		return parseString(dataString)
	var dataFile = data as File
	if dataFile:
		return parseFile(dataFile)
	Error.throw("unsupportedDataObjectForSlonParser", data)
}

func parseBuffer(buffer as buffer) static as object:
	return forBuffer(buffer).expectObject()

func parseString(str as string) static as object:
	return forString(str).expectObject()

func parseFile(file as File) static as object:
	return forFile(file).expectObject()

func forString(str as string) static as this
{
	var v = new this()
	v.setDataString(str)
	return v
}

func forBuffer(buffer as buffer) static as this
{
	var v = new this()
	v.setDataBuffer(buffer)
	return v
}

func forFile(file as File) static as this
{
	var v = new this()
	v.setDataString(file.getContentsUTF8())
	return v
}

var iterator as CharacterIterator = CharacterIteratorForString.forString("")

func setDataString(str as string)
{
	iterator = CharacterIteratorForString.forString(str)
	iterator.moveToNextChar()
}

func setDataBuffer(buffer as buffer)
{
	iterator = CharacterIteratorForBuffer.forBuffer(buffer)
	iterator.moveToNextChar()
}

func throwExpectationError(expected as string) #throws:
	throw new ParseError() {
		iterator iterator
		expected expected
	}

func skipSpaces private
{
	loop {
		if iterator.hasEnded():
			break
		var c = iterator.getCurrentChar()
		if c == ' ' || c == '\t' || c == '\r' || c == '\n' {
			iterator.moveToNextChar()
			continue
		}
		if c == '#' {
			iterator.moveToNextChar()
			loop {
				if iterator.hasEnded():
					break
				var cc = iterator.getCurrentChar()
				iterator.moveToNextChar()
				if Character.isEOF(cc) || cc == '\n':
					break
			}
			continue
		}
		break
	}
}

func acceptChar(c as char) private as bool
{
	skipSpaces()
	if iterator.getCurrentChar() == c {
		iterator.moveToNextChar()
		return true
	}
	return false
}

func acceptImmediateChar(c as char) private as bool
{
	if iterator.getCurrentChar() == c {
		iterator.moveToNextChar()
		return true
	}
	return false
}

func acceptDoubleQuotedString private as string?
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != '"':
		return null
	var i = 0
	var sb = new StringBuilder()
	loop {
		var c = iterator.getNextChar()
		i++
		if Character.isEOF(c) {
			for(var n = 0 ; n < i ; n++):
				iterator.moveToPreviousChar()
			return null
		}
		if c == ss {
			iterator.moveToNextChar()
			break
		}
		if c == '\\' {
			c = iterator.getNextChar()
			if c == 'u' {
				var v = new StringBuilder()
				var x = 0
				while x < 4 {
					if iterator.hasEnded():
						break
					v.appendCharacter(iterator.getNextChar())
					x++
				}
				c = Integer.forHexStringOrDefaultValue(v.toString()) as! char
			}
			else if c == 't' {
				c = '\t'
			}
			else if c == 'r' {
				c = '\r'
			}
			else if c == 'n' {
				c = '\n'
			}
			else if c == 'b' {
				c = '\b'
			}
			else if c == 'f' {
				c = '\f'
			}
		}
		sb.appendCharacter(c)
	}
	return sb.toString()
}

func acceptBoolean private as BooleanObject?
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != 't' && ss != 'f':
		return null
	var sb = new StringBuilder()
	sb.appendCharacter(ss)
	var li = 5
	if ss == 't':
		li = 4
	var btc = 0
	loop {
		var c = iterator.getNextChar()
		btc++
		if c != 'a' && c != 'l' && c != 's' && c != 'e' && c != 'r' && c != 'u' {
			iterator.moveToNextChar()
			btc++
			break
		}
		sb.appendCharacter(c)
		if sb.count() == li {
			iterator.moveToNextChar()
			btc++
			break
		}
	}
	var v = sb.toString()
	if li == 4 && "true" == v:
		return Boolean.asObject(true)
	if li == 5 && "false" == v:
		return Boolean.asObject(false)
	var i = 0
	while i < btc {
		iterator.moveToPreviousChar()
		i++
	}
	return null
}

func acceptNumber private as object?
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != '-' && ss != '+' && ss != '.' && (ss < '0' || ss > '9'):
		return null
	var sb = new StringBuilder()
	sb.appendCharacter(ss)
	loop {
		var c = iterator.getNextChar()
		if c != '.' && c != 'e' && c != 'E' && c != '-' && (c < '0' || c > '9'):
			break
		sb.appendCharacter(c)
	}
	var s = sb.toString()
	if String.getIndexOfCharacter(s, '.') > -1:
		return Double.asObject(Double.asValueOrThrowError(s))
	var value = LongInteger.asValueOrThrowError(s)
	if value >= -2147483648L && value <= 2147483647L:
		return Integer.asObject(value as! int)
	return LongInteger.asObject(value)
}

func acceptNull private as NullObject?
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != 'n':
		return null
	var sb = new StringBuilder()
	sb.appendCharacter(ss)
	var btc = 0
	loop {
		var c = iterator.getNextChar()
		btc++
		if c != 'u' && c != 'l' {
			iterator.moveToNextChar()
			btc++
			break
		}
		sb.appendCharacter(c)
		if sb.count() == 4 {
			iterator.moveToNextChar()
			btc++
			break
		}
	}
	if "null" == sb.toString():
		return new NullObject()
	var i = 0
	while i < btc {
		iterator.moveToPreviousChar()
		i++
	}
	return null
}

func isIdentifierCharacter(ss as char) private as bool
{
	if ss == 0 as! char || ss == ' ' || ss == '\r' || ss == '\n' || ss == '\t':
		return false
	return true
}

func acceptIdentifier private as string?
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss == '[' {
		var sb = new StringBuilder()
		loop {
			var c = iterator.getNextChar()
			if Character.isEOF(c):
				break
			if c == ']' {
				iterator.moveToNextChar()
				break
			}
			sb.appendCharacter(c)
		}
		return sb.toString()
	}
	if isIdentifierCharacter(ss) {
		var sb = new StringBuilder()
		sb.appendCharacter(ss)
		loop {
			var c = iterator.getNextChar()
			if Character.isEOF(c) || not isIdentifierCharacter(c):
				break
			sb.appendCharacter(c)
		}
		return sb.toString()
	}
	return null
}

func expectIdentifier private as string
{
	var v = acceptIdentifier()
	if not v:
		throwExpectationError("identifier")
	return v
}

func expectObject private as object
{
	var v = acceptObject()
	if not v:
		throwExpectationError("object")
	return v
}

func countIndents(str as string?) private as int
{
	if not str:
		return 0
	var v = 0
	foreach c in String.iterate(str) {
		if c == ' ' || c == '\t' {
			v++
		}
		else {
			break
		}
	}
	return v
}

func stripLongStringIndentation(str as string) private as string
{
	var commonIndents = -1
	var lines = String.split(str, '\n')
	var vsize = Vector.getSize(lines)
	var removedLastLine = false
	if vsize > 0 {
		var lastLine = lines[vsize - 1]
		if countIndents(lastLine) == String.getLength(lastLine) {
			Vector.removeIndex(lines, vsize - 1)
			removedLastLine = true
		}
	}
	foreach line in lines {
		var indents = countIndents(line)
		if commonIndents < 0 || indents < commonIndents:
			commonIndents = indents
	}
	if commonIndents < 1:
		return str
	var sb = new StringBuilder()
	foreach line in lines {
		if sb.count() > 0:
			sb.appendCharacter('\n')
		sb.appendString(String.getEndOfString(line, commonIndents))
	}
	if removedLastLine:
		sb.appendCharacter('\n')
	return sb.toString()
}

func parseLongString private as string
{
	var sb = new StringBuilder()
	if iterator.getCurrentChar() == '\n':
		iterator.moveToNextChar()
	loop {
		var c = iterator.getCurrentChar()
		iterator.moveToNextChar()
		if Character.isEOF(c):
			throwExpectationError("]]")
		if c == ']' {
			c = iterator.getCurrentChar()
			if c == ']' {
				iterator.moveToNextChar()
				break
			}
			sb.appendCharacter(']')
			continue
		}
		sb.appendCharacter(c)
	}
	return stripLongStringIndentation(sb.toString())
}

func acceptObject as object?
{
	if acceptChar('[') {
		if acceptImmediateChar('['):
			return parseLongString()
		var v = new DynamicVector()
		loop {
			if acceptChar(']'):
				break
			v.appendObject(expectObject())
		}
		return v
	}
	if acceptChar('{') {
		var v = new DynamicMap()
		loop {
			if acceptChar('}'):
				break
			var key = expectIdentifier()
			var val = expectObject()
			if val is NullObject {
				v.setObject(key, null)
			}
			else {
				v.setObject(key, val)
			}
		}
		return v
	}
	var s = acceptDoubleQuotedString()
	if s:
		return s
	var b = acceptBoolean()
	if b:
		return b
	var n = acceptNull()
	if n:
		return n
	var v = acceptNumber()
	if v:
		return v
	return null
}
