
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class abstract:

class TestSuiteResult public
{
	prop passedTests as vector<string>
	prop failedTests as vector<string>
	prop errors as vector<string>
}

prop testSuiteName as string?
prop testCases = new vector<TestCase>

ctor:
	initialize()

func initialize virtual:
	nop

func addToTestCases(testCase as TestCase):
	testCases += testCase

func execute(ctx as LoggingContext) async as TestSuiteResult
{
	var passed = new vector<string>
	var failed = new vector<string>
	var errors = new vector<string>
	var suiteName = testSuiteName
	if String.isEmpty(suiteName):
		suiteName = "Unnamed Test Suite"
	Log.info(ctx, "Running test suite: `" .. suiteName .. "'")
	foreach testCase in testCases {
		var testName = testCase.name
		Log.status(ctx, "[" .. suiteName .. "] Running test case: `" .. testName .. "' .. ")
		try {
			var handler = testCase.handler
			await handler()
			passed += testName
			Log.status(ctx, null)
			Log.info(ctx, "[" .. suiteName .. "] " .. testName .. ": Passed")
		}
		catch e {
			var error = String.asValueOrNull(e)
			if String.isEmpty(error):
				error = testName .. ":UnknownError"
			Log.status(ctx, null)
			Log.error(ctx, error)
			Log.error(ctx, "[" .. suiteName .. "] " .. testName .. ": FAILED")
			failed += testName
			errors += error
		}
	}
	var passedCount = Vector.getSize(passed)
	var failedCount = Vector.getSize(failed)
	Log.info(ctx, "Test suite completed: `" .. suiteName .. "'. Passed: " .. String.forInteger(passedCount) .. "/" .. String.forInteger(passedCount + failedCount))
	return new TestSuiteResult() {
		passedTests passed
		failedTests failed
		errors errors
	}
}
