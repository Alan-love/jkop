
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

description [[
	The Boolean class provides convenience methods for dealing with boolean values
	(either true or false).
]]

class MyBooleanObject is BooleanObject private
{
	prop value as bool

	func toBoolean as bool:
		return value
}

func wrapValue(value as bool) static as BooleanObject:
	return new MyBooleanObject() {
		value value
	}

func asValueOrDefaultValue(obj as dynamic?, defaultValue as bool = false) static as bool
{
	description [[
		Converts the given object to boolean and returns its value if possible,
		otherwise returns the value given in "defaultValue", if the conversion could not
		be performed. Various different objects can be supplied (including instances of
		BooleanObject, IntegerObject, StringObject, DoubleObject, CharacterObject,
		ObjectWithSize as well as strings.
	]]
	var v = asObject(obj)
	if not v:
		return defaultValue
	return v.toBoolean()
}

func asValueOrThrowError(obj as dynamic?) static as bool
{
	description [[
		Converts the given object to boolean and returns its value if possible,
		otherwise throws an error if the conversion could not be performed. Various
		different objects can be supplied (including instances of BooleanObject,
		IntegerObject, StringObject, DoubleObject, CharacterObject, ObjectWithSize as
		well as strings.
	]]
	var v = asObject(obj)
	if not v:
		Error.throw("valueCannotBeConvertedToBoolean", obj)
	return v.toBoolean()
}

func asObject(obj as dynamic?) static as BooleanObject?
{
	description [[
		Converts the given object to boolean if possible and returns a Boolean object
		instance or null if the conversion could not be performed. Various different
		objects can be supplied (including instances of BooleanObject, IntegerObject,
		StringObject, DoubleObject, CharacterObject, ObjectWithSize as well as strings.
	]]
	if obj == null:
		return null
	if obj is bool:
		return wrapValue(obj as! bool)
	if obj is BooleanObject {
		var bo = obj as! BooleanObject
		return wrapValue(bo.toBoolean())
	}
	if obj is int {
		if obj as! int == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is IntegerObject {
		if (obj as! IntegerObject).toInteger() == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is long {
		if obj as! long == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is LongIntegerObject {
		if (obj as! LongIntegerObject).toLongInteger() == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is string {
		var v = forStringOrNull(obj as! string)
		if v == null:
			return null
		return wrapValue(v)
	}
	if obj is StringObject {
		var v = forStringOrNull((obj as! StringObject).toString())
		if v == null:
			return null
		return wrapValue(v)
	}
	if obj is double {
		if obj as! double == 0.0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is DoubleObject {
		if (obj as! DoubleObject).toDouble() == 0.0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is char {
		if obj as! int == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is CharacterObject {
		if ((obj as! CharacterObject).toCharacter() as! int) == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	if obj is ObjectWithSize {
		var sz = (obj as! ObjectWithSize).getSize()
		if sz == 0:
			return wrapValue(false)
		return wrapValue(true)
	}
	return null
}

func forStringOrNull(str as string) static as bool?
{
	var str = String.toLowerCase(str)
	if str == "yes" || str == "true" || str == "1":
		return true
	if str == "no" || str == "false" || str == "0":
		return false
	return null
}

func forStringOrDefaultValue(str as string, defaultValue as bool = false) static as bool
{
	var v = forStringOrNull(str)
	if v == null:
		return defaultValue
	return v
}

func forStringOrThrowError(str as string) static as bool
{
	var v = forStringOrNull(str)
	if v == null:
		Error.throw("stringCannotBeConvertedToBoolean", str)
	return v
}
