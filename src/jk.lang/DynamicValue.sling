
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func toLongIntegerValue(value as dynamic) static as long?
{
	if value is int:
		return value as! int
	if value is uint:
		return value as! uint
	if value is long:
		return value as! long
	if value is ulong:
		return (value as! ulong) as! long
	if value is int32:
		return value as! int32
	if value is uint32:
		return value as! uint32
	if value is int16:
		return value as! int16
	if value is uint16:
		return value as! uint16
	if value is int64:
		return (value as! int64) as! long
	if value is uint64:
		return (value as! uint64) as! long
	if value is int8:
		return value as! int8
	if value is uint8:
		return value as! uint8
	if value is bigint:
		return (value as! bigint) as! long
	return null
}

func toDoubleValue(value as dynamic) static as double?
{
	if value is float:
		return value as! float
	if value is double:
		return value as! double
	return null
}

func equals(ap as dynamic?, bp as dynamic?) static as bool
{
	if ap == null {
		if bp == null:
			return true
		return false
	}
	if bp == null:
		return false
	var a = ap
	var b = bp
	if var sa = a as string {
		if var sb = b as string {
			if sa == sb:
				return true
		}
		return false
	}
	if a is bool {
		if b is bool {
			if a as! bool == b as! bool:
				return true
		}
		return false
	}
	var da = toDoubleValue(a)
	if da != null {
		var db = toDoubleValue(b)
		if db != null {
			var dav = da
			var dbv = db
			if dav == dbv:
				return true
		}
		return false
	}
	var ia = toLongIntegerValue(a)
	if ia != null {
		var ib = toLongIntegerValue(b)
		if ib != null {
			var iav = ia
			var ibv = ib
			if iav == ibv:
				return true
		}
		return false
	}
	if var oa = a as object {
		if var ob = b as object {
			if oa == ob:
				return true
		}
		return false
	}
	return false
}
