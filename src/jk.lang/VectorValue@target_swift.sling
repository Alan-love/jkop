
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class <T>:

func forData(data as [magical:Swift.Array<T>]) static as this:
	return new this(data)

var data public as [magical:Swift.Array<T>]

indexer (index as int) as T
{
	set:
		setValue(index, value)
	get:
		return getValue(index)
}

ctor:
	data = lang "swift" as [magical:Swift.Array<T>] {{{ Swift.Array<T>() }}}

ctor(data as [magical:Swift.Array<T>]):
	this.data = data

func getSize as int:
	return lang "swift" (data) as int {{{ data.count }}}

func getValue(index as int) as T:
	return lang "swift" (data, index) as T {{{ data[index] }}}

func setValue(index as int, value as T):
	lang "swift" (data, index, value) {{{
		data[index] = value
	}}}

func insert(index as int, value as T):
	lang "swift" (data, index, value) {{{
		data.insert(value, at: index)
	}}}

func append(value as T):
	lang "swift" (data, value) {{{
		data.append(value)
	}}}

func contains(value as T) as bool
{
	var sz = getSize()
	for(var n = 0 ; n < sz ; n++) {
		if DynamicValue.equals(value, getValue(n)):
			return true
	}
	return false
}

func removeIndex(index as int):
	lang "swift" (data, index) {{{
		data.remove(at: index)
	}}}

func removeValue(value as T):
	lang "swift" (data, value) {{{
		data.removeAll(where: { DynamicValue.equals($0, value) })
	}}}

func removeRange(index as int, count as int)
{
	var max = index + count
	lang "swift" (data, index, max) {{{
		data.removeSubrange(index..<max)
	}}}
}

func removeAll:
	lang "swift" (data) {{{
		data.removeAll()
	}}}

func sort(comparer as function<(T,T) as int>)
{
	lang "swift" (data, comparer) {{{
		data.sort(by: {
			if (comparer($0, $1) < 0) {
				return true
			}
			return false
		})
	}}}
}
