
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_swift"
{
	import [magical:CoreFoundation]
}

class MyDoubleObject is DoubleObject private
{
	prop value as double

	func toDouble implement as double:
		return value
}

func wrapValue(value as double) static as DoubleObject:
	return new MyDoubleObject() {
		value value
	}

func asValueOrDefaultValue(obj as dynamic?, defaultValue as double = 0.0) static as double
{
	var v = asObject(obj)
	if not v:
		return defaultValue
	return v.toDouble()
}

func asValueOrThrowError(obj as dynamic?) static throws Exception as double
{
	var v = asObject(obj)
	if not v:
		Error.throw("valueCannotBeConvertedToDouble", obj)
	return v.toDouble()
}

func asValueOrNull(obj as dynamic?) static as double?
{
	var v = asObject(obj)
	if not v:
		return null
	return v.toDouble()
}

func asObject(obj as dynamic?) static as DoubleObject?
{
	if not obj:
		return null
	if obj is double:
		return wrapValue(obj as! double)
	if obj is DoubleObject {
		var od = obj as! DoubleObject
		return wrapValue(od.toDouble())
	}
	if obj is int {
		var v = obj as! int
		return wrapValue(v as! double)
	}
	if obj is IntegerObject {
		var oi = obj as! IntegerObject
		return wrapValue(oi.toInteger() as! double)
	}
	if obj is long {
		var v = obj as! long
		return wrapValue(v as! double)
	}
	if obj is LongIntegerObject {
		var oi = obj as! LongIntegerObject
		return wrapValue(oi.toLongInteger() as! double)
	}
	if obj is string:
		return wrapValue(forString(obj as! string))
	if obj is StringObject:
		return wrapValue(forString((obj as! StringObject).toString()))
	if obj is char {
		var v = obj as! char
		return wrapValue(v as! double)
	}
	if obj is CharacterObject {
		var oc = obj as! CharacterObject
		return wrapValue(oc.toCharacter() as! double)
	}
	if obj is bool {
		if obj as! bool == true:
			return wrapValue(1.0)
		return wrapValue(0.0)
	}
	if obj is BooleanObject {
		if (obj as! BooleanObject).toBoolean():
			return wrapValue(1.0)
		return wrapValue(0.0)
	}
	return null
}

func longBitsToDouble(vv as long) static as double
{
	description [[
		Incoming vv contains 8 bytes of little endian double data. This function returns
		the double representation of those bits and bytes.
	]]
	IFDEF "target_java" {
		return lang "java" (vv) as double {{{ Double.longBitsToDouble(vv) }}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		return lang "cs" (vv) as double {{{ System.BitConverter.Int64BitsToDouble(vv) }}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vv) {{{
			const buffer = new ArrayBuffer(16);
			const view = new DataView(buffer);
			view.setBigInt64(0, BigInt(vv));
		}}}
		return lang "js" as double {{{ view.getFloat64(0) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (vv) as double {{{ CFConvertDoubleSwappedToHost(CFSwappedFloat64(v: CFSwapInt64(UInt64(vv)))) }}}
	}
	ELSE {
		nop vv
		ERROR NOT_IMPLEMENTED
	}
}

func doubleToLongBits(vv as double) static as long
{
	description [[
		Converts the double-precision floating point value to 8 bytes of little endian
		-format bits.
	]]
	IFDEF "target_java" {
		return lang "java" (vv) as long {{{ Double.doubleToLongBits(vv) }}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		return lang "cs" (vv) as long {{{ System.BitConverter.ToInt64(System.BitConverter.GetBytes(vv), 0) }}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vv) {{{
			const buffer = new ArrayBuffer(16);
			const view = new DataView(buffer);
			view.setFloat64(0, vv);
		}}}
		return lang "js" as long {{{ view.getBigInt64(0) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (vv) as long {{{ Int64(CFSwapInt64(CFConvertDoubleHostToSwapped(vv).v)) }}}
	}
	ELSE {
		nop vv
		ERROR NOT_IMPLEMENTED
	}
}

func forString(str as string) static as double
{
	description [[
		Converts the string to a double-precision floating point number. If the string
		does not contain a valid representation of a floating point number, then the
		value "0.0" is returned.
	]]
	IFDEF "target_objc" {
		return lang "objc" (str) as double {{{ [str doubleValue] }}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		var v = 0.0
		lang "cs" (str) {{{
			try {
				v = System.Double.Parse(str);
			}
			catch {
				v = 0.0;
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v = 0.0
		lang "java" (str) {{{
			try {
				if(str != null) {
					v = java.lang.Double.parseDouble(str);
				}
			}
			catch(java.lang.Exception e) {
				v = 0.0;
			}
		}}}
		return v
	}
	ELSE IFDEF "target_js" {
		var v as double
		lang "js" (str) {{{
			v = parseFloat(str);
			if (isNaN(v)) {
				v =  0.0;
			}
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = 0.0
		lang "kotlin" (str) {{{
			try {
				v = str.toDouble()
			}
			catch (e: NumberFormatException) {
				v = 0.0
			}
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as double #mutated
		lang "swift" (str) {{{
			let d = Swift.Double(str)
			v = d != nil ? d! : 0.0
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" as double {{{ _util:to_number(str) }}}
	}
	ELSE {
		nop str
		ERROR NOT_IMPLEMENTED
	}
}
