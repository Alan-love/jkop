
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func add <T> (set as set<T>, value as T) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (set, value) {{{
			set.Add(value);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (set, value) {{{
			set.add(value);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (set, value) {{{
			[set addObject: value];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (set, value) {{{
			set.add(value);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (set, value) {{{
			set.add(value)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (set, value) {{{
			set.add(value)
		}}}
	}
	ELSE {
		nop set
		nop value
		ERROR NOT_IMPLEMENTED
	}
}

func remove <T> (set as set<T>, value as T) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (set, value) {{{
			set.Remove(value);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (set, value) {{{
			set.remove(value);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (set, value) {{{
			[set removeObject: value];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (set, value) {{{
			set.delete(value);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (set, value) {{{
			set.remove(value)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (set, value) {{{
			set.remove(value)
		}}}
	}
	ELSE {
		nop set
		nop value
		ERROR NOT_IMPLEMENTED
	}
}

func clear <T> (set as set<T>) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (set) {{{
			set.Clear();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (set) {{{
			set.clear();
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (set) {{{
			[set removeAllObjects];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (set) {{{
			set.clear();
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (set) {{{
			set.clear()
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (set) {{{
			set.clear()
		}}}
	}
	ELSE {
		nop set
		ERROR NOT_IMPLEMENTED
	}
}

func getSize <T> (set as set<T>) static as int
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (set) as int {{{ set.Count }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (set) as int {{{ set.size() }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (set) as int {{{ set.count }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (set) as int {{{ set.size }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (set) as int {{{ set.size }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (set) as int {{{ set.getSize() }}}
	}
	ELSE {
		nop set
		ERROR NOT_IMPLEMENTED
	}
}

func contains <T> (set as set<T>, value as T) static as bool
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (set, value) as bool {{{ set.Contains(value) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (set, value) as bool {{{ set.contains(value) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (set, value) as bool {{{ [set containsObject:value] }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (set, value) as bool {{{ set.has(value) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (set, value) as bool {{{ set.contains(value) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (set, value) as bool {{{ set.contains(value) }}}
	}
	ELSE {
		nop set
		nop value
		ERROR NOT_IMPLEMENTED
	}
}

func getValues <T> (set as set<T>) static as vector<T>
{
	IFDEF "target_dotnet_cs" {
		var v = new vector<T>
		lang "cs" (set) {{{
			foreach(T value in set)
			{
				v.Add(value);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v = new vector<T>
		lang "java" (set) {{{
			java.util.Iterator<T> iter = set.iterator();
			while(iter.hasNext()) {
				v.add(iter.next());
			}
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (set) as vector<T> {{{ [[set allObjects] mutableCopy] }}}
	}
	ELSE IFDEF "target_js" {
		var v = new vector<T>
		lang "js" (set) {{{
			set.forEach(function(value, key, oset) {
				this.push(value);
			}, v);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = new vector<T>
		lang "kotlin" (set) {{{
			kotlin.collections.Iterator<T> iter = set.iterator();
			while(iter.hasNext()) {
				v.add(iter.next());
			}
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (set) as vector<T> {{{ set.getValues() }}}
	}
	ELSE {
		nop set
		ERROR NOT_IMPLEMENTED
	}
}
