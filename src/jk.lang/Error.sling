
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject is StringObjectWithDebug:

macro throw(code):
	throw ExceptionWithError.forError(new this() {
		code code
		detail null
		stackTrace StackTrace.generate()
	})

macro throw(code, subject):
	throw ExceptionWithError.forError(new this() {
		code code
		subject subject
		stackTrace StackTrace.generate()
	})

macro throw(code, subject, detail):
	throw ExceptionWithError.forError(new this() {
		code code
		subject subject
		detail detail
		stackTrace StackTrace.generate()
	})

func forCode(code as string, subject as dynamic? = null, detail as dynamic? = null, stackTrace as string? = null) static as this:
	return new this() {
		code code
		subject subject
		detail detail
		stackTrace stackTrace
	}

func isError(o as object?) static as bool
{
	var e = assert o as this
	if String.isEmpty(e.code):
		return false
	return true
}

prop code as string
prop subject as dynamic?
prop detail as dynamic?
prop stackTrace as string?

func clear as this
{
	code = ""
	detail = null
	stackTrace = null
	return this
}

func dynamicToString(detail as dynamic?, debug as bool) as string?
{
	if not detail:
		return null
	var v as string?
	if detail is StringObjectWithDebug {
		v = (detail as! StringObjectWithDebug).toStringWithDebug(debug)
	}
	else {
		var vv = String.asValueOrNull(detail)
		if vv:
			v = vv
	}
	if String.isEmpty(v) && detail is object:
		v = String.forObjectInformation(detail as! object)
	return v
}

func toStringWithDefault(debug as bool, defaultError as string) as string
{
	var sb = new StringBuilder()
	if String.isNotEmpty(code) {
		sb.appendString(code)
	}
	else {
		sb.appendString(defaultError)
	}
	sb.appendCharacter(':')
	var subject = dynamicToString(this.subject, debug)
	if String.isNotEmpty(subject):
		sb.appendString(subject)
	sb.appendCharacter(':')
	var detail = dynamicToString(this.detail, debug)
	if String.isNotEmpty(detail):
		sb.appendString(detail)
	sb.appendCharacter(':')
	var stackTrace = this.stackTrace
	if String.isNotEmpty(stackTrace):
		sb.appendString(stackTrace)
	return sb.toString()
}

func toStringWithDebug(debug as bool) implement as string:
	return toStringWithDefault(debug, "unknownError")

func toString implement as string:
	return toStringWithDebug(false)
