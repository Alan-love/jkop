
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class StringIteratorWrapper is Iterator<dynamic>
{
	prop iterator as Iterator<char>

	func next implement throws Exception as dynamic
	{
		var c = iterator.next()
		IFDEF "target_objc" {
			return lang "objc" as dynamic {{{ [NSNumber numberWithUnsignedInt:c] }}}
		}
		ELSE {
			return c
		}
	}

	func hasNext implement as bool:
		return iterator.hasNext()
}

class BufferIteratorWrapper is Iterator<dynamic>
{
	prop buffer as buffer
	prop size as long

	var position = 0

	func next implement throws Exception as dynamic
	{
		var v = buffer[position]
		position++
		IFDEF "target_objc" {
			return lang "objc" as dynamic {{{ [NSNumber numberWithUnsignedInt:v] }}}
		}
		ELSE {
			return v
		}
	}

	func hasNext implement as bool
	{
		assert position < size - 1
		return true
	}
}

class ArrayIteratorWrapper is Iterator<dynamic>
{
	prop array as array<dynamic>
	prop size as long

	var position = 0

	func next implement throws Exception as dynamic
	{
		var v = array[position]
		position++
		return v
	}

	func hasNext implement as bool
	{
		assert position < size - 1
		return true
	}
}

class VectorIteratorWrapper is Iterator<dynamic>
{
	prop vector as vector<dynamic>
	prop size as long

	var position = 0

	func next implement throws Exception as dynamic
	{
		var v = vector[position]
		position++
		return v
	}

	func hasNext implement as bool
	{
		assert position < size - 1
		return true
	}
}

func iterate(value as dynamic) static as Iterator<dynamic>?
{
	if var valueString = value as string:
		return new StringIteratorWrapper() {
			iterator String.iterate(valueString)
		}
	if var valueBuffer = value as buffer:
		return new BufferIteratorWrapper() {
			buffer valueBuffer
			size sizeof valueBuffer
		}
	if var valueArray = value as array<dynamic>:
		return new ArrayIteratorWrapper() {
			array valueArray
			size sizeof valueArray
		}
	if var valueVector = value as vector<dynamic>:
		return new VectorIteratorWrapper() {
			vector valueVector
			size sizeof valueVector
		}
	if var valueMap = value as map<string,dynamic>:
		return iterate(Map.getValues(valueMap))
	return null
}

func iteratePropertyNames(object as dynamic) static as Iterator<string>:
	return Vector.iterate(getPropertyNames(object))

func getPropertyNames(object as dynamic) static as vector<string>
{
	IFDEF "target_js" {
		var v = new vector<string>
		lang "js" (object) {{{
			for(var name in object) {
				v.append(name);
			}
		}}}
		return v
	}
	ELSE {
		nop object
		ERROR NOT_IMPLEMENTED
	}
}

func getPropertyValue(object as dynamic, key as string) static as dynamic?
{
	IFDEF "target_js" {
		return lang "js" (object, key) as dynamic? {{{ object[key] }}}
	}
	ELSE {
		nop object
		nop key
		ERROR NOT_IMPLEMENTED
	}
}
