
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class <K extends [magical:Swift.Hashable],V>:

func forData(data as [magical:Swift.Dictionary<K,V>]) static as this:
	return new this(data)

var data public as [magical:Swift.Dictionary<K,V>]

indexer (index as K) as V
{
	set:
		setValue(index, value)
	get:
		return getValue(index)
}

ctor:
	data = lang "swift" as [magical:Swift.Dictionary<K,V>] {{{ Swift.Dictionary<K,V>() }}}

ctor(data as [magical:Swift.Dictionary<K,V>]):
	this.data = data

func getValue(index as K) as V:
	return lang "swift" (index) as V {{{ data[index]! }}}

func setValue(index as K, value as V):
	lang "swift" (index, value) {{{
		data[index] = value
	}}}

func removeByKey(key as K):
	lang "swift" (data, key) {{{
		data.removeValue(forKey: key)
	}}}

func getSize as int:
	return lang "swift" (data) as int {{{ data.count }}}

func containsKey(key as K) as bool
{
	lang "swift" (data, key) {{{
		if (data.index(forKey: key) == nil) {
			return false
		}
	}}}
	return true
}

func containsValue(value as V) as bool
{
	foreach vv in getValues() {
		if DynamicValue.equals(vv, value):
			return true
	}
	return false
}

func clear:
	lang "swift" (data) {{{
		data.removeAll()
	}}}

func duplicate as this:
	return forData(data)

func getKeys as vector<K>
{
	var v = new vector<K>
	lang "swift" (data) {{{
		for key in data.keys {
			v.append(key)
		}
	}}}
	return v
}

func getValues as vector<V>
{
	var v = new vector<V>
	lang "swift" (data) {{{
		for value in data.values {
			v.append(value)
		}
	}}}
	return v
}
