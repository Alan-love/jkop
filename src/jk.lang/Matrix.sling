
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class <T>:

var vector = new vector<T>
var columnCount as int

ctor(rowSize as int, columnSize as int, padWithValue as T):
	setSize(rowSize, columnSize, padWithValue)

func computeValidIndex(row as int, column as int) private as int
{
	if row < 0 || column < 0:
		Error.throw("invalidRowAndColumn", String.forInteger(row) .. "," .. String.forInteger(column))
	var index = (row * columnCount) + column
	if index >= Vector.getSize(vector):
		Error.throw("invalidRowAndColumn", String.forInteger(row) .. "," .. String.forInteger(column))
	return index
}

func set(row as int, column as int, val as T):
	vector[computeValidIndex(row, column)] = val

func get(row as int, column as int) as T:
	return vector[computeValidIndex(row, column)]

func setSize(rowSize as int, colSize as int, padWithValue as T) as this
{
	columnCount = colSize
	Vector.setSize(vector, rowSize * colSize, padWithValue)
	return this
}

func getRowCount as int:
	return (sizeof vector) as int / columnCount

func getColumnCount as int:
	return columnCount
