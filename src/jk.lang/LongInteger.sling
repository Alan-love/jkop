
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class MyLongIntegerObject is LongIntegerObject private
{
	prop value as long

	func toLongInteger as long:
		return value
}

func wrapValue(value as long) static as LongIntegerObject:
	return new MyLongIntegerObject() {
		value value
	}

func asValueOrDefaultValue(obj as dynamic?, defaultValue as long = 0L) static as long
{
	var v = asObject(obj)
	if not v:
		return defaultValue
	return v.toLongInteger()
}

func asValueOrThrowError(obj as dynamic?) static as long
{
	var v = asObject(obj)
	if not v:
		Error.throw("valueCannotBeConvertedToLongInteger", obj)
	return v.toLongInteger()
}

func asObject(obj as dynamic?) static as LongIntegerObject?
{
	if not obj:
		return null
	if obj is long:
		return wrapValue(obj as! long)
	if obj is LongIntegerObject {
		var oi = obj as! LongIntegerObject
		return wrapValue(oi.toLongInteger())
	}
	if obj is int {
		var v = obj as! int
		return wrapValue(v as! long)
	}
	if obj is IntegerObject {
		var oi = obj as! IntegerObject
		return wrapValue(oi.toInteger() as! long)
	}
	if obj is string {
		var ii = forStringOrNull(obj as! string)
		if ii == null:
			return null
		return wrapValue(ii)
	}
	if obj is StringObject {
		var ii = forStringOrNull((obj as! StringObject).toString())
		if ii == null:
			return null
		return wrapValue(ii)
	}
	if obj is double {
		var v = obj as! double
		var vv = v as! long
		return wrapValue(vv)
	}
	if obj is DoubleObject {
		var od = obj as! DoubleObject
		var vv = od.toDouble() as! long
		return wrapValue(vv)
	}
	if obj is bool {
		if obj as! bool == true:
			return wrapValue(1L)
		return wrapValue(0L)
	}
	if obj is BooleanObject {
		if (obj as! BooleanObject).toBoolean():
			return wrapValue(1L)
		return wrapValue(0L)
	}
	if obj is char {
		var v = obj as! char
		return wrapValue(v as! long)
	}
	if obj is CharacterObject {
		var oc = obj as! CharacterObject
		return wrapValue(oc.toCharacter() as! long)
	}
	return null
}

func forStringOrNull(str as string) static as long?
{
	description [[
		Converts the string to a long integer. If the string does not represent a valid
		integer, than a null value is returned. Eg. forStringOrNull("99") = 99 Eg.
		forStringOrNull("asdf") = null
	]]
	if String.isEmpty(str):
		return null
	var v = 0L
	var first = true
	var negative = false
	foreach c in String.iterate(str) {
		if first && c == '-' {
			negative = true
			first = false
			continue
		}
		if c >= '0' && c <= '9' {
			v = v * 10
			v += (c - '0') as! long
		}
		else {
			return null
		}
		first = false
	}
	if negative:
		v *= -1
	return v
}

func forStringOrDefaultValue(str as string, defaultValue as long = 0L) static as long
{
	description [[
		Converts the string to a long integer. If the string does not represent a valid
		integer, then the value "0" is returned. Eg. forStringOrDefaultValue("99", 10L)
		= 99L Eg. forStringOrDefaultValue("asdf", 10L) = 10L
	]]
	var v = forStringOrNull(str)
	if v == null:
		return defaultValue
	return v
}

func forStringOrThrowError(str as string) static as long
{
	description [[
		Converts the string to a long integer. If the string does not represent a valid
		integer, then an exception is thrown. Eg. forStringOrThrowError("99") = 99L Eg.
		forStringOrThrowError("asdf") throws exception
	]]
	var v = forStringOrNull(str)
	if v == null:
		Error.throw("stringCannotBeConvertedToLongInteger", str)
	return v
}

func forHexStringOrDefaultValue(str as string, defaultValue as long = 0L) static as long
{
	description [[
		Converts the string to an long integer, while treating the string as a
		hexadecimal representation of a number, eg. forHexStringOrDefaultValue("a") = 10
	]]
	if String.isEmpty(str):
		return defaultValue
	var v = 0L
	foreach c in String.iterate(str) {
		if c >= '0' && c <= '9' {
			v = v * 16
			v += (c - '0') as! long
		}
		else if c >= 'a' && c <= 'f' {
			v = v * 16
			v += (10 + c - 'a') as! long
		}
		else if c >= 'A' && c <= 'F' {
			v = v * 16
			v += (10 + c - 'A') as! long
		}
		else {
			return defaultValue
		}
	}
	return v
}
