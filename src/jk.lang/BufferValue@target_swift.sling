
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forSize(size as long) static as this:
	return new this(lang "swift" (size) as [magical:@[Foundation.Data]] {{{ Foundation.Data(repeating: 0, count: Int(size)) }}})

func forBytes(bytes as array<uint8>) static as this:
	return new this(lang "swift" (bytes) as [magical:@[Foundation.Data]] {{{ Foundation.Data(bytes.data) }}})

func forData(data as [magical:@[Foundation.Data]]) static as this:
	return new this(data)

var data public as [magical:@[Foundation.Data]]

indexer (index as int) as uint8
{
	set:
		setByte(index, value)
	get:
		return getByte(index)
}

ctor(data as [magical:@[Foundation.Data]]):
	this.data = data

func getSize as int:
	return lang "swift" (data) as int {{{ data.count }}}

func getByte(index as int) as uint8:
	return lang "swift" (data, index) as uint8 {{{ data[index] }}}

func setByte(index as int, value as uint8):
	lang "swift" (data, index, value) {{{
		data[index] = value
	}}}

func resize(newSize as int)
{
	var os = getSize()
	if newSize < os {
		lang "swift" (data, newSize, os) {{{
			data = Foundation.Data(data.dropLast(os - newSize))
		}}}
	}
	else if newSize > os {
		lang "swift" (data, newSize, os) {{{
			data.append(Foundation.Data(repeating: 0, count: newSize - os))
		}}}
	}
}

func free:
	lang "swift" (data) {{{
		data.removeAll()
	}}}
