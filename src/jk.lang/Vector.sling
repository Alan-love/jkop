
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forIterator <T> (iterator as Iterator<T>) static as vector<T>
{
	var v = new vector<T>
	while iterator.hasNext():
		v += try! iterator.next()
	return v
}

func forArray <T> (array as array<T>) static as vector<T>
{
	var v = new vector<T>
	for(var n = 0 ; n < sizeof array ; n++):
		v += array[n]
	return v
}

func toVectorOfObject <T> (collection as vector<T>) static as vector<object>
{
	var nvec = new vector<object>
	foreach item in collection {
		var o = item as object
		if o:
			nvec += o
	}
	return nvec
}

func dupObjectVector(vector as vector<object>) static as vector<object>
{
	var v = new vector<object>
	foreach o in vector:
		v += o
	return v
}

/*
 * // FIXME: Must have compiler support for expanding runtime generics for Java
 * func toArray<T> (vector as vector<T>) static as array<T>
 * {
 * return Array.forVector(vector)
 * }
 */

func isEmpty <T> (vector as vector<T>?) static as bool #nullcheck
{
	if vector == null:
		return true
	IFDEF "target_java" {
		return lang "java" as bool {{{ vector.isEmpty() }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" as bool {{{ vector!!.isEmpty() }}}
	}
	ELSE IFDEF "target_sushi" {
		var v = false
		lang "lua" {{{
			local sz = vector["n"]
			if sz == nil or sz < 1 then
				v = true
			end
		}}}
		return v
	}
	ELSE {
		return getSize(vector) < 1
	}
}

func isNotEmpty <T> (vector as vector<T>?) static as bool #notnullcheck:
	return not isEmpty(vector)

func setSize <T> (vector as vector<T>, newSize as int, padWithValue as T) static as vector<T>
{
	var sz = newSize
	if sz < 0:
		sz = 0
	var osz = getSize(vector)
	if sz == osz:
		return vector
	if sz < osz {
		for(var n = osz - 1 ; n >= sz ; n--):
			removeIndex(vector, n)
	}
	else {
		for(var n = osz ; n < sz ; n++):
			vector += padWithValue
	}
	return vector
}

func getSize <T> (vector as vector<T>) static as int
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (vector) as int {{{ vector.Count }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (vector) as int {{{ vector.size() }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (vector) as int {{{ [vector count] }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (vector) as int {{{ vector.length }}}
	}
	ELSE IFDEF "target_lua" {
		return lang "lua" (vector) as int {{{ vector["n"] or 0 }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (vector) as int {{{ vector.count() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (vector) as int {{{ vector.getSize() }}}
	}
	ELSE {
		nop vector
		ERROR NOT_IMPLEMENTED
	}
}

func containsValue <T> (vector as vector<T>, value as T) static as bool
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (vector, value) as bool {{{ vector.Contains(value) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (vector, value) as bool {{{ vector.contains(value) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (vector, value) as bool {{{ vector.includes(value) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (vector, value) as bool {{{ vector.contains(value) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (vector, value) as bool {{{ vector.contains(value) }}}
	}
	ELSE {
		foreach oo in vector {
			if value == oo:
				return true
		}
		return false
	}
}

func appendValue <T> (vector as vector<T>, value as T) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (vector, value) {{{
			vector.Add(value);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (vector, value) {{{
			vector.add(value);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (vector, value) {{{
			[vector addObject:value];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vector, value) {{{
			vector.push(value);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (vector, value) {{{
			vector!!.add(value)
		}}}
	}
	ELSE IFDEF "target_lua" {
		lang "lua" (vector, value) {{{
			local sz = vector["n"] or 0
			vector[sz + 1] = value
			vector["n"] = sz + 1
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (vector, value) {{{
			vector.append(value)
		}}}
	}
	ELSE {
		nop vector
		nop value
		ERROR NOT_IMPLEMENTED
	}
}

func prependValue <T> (vector as vector<T>, value as T) static:
	try insertValue(vector, value, 0)

func insertValue <T> (vector as vector<T>, value as T, index as int) static throws Exception
{
	if index < 0 || index > getSize(vector):
		Error.throw("vectorIndexOutOfBounds", String.forInteger(index))
	IFDEF "target_dotnet_cs" {
		lang "cs" (vector, index, value) {{{
			vector.Insert(index, value);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (vector, index, value) {{{
			vector.add(index, value);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (vector, index, value) {{{
			[vector insertObject:value atIndex:index];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vector, index, value) {{{
			vector.splice(index, 0, value);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (vector, index, value) {{{
			vector!!.add(index, value)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (vector, index, value) {{{
			vector.insert(index, value)
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" (vector, index, value) {{{
			local sz = vector["n"] or 0
			_vm:insert_to_indexed_table(vector, index + 1, value)
			vector["n"] = sz + 1
		}}}
	}
	ELSE {
		nop vector
		nop value
		nop index
		ERROR NOT_IMPLEMENTED
	}
}

func isValidIndex <T> (vector as vector<T>, index as int) static as bool
{
	if index < 0 || index >= getSize(vector):
		return false
	return true
}

func getValue <T> (vector as vector<T>, index as int) static as T?
{
	if index < 0 || index >= getSize(vector):
		return null
	IFDEF "target_dotnet_cs" {
		return lang "cs" as T {{{ vector[index] }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" as T {{{ vector.get(index) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" as T {{{ [vector objectAtIndex:index] }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" as T {{{ vector[index] }}}
	}
	ELSE IFDEF "target_lua" {
		return lang "lua" as T {{{ vector[index + 1] }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" as T {{{ vector!!.get(index) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" as T {{{ vector[index] }}}
	}
	ELSE {
		nop vector
		nop index
		ERROR NOT_IMPLEMENTED
	}
}

func getFirstValue <T> (vector as vector<T>) static as T?:
	return getValue(vector, 0)

func getLastValue <T> (vector as vector<T>) static as T?:
	return getValue(vector, getSize(vector) - 1)

func setValue <T> (vector as vector<T>, index as int, value as T) static throws Exception
{
	if index < 0 || index >= getSize(vector):
		Error.throw("vectorIndexOutOfBounds", String.forInteger(index))
	IFDEF "target_dotnet_cs" {
		lang "cs" (vector, index, value) {{{
			vector[index] = value;
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (vector, index, value) {{{
			vector.set(index, value);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (vector, index, value) {{{
			[vector replaceObjectAtIndex:index withObject:value];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vector, index, value) {{{
			vector.splice(index, 1, value);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		var vv = value
		lang "kotlin" (vector, index, vv) {{{
			vector!!.set(index, vv)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (vector, index, value) {{{
			vector[index] = value
		}}}
	}
	ELSE IFDEF "target_lua" {
		lang "lua" (vector, index, value) {{{
			vector[index + 1]  = value
		}}}
	}
	ELSE {
		nop vector
		nop index
		nop value
		ERROR NOT_IMPLEMENTED
	}
}

func removeIndex <T> (vector as vector<T>, index as int) static as bool
{
	var sz = getSize(vector)
	if index < 0 || index >= sz:
		return false
	IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			vector.RemoveAt(index);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			vector.remove(index)
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" {{{
			[vector removeObjectAtIndex:index];
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			vector.splice(index, 1);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			vector!!.remove(t)
		}}}
	}
	ELSE IFDEF "target_stdlua" {
		lang "lua" {{{
			table.remove(vector, index)
			vector["n"] = sz - 1
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" {{{
			_vm:remove_from_indexed_table(vector, index+1)
			vector["n"] = sz - 1
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			vector.removeIndex(index)
		}}}
	}
	ELSE {
		nop vector
		nop index
		ERROR NOT_IMPLEMENTED
	}
	return true
}

func removeFirstValue <T> (vector as vector<T>) static as bool:
	return removeIndex(vector, 0)

func popFirstValue <T> (vector as vector<T>) static as T?
{
	if isEmpty(vector):
		return null
	var v = getFirstValue(vector)
	removeFirstValue(vector)
	return v
}

func popLastValue <T> (vector as vector<T>) static as T?
{
	if isEmpty(vector):
		return null
	var v = getLastValue(vector)
	removeLastValue(vector)
	return v
}

func removeLastValue <T> (vector as vector<T>) static as bool:
	return removeIndex(vector, getSize(vector) - 1)

func removeValue <T> (vector as vector<T>, value as T) static as int
{
	var n as int
	for(n = 0 ; n < sizeof vector ; n++) {
		IFDEF "target_dotnet_cs" {
			lang "cs" (vector, value, n) {{{
				if(object.Equals(vector[n], value)) {
					remove(vector, n);
					return(n);
				}
			}}}
		}
		ELSE IFDEF "target_js" {
			lang "js" (vector, value, n) {{{
				if (!Object.is) {
					if(vector[n] === value) {
						this.remove(vector, n);
						return(n);
					}
				}
				else {
					if(Object.is(vector[n], value)) {
						this.remove(vector, n);
						return(n);
					}
				}
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" (vector, value) {{{
				vector.removeValue(value)
			}}}
		}
		ELSE {
			if vector[n] == value {
				removeIndex(vector, n)
				return n
			}
		}
	}
	return -1
}

func clear <T> (vector as vector<T>) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (vector) {{{
			vector.Clear();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (vector) {{{
			vector.clear();
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vector) {{{
			vector.splice(0, vector.length);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (vector) {{{
			[vector removeAllObjects];
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (vector) {{{
			vector!!.clear()
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (vector) {{{
			vector.removeAll()
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" (vector) {{{
			_vm:clear_table(vector) vector["n"] = 0
		}}}
	}
	ELSE {
		nop vector
		ERROR NOT_IMPLEMENTED
	}
}

func removeRange <T> (vector as vector<T>, index as int, count as int) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (vector, index, count) {{{
			vector.RemoveRange(index, count);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (vector, index, count) {{{
			vector.subList(index, index+count).clear();
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vector, index, count) {{{
			vector.splice(index, count);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		var range = index + count
		var i = index
		while i <= range {
			removeIndex(vector, i)
			i += 1
		}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (vector, index, count) {{{
			vector.removeRange(index, count)
		}}}
	}
	ELSE {
		for(var n = 0 ; n < count ; n++):
			removeIndex(vector, index)
	}
}

class VectorIterator<T> is Iterator<T>
{
	prop vector as vector<T>
	prop index = 0
	prop increment = 1

	func next implement throws Exception as T
	{
		if index < 0 || index >= sizeof vector:
			Error.throw("vectorIndexOutOfBounds", String.forInteger(index))
		var v = vector[index]
		index = index + increment
		return v
	}

	func hasNext implement as bool
	{
		if increment > 0:
			assert index < sizeof vector
		if increment < 0:
			assert index >= 0
		return true
	}
}

func iterate <T> (vector as vector<T>) static as Iterator<T>:
	return new VectorIterator<T>() {
		vector vector
		index 0
		increment 1
	}

func iterateReverse <T> (vector as vector<T>) static as Iterator<T>:
	return new VectorIterator<T>() {
		vector vector
		index sizeof vector - 1
		increment -1
	}

func sort <T> (vector as vector<T>, comparer as function<(T,T) as int>) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (vector, comparer) {{{
			vector.Sort((a,b) => { return(comparer(a,b)); });
		}}}
	}
	ELSE IFDEF "target_java" {
		var comp final = comparer
		IFDEF "target_java8" {
			lang "java" (vector, comp) {{{
				java.util.Collections.sort(vector, new java.util.Comparator<T>() {
					public int compare(T a, T b) {
						return comp.apply(a, b);
					}
				});
			}}}
		}
		ELSE {
			lang "java" (vector, comp) {{{
				java.util.Collections.sort(vector, new java.util.Comparator<T>() {
					public int compare(T a, T b) {
						return comp.execute(a, b);
					}
				});
			}}}
		}
	}
	ELSE IFDEF "target_js" {
		lang "js" (vector, comparer) {{{
			vector.sort(function(a, b) {
				return(comparer(a, b));
			});
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (vector, comparer) {{{
			vector!!.sortWith(kotlin.Comparator {
				a: T?, b: T? -> comparer!!.invoke(a, b)
			})
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (vector, comparer) {{{
			vector.sort(comparer)
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" (vector, comparer) {{{
			_vm:sort_table(vector, comparer)
		}}}
	}
	ELSE {
		nop vector
		nop comparer
		ERROR NOT_IMPLEMENTED
	}
}

func sortReverse <T> (vector as vector<T>, comparer as function<(T,T) as int>) static
{
	var cc = comparer
	sort(vector, func(a as T, b as T) as int => -cc(a, b))
}

func sortAsStrings <T> (vector as vector<T>) static:
	sort(vector, func(a as T, b as T) as int => String.compare(String.asValueOrNull(a), String.asValueOrNull(b)))

func sortAsStringsReverse <T> (vector as vector<T>) static:
	sortReverse(vector, func(a as T, b as T) as int => String.compare(String.asValueOrNull(a), String.asValueOrNull(b)))

func reverse <T> (vector as vector<T>) static
{
	var a = 0
	var b = getSize(vector) - 1
	while a < b {
		var t = vector[b]
		try setValue(vector, b, vector[a])
		try setValue(vector, a, t)
		a++
		b--
	}
}
