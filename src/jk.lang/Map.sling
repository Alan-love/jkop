
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class MyMapObject<K #hashable,V> is MapObject<K,V> private
{
	prop value as map<K,V>

	func toMap implement as map<K,V>:
		return value
}

func wrapValue <K #hashable,V> (value as map<K,V>) static as MapObject<K,V>:
	return new MyMapObject<K,V>() {
		value value
	}

func asValueOrNull(obj as dynamic?) static as map?
{
	if not obj:
		return null
	IFDEF "target_js" {
		var v as map?
		lang "js" {{{
			v = new Map();
			for(var k in obj) {
				if(obj.hasOwnProperty(k)) {
					v.set(k, obj[k]);
				}
			}
		}}}
		return v
	}
	ELSE {
		if obj is map:
			return obj as! map
		return null
	}
}

func asValueOrThrowError(obj as dynamic?) static throws Exception as map
{
	var v = asValueOrNull(obj)
	if not v:
		Error.throw("valueCannotBeConvertedToMap", obj)
	return v
}

func getValue <K,V> (map as map<K,V>, key as K) static as V?
{
	IFDEF "target_dotnet_cs" {
		assert containsKey(map, key)
		return lang "cs" (map, key) as V {{{ map[key] }}}
	}
	ELSE IFDEF "target_java" {
		assert containsKey(map, key)
		return lang "java" (map, key) as V {{{ map.get(key) }}}
	}
	ELSE IFDEF "target_js" {
		var rv = lang "js" (map, key) as V {{{ map.get(key) }}}
		if lang "js" (rv) as bool {{{ rv === undefined || rv === null }}}:
			return null
		return rv
	}
	ELSE IFDEF "target_kotlin" {
		assert containsKey(map, key)
		return lang "kotlin" (map, key) as V {{{ map.get(key) }}}
	}
	ELSE IFDEF "target_swift" {
		assert containsKey(map, key)
		return lang "swift" (map, key) as V {{{ map[key] }}}
	}
	ELSE {
		assert containsKey(map, key)
		return map[key]
	}
}

func set <K,V> (data as map<K,V>, key as K, val as V) static as bool
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (data, key, val) {{{
			data[key] = val;
		}}}
		return true
	}
	ELSE IFDEF "target_java" {
		lang "java" (data, key, val) {{{
			data.put(key, val);
		}}}
		return true
	}
	ELSE IFDEF "target_js" {
		lang "js" (data, key, val) {{{
			data.set(key, val);
		}}}
		return true
	}
	ELSE IFDEF "target_kotlin" {
		var v = val
		lang "kotlin" (data, key, val) {{{
			data.put(key, v)
		}}}
		return true
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (data, key, val) {{{
			data[key] = val
		}}}
		return true
	}
	ELSE {
		data[key] = val
		return true
	}
}

func setValue <K,V> (data as map<K,V>, key as K, val as V) static as bool:
	return set(data, key, val)

func remove <K,V> (data as map<K,V>, key as K) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (data, key) {{{
			data.Remove(key);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (data, key) {{{
			data.remove(key);
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (data, key) {{{
			data.delete(key);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (data, key) {{{
			[data removeObjectForKey:key];
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (data, key) {{{
			data.remove(key)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (data, key) {{{
			data.removeByKey(key)
		}}}
	}
	ELSE IFDEF "target_lua" {
		lang "lua" (data, key) {{{
			data[key] = nil
		}}}
	}
	ELSE {
		nop data
		nop key
		ERROR NOT_IMPLEMENTED
	}
}

func count <K,V> (data as map<K,V>) static as int
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (data) as int {{{ data.Count }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (data) as int {{{ data.size() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (data) as int {{{ data.size }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (data) as int {{{ [data count] }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (data) as int {{{ data.count() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (data) as int {{{ data.getSize() }}}
	}
	ELSE {
		return Vector.getSize(getKeys(data))
	}
}

func containsKey <K,V> (data as map<K,V>, key as K) static as bool
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (data, key) as bool {{{ data.ContainsKey(key) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (data, key) as bool {{{ data.containsKey(key) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (data, key) as bool {{{ data.has(key) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (data, key) as bool {{{ [data objectForKey:key] == nil ? NO : YES }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (data, key) as bool {{{ data.containsKey(key) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (data, key) as bool {{{ data.containsKey(key ) }}}
	}
	ELSE {
		foreach kk in getKeys(data) {
			if key == kk:
				return true
		}
		return false
	}
}

func containsValue <K,V> (data as map<K,V>, val as V) static as bool
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (data, val) as bool {{{ data.ContainsValue(val) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (data, val) as bool {{{ data.containsValue(val) }}}
	}
	ELSE IFDEF "target_js" {
		var vals = getValues(data)
		return lang "js" (vals, val) as bool {{{ vals.includes(val) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = false
		lang "objc" (data, val) {{{
			NSArray* a = [data allKeysForObject:val];
			v = (a != nil && [a count] > 0);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = val
		return lang "kotlin" (data, v) as bool {{{ data.containsValue(v) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (data, val) as bool {{{ data.containsValue(val) }}}
	}
	ELSE {
		foreach vv in getValues(data) {
			if val == vv:
				return true
		}
		return false
	}
}

func clear <K,V> (data as map<K,V>) static
{
	IFDEF "target_dotnet_cs" {
		lang "cs" (data) {{{
			data.Clear();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (data) {{{
			data.clear();
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" (data) {{{
			data.clear();
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" (data) {{{
			[data removeAllObjects];
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (data) {{{
			data.clear()
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (data) {{{
			data.clear()
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" (data) {{{
			_vm:clear_table(data)
		}}}
	}
	ELSE {
		nop data
		ERROR NOT_IMPLEMENTED
	}
}

func dup <K,V> (data as map<K,V>) static as map<K,V>
{
	IFDEF "target_dotnet_cs" {
		return lang "cs" (data) as map<K,V> {{{ new System.Collections.Generic.Dictionary<K, V>(data) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (data) as [magical:java.lang.Object] {{{ data.clone() }}} as! map<K,V>
	}
	ELSE IFDEF "target_js" {
		return lang "js" (data) as map<K,V> {{{ new Map(data) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (data) as map<K,V> {{{ kotlin.collections.HashMap(data) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (data) as map<K,V> {{{ data.duplicate() }}}
	}
	ELSE {
		nop data
		ERROR NOT_IMPLEMENTED
	}
}

func getKeys <K,V> (data as map<K,V>) static as vector<K>
{
	IFDEF "target_dotnet_cs" {
		var v = new vector<K>
		lang "cs" (data) {{{
			foreach(K key in data.Keys) {
				v.Add(key);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v = new vector<K>
		lang "java" (data) {{{
			for(K key : data.keySet()) {
				v.add(key);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (data) as vector<K> {{{ [[data allKeys] mutableCopy] }}}
	}
	ELSE IFDEF "target_js" {
		var v = new vector<K>
		lang "js" (data) {{{
			data.forEach(function(value, key) {
				this.push(key);
			}, v);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = new vector<K>
		lang "kotlin" (data) {{{
			for((k, vv) in data) {
				v!!.add(k)
			}
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (data) as vector<K> {{{ _vm:get_table_keys(data) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (data) as vector<K> {{{ data.getKeys() }}}
	}
	ELSE {
		nop data
		ERROR NOT_IMPLEMENTED
	}
}

func getValues <K,V> (data as map<K,V>) static as vector<V>
{
	IFDEF "target_dotnet_cs" {
		var v = new vector<V>
		lang "cs" (data) {{{
			foreach(V value in data.Values) {
				v.Add(value);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v = new vector<V>
		lang "java" (data) {{{
			for(V value : data.values()) {
				v.add(value);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (data) as vector<V> {{{ [[data allValues] mutableCopy] }}}
	}
	ELSE IFDEF "target_js" {
		var v = new vector<V>
		lang "js" (data) {{{
			data.forEach(function(value, keys) {
				this.push(value);
			}, v);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = new vector<V>
		lang "kotlin" (data) {{{
			for((k, vv) in data) {
				v!!.add(vv)
			}
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		var v as vector<K>?
		lang "lua" (data) {{{
			v = _vm:get_table_values(data)
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (data) as vector<V> {{{ data.getValues() }}}
	}
	ELSE {
		nop data
		ERROR NOT_IMPLEMENTED
	}
}

IFDEF "target_dotnet_cs"
{
	class MyKeyIterator<K> is Iterator<K>
	{
		lang "cs" {{{
			public System.Collections.Generic.IEnumerator<K> enumerator;
		}}}

		var current as K?

		func doNext as K?
		{
			var v as K? = null
			lang "cs" {{{
				if(enumerator != null) {
					if(enumerator.MoveNext() == false) {
						enumerator = null;
					}
					else {
						v = enumerator.Current;
					}
				}
			}}}
			return v
		}

		func next implement as K
		{
			if current {
				var vv = current
				current = null
				return vv
			}
			var v = doNext()
			if v == null:
				Error.throw("noMoreValues", this)
			return v
		}

		func hasNext implement as bool
		{
			if current:
				return true
			var v = doNext()
			if v != null {
				current = v
				return true
			}
			return false
		}
	}
}

func iterateKeys <K,V> (data as map<K,V>) static as Iterator<K>
{
	IFDEF "target_dotnet_cs" {
		var v = new MyKeyIterator<K>()
		lang "cs" (data) {{{
			var keys = data.Keys;
			if(keys != null) {
				v.enumerator = keys.GetEnumerator();
			}
		}}}
		return v
	}
	ELSE {
		return Vector.iterate(getKeys(data))
	}
}

func iterateValues <K,V> (data as map<K,V>) static as Iterator<V>:
	return Vector.iterate(getValues(data))
