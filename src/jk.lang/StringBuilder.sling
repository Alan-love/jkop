
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject:

func forString(initial as string) static as this
{
	var v = new this()
	v.appendString(initial)
	return v
}

func dup(initial as this) static as this
{
	var v = new this()
	v.appendString(initial.toString())
	return v
}

IFDEF "target_objc"
{
	var data as [magical:@[NSMutableString*]]?
}
ELSE IFDEF "target_dotnet_cs"
{
	var builder as [magical:System.Text.StringBuilder]?
}
ELSE IFDEF "target_java"
{
	var builder as [magical:java.lang.StringBuilder]?
}
ELSE IFDEF "target_js"
{
	var builder as [magical:String]?
}
ELSE IFDEF "target_stdlua"
{
	var builder as string?
}
ELSE IFDEF "target_kotlin"
{
	var builder as [magical:kotlin.text.StringBuilder]?
}
ELSE IFDEF "target_swift"
{
	var builder as [magical:NSMutableString]?
}
ELSE {
	var buffer as buffer?
	var position = 0

	func resizeTo(size as long)
	{
		var osz = 0
		if buffer:
			osz = sizeof buffer
		if osz < size {
			while osz < size:
				osz += 1024
			buffer = Buffer.resize(buffer, osz)
		}
	}
}

ctor:
	initialize()

func initialize
{
	IFDEF "target_objc" {
		lang "objc" {{{
			data = [[NSMutableString alloc] init];
		}}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			builder = new System.Text.StringBuilder();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder = new java.lang.StringBuilder();
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			this.builder = new String();
		}}}
	}
	ELSE IFDEF "target_stdlua" {
		this.builder = ""
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder = kotlin.text.StringBuilder()
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder = ""
		}}}
	}
	ELSE {
		buffer = Buffer.allocate(1024)
	}
}

func clear
{
	IFDEF "target_objc" {
		initialize()
	}
	ELSE IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			builder.Clear();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.setLength(0);
		}}}
	}
	ELSE IFDEF "target_js" {
		initialize()
	}
	ELSE IFDEF "target_stdlua" {
		this.builder = ""
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder!!.clear()
		}}}
	}
	ELSE IFDEF "target_swift" {
		builder = ""
	}
	ELSE {
		buffer = Buffer.allocate(1024)
		position = 0
	}
}

func count as int
{
	IFDEF "target_objc" {
		return lang "objc" as int {{{ [data length] }}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		return lang "cs" as int {{{ builder.Length }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" as int {{{ builder.length() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" as int {{{ this.builder.length }}}
	}
	ELSE IFDEF "target_stdlua" {
		return lang "lua" as int {{{ string.len(self.builder) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" as int {{{ builder!!.length }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" as int {{{ (builder! as NSString).length }}}
	}
	ELSE {
		return position
	}
}

func appendLong(c as long) as this:
	return appendString(String.forLongInteger(c))

func appendInteger(c as int) as this:
	return appendString(String.forInteger(c))

func appendDouble(c as double) as this:
	return appendString(String.forDouble(c))

func appendFloat(c as float) as this:
	return appendString(String.forFloat(c))

func appendCharacter(c as char) as this
{
	if c == 0 || c == -1:
		return this
	IFDEF "target_objc" {
		return appendString(String.forCharacter(c))
	}
	ELSE IFDEF "target_dotnet_cs" {
		return appendString(String.forCharacter(c))
	}
	ELSE IFDEF "target_java" {
		return appendString(String.forCharacter(c))
	}
	ELSE IFDEF "target_js" {
		return appendString(String.forCharacter(c))
	}
	ELSE IFDEF "target_stdlua" {
		return appendString(String.forCharacter(c))
	}
	ELSE IFDEF "target_kotlin" {
		return appendString(String.forCharacter(c))
	}
	ELSE IFDEF "target_swift" {
		return appendString(String.forCharacter(c))
	}
	ELSE {
		if c <= 0x7F {
			resizeTo(position + 1)
			if buffer:
				buffer[position] = c as! uint8
			position++
		}
		else {
			appendString(String.forCharacter(c))
		}
		return this
	}
}

func appendString(str as string) as this
{
	IFDEF "target_objc" {
		lang "objc" {{{
			[data appendString:str];
		}}}
		return this
	}
	ELSE IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			builder.Append(str);
		}}}
		return this
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.append(str);
		}}}
		return this
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			this.builder += str;
		}}}
		return this
	}
	ELSE IFDEF "target_stdlua" {
		builder = builder .. str
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder!!.append(str)
		}}}
		return this
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder.append(str!)
		}}}
		return this
	}
	ELSE {
		var nbuf = String.toUTF8Buffer(str)
		var nsz = sizeof nbuf
		resizeTo(position + nsz)
		if buffer:
			Buffer.copyFrom(buffer, nbuf, 0, position, nsz)
		position += nsz
		return this
	}
}

func insertInteger(index as int, c as int) as this:
	return insertString(index, String.forInteger(c))

func insertCharacter(index as int, c as char) as this
{
	if c == 0:
		return this
	return insertString(index, String.forCharacter(c))
}

func insertDouble(index as int, c as double) as this:
	return insertString(index, String.forDouble(c))

func insertFloat(index as int, c as float) as this:
	return insertString(index, String.forFloat(c))

func insertString(index as int, str as string) as this
{
	IFDEF "target_objc" {
		lang "objc" {{{
			[data insertString:str atIndex:index];
		}}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			builder.Insert(index, str);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.insert(index, str);
		}}}
	}
	ELSE IFDEF "target_js" {
		var fp as dynamic?
		var lp as dynamic?
		lang "js" {{{
			fp = this.builder.substring(0, index);
			lp = this.builder.substring(index, this.builder.length);
			this.builder = fp + str + lp;
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder!!.insert(index, str)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder.insert(str!, at: index)
		}}}
	}
	ELSE {
		var nbuf = String.toUTF8Buffer(str)
		var nsz = sizeof nbuf
		resizeTo(position + nsz)
		if buffer {
			Buffer.copyFrom(buffer, buffer, index, index + nsz, position - index)
			Buffer.copyFrom(buffer, nbuf, 0, index, nsz)
		}
		position += nsz
	}
	return this
}

func remove(index as int, targetLength as int) as this
{
	if targetLength < 1:
		return this
	IFDEF "target_dotnet_cs" {
		lang "cs" {{{
			if(index >= 0 && index < builder.Length) {
				builder.Remove(index, targetLength);
			}
		}}}
	}
	ELSE IFDEF "target_js" {
		var fp as dynamic?
		var lp as dynamic?
		lang "js" {{{
			fp = this.builder.substring(0, index);
			lp = this.builder.substring(index+targetLength, this.builder.length);
			this.builder = fp + lp;
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.delete(index, index+targetLength);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" {{{
			[data deleteCharactersInRange:NSMakeRange(index,targetLength)];
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		var ss as string?
		lang "kotlin" {{{
			var cs = builder!!.removeRange(index, index+targetLength)
			ss = cs.toString()
		}}}
		if not ss:
			ss = ""
		clear()
		appendString(ss)
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder.deleteCharacters(in: NSMakeRange(index, targetLength))
		}}}
	}
	ELSE {
		if index < position {
			var ll = targetLength
			var limit = position - index
			if ll > limit:
				ll = limit
			if buffer:
				Buffer.copyFrom(buffer, buffer, index + ll, index, position - index - ll)
			position -= ll
		}
	}
	return this
}

func removeLastCharacter as this
{
	var c = count()
	if c > 0:
		remove(c - 1, 1)
	return this
}

func toString as string
{
	IFDEF "target_objc" {
		var v = lang "objc" as string? {{{ [NSString stringWithString:data] }}}
		if not v:
			v = ""
		return v
	}
	ELSE IFDEF "target_dotnet_cs" {
		var v = lang "cs" as string? {{{ builder.ToString() }}}
		if not v:
			v = ""
		return v
	}
	ELSE IFDEF "target_java" {
		var v = lang "java" as string? {{{ builder.toString() }}}
		if not v:
			v = ""
		return v
	}
	ELSE IFDEF "target_js" {
		var v = lang "js" as string? {{{ this.builder.toString() }}}
		if not v:
			v = ""
		return v
	}
	ELSE IFDEF "target_stdlua" {
		var v = builder
		if not v:
			v = ""
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = lang "kotlin" as string? {{{ builder!!.toString() }}}
		if not v:
			v = ""
		return v
	}
	ELSE IFDEF "target_swift" {
		var v = lang "swift" as string? {{{ builder as Swift.String? }}}
		if not v:
			v = ""
		return v
	}
	ELSE {
		var bb = buffer
		if not bb || position < 1:
			return ""
		if position < sizeof bb:
			bb = Buffer.getSubBuffer(bb, 0, position)
		return String.forUTF8Buffer(bb)
	}
}
