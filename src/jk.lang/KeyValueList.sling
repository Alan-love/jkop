
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class <K,V> is Iterateable<KeyValuePair<K,V>>:

var values = new vector<KeyValuePair<K,V>>

func add(key as K, val as V):
	values += new KeyValuePair<K,V>() {
		key key
		value val
	}

func addPair(pair as KeyValuePair<K,V>):
	values += pair

func prepend(key as K, val as V):
	Vector.prependValue(values, new KeyValuePair<K,V>() {
		key key
		value val
	})

func prependPair(pair as KeyValuePair<K,V>):
	Vector.prependValue(values, pair)

func iterate as Iterator<KeyValuePair<K,V>>:
	return Vector.iterate(values)

func asVector as vector<KeyValuePair<K,V>>:
	return values

func dup as this
{
	var v = new this()
	foreach kvp in iterate():
		v.add(kvp.key, kvp.value)
	return v
}

func pair(index as int) as KeyValuePair<K,V>?:
	return Vector.getValue(values, index)

func getKey(index as int) as K?
{
	var kvp = assert Vector.getValue(values, index)
	return kvp.key
}

func getValue(index as int) as V?
{
	var kvp = assert Vector.getValue(values, index)
	return kvp.value
}

func count as int:
	return Vector.getSize(values)

func remove(index as int):
	Vector.removeIndex(values, index)

func clear:
	values = new vector<KeyValuePair<K,V>>
