
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.app

class abstract:

func forApplicationContext(context as ApplicationContext) static as this
{
	IFDEF "target_android" {
		var ctx = assert context as AndroidApplicationContext
		return GeoLocationManagerForAndroid.getInstance(ctx)
	}
	ELSE IFDEF "target_browser_js" {
		nop context
		return GeoLocationManagerForBrowserJS.getInstance()
	}
	ELSE IFDEF "target_ios_objc" {
		nop context
		return GeoLocationManagerForIOS.getInstance()
	}
	ELSE IFDEF "target_ios_swift" {
		nop context
		return GeoLocationManagerForSwift.getInstance()
	}
	ELSE IFDEF "target_headless" {
		nop context
		ERROR NOT_SUPPORTED
	}
	ELSE {
		nop context
		ERROR NOT_IMPLEMENTED
	}
}

var listeners = new vector<function<(GeoLocation)>>

func addListener(l as function<(GeoLocation)>):
	listeners += l

func removeListener(l as function<(GeoLocation)>):
	Vector.removeValue(listeners, l)

func removeAllListeners:
	Vector.clear(listeners)

func notifyListeners(location as GeoLocation)
{
	foreach listener in listeners:
		listener(location)
}

func isLocationServiceEnabled abstract as bool
func startLocationUpdates(callback as function<(bool)>) abstract
func stopLocationUpdates abstract
func getLastLocation(callback as function<(GeoLocation?,Error?)>) abstract
