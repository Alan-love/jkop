
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io
import jk.text
import jk.process

class:

description [[
	Common utility functions for command line applications.
]]

func printHeader(writer as PrintWriter, title as string, version as string, copyright as string? = null, license as string? = null, platform as string? = null, component as string? = null) static
{
	var sb = new StringBuilder()
	if String.isEmpty(title) {
		sb.appendString("Untitled Application")
	}
	else {
		sb.appendString(title)
	}
	if String.isNotEmpty(component) {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString(component)
	}
	if String.isNotEmpty(version) {
		sb.appendString(" / ")
		sb.appendString(version)
	}
	if String.isNotEmpty(platform) {
		sb.appendString(" @ ")
		sb.appendString(platform)
	}
	if sb.count() > 0:
		sb.appendCharacter('\n')
	if String.isNotEmpty(copyright) {
		sb.appendString(copyright)
		sb.appendCharacter('\n')
	}
	if String.isNotEmpty(license) {
		sb.appendString(license)
		sb.appendCharacter('\n')
	}
	if sb.count() > 0:
		sb.appendCharacter('\n')
	if sb.count() > 0:
		try writer.print(sb.toString())
}

func printVersion(writer as PrintWriter, version as string, title as string) static
{
	if String.isNotEmpty(title) {
		try writer.println(title .. "/" .. version)
	}
	else {
		try writer.println(version)
	}
}

func parseCommandLineArguments(args as vector<string>) static as vector<CommandLineArgument>
{
	var v = new vector<CommandLineArgument>
	foreach arg in args {
		if String.startsWith(arg, "-") {
			if String.getIndexOfCharacter(arg, '=') > 0 {
				var comps = String.split(arg, '=', 2)
				var key = String.getEndOfString(comps[0], 1)
				var val = comps[1]
				v += new CommandLineArgument() {
					arg arg
					key key
					value val
				}
			}
			else {
				v += new CommandLineArgument() {
					arg arg
					flag String.getEndOfString(arg, 1)
					value "true"
				}
			}
		}
		else {
			v += new CommandLineArgument() {
				arg arg
				parameter arg
				value arg
			}
		}
	}
	return v
}

func getLongestString(strings as vector<vector<string>>, add as int, ov as int) private static as int
{
	var v = ov
	foreach value in strings {
		var ss = String.getLength(String.asValueOrEmptyString(value[0])) + add
		if ss > v:
			v = ss
	}
	return v
}

func printUsage(stdout as PrintWriter, name as string?, parameters as vector<vector<string>>, flags as vector<vector<string>>, options as vector<vector<string>>) static
{
	var nn = name
	if not nn:
		nn = CurrentProcess.getProcessNameOrNull()
	if not nn:
		nn = "process"
	var ll = 0
	ll = getLongestString(parameters, 0, ll)
	ll = getLongestString(flags, 1, ll)
	ll = getLongestString(options, 9, ll)
	try stdout.print("Usage: " .. nn .. " [parameters, flags and options]\n")
	if Vector.isEmpty(parameters) == false {
		try stdout.print("\n")
		try stdout.print("Supported Parameters:\n")
		try stdout.print("\n")
		foreach parameter in parameters:
			try stdout.print("  " .. StringUtil.padToLength(parameter[0], ll) .. " - " .. parameter[1] .. "\n")
	}
	if Vector.isEmpty(flags) == false {
		try stdout.print("\n")
		try stdout.print("Supported Flags:\n")
		try stdout.print("\n")
		foreach flag in flags:
			try stdout.print("  -" .. StringUtil.padToLength(flag[0], ll) .. " - " .. flag[1] .. "\n")
	}
	if Vector.isEmpty(options) == false {
		try stdout.print("\n")
		try stdout.print("Supported Options:\n")
		try stdout.print("\n")
		foreach option in options:
			try stdout.print("  -" .. StringUtil.padToLength(option[0] .. "=<value>", ll) .. " - " .. option[1] .. "\n")
	}
	try stdout.print("\n")
}
