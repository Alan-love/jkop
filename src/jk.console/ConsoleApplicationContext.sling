
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io
import jk.fs
import jk.app
import jk.log
import jk.env
import jk.process

class is ApplicationContext:

meta
{
	description [[
		An implementation of ApplicationContext that represents a command line
		application intended to be used on a text mode terminal.
	]]
}

func forApplicationName(name as string) static as this
{
	var v = new this()
	v.setApplicationName(name)
	return v
}

pvar applicationName as string?
pvar enableColor = true
pvar dumbMode = false
pvar showInfo = true
pvar showWarning = true
pvar showError = true
pvar showDebug = false
pvar enableStatus = true
pvar enableOutput = true
pvar autoClearStatus = true
pvar currentPrefix as string?
var lastStatus = false
var lastStatusLength = 0
var errorCounter = 0
var warningCounter = 0
var infoCounter = 0
var debugCounter = 0

var stdout as PrintWriter?

ctor
{
	stdout = Stdout.getIfAvailable()
	var term = EnvironmentVariable.get("TERM")
	if term == null || term == "cygwin":
		enableColor = false
	var logColor = EnvironmentVariable.get("CONSOLE_LOG_COLOR")
	if logColor:
		enableColor = Boolean.asValueOrThrowError(logColor)
	var logDebug = EnvironmentVariable.get("CONSOLE_LOG_DEBUG")
	if not logDebug:
		logDebug = EnvironmentVariable.get("CONSOLE_DEBUG")
	if not logDebug:
		logDebug = EnvironmentVariable.get("EQELA_DEBUG")
	if logDebug:
		setEnableDebugMessages(Boolean.asValueOrThrowError(logDebug))
}

IFDEF "target_android" {
	func getAndroidActivityContext as native<android.content.Context>:
		return null
}

func isInDebugMode override as bool:
	return showDebug

func setEnableDebugMessages(v as bool) as this
{
	showDebug = v
	return this
}

func useApplicationNameAsPrefix
{
	currentPrefix = applicationName
	if String.isEmpty(currentPrefix):
		currentPrefix = CurrentProcess.getProcessName()
}

func resetCounters override
{
	errorCounter = 0
	warningCounter = 0
	infoCounter = 0
	debugCounter = 0
}

func getErrorCount override as int:
	return errorCounter

func getWarningCount override as int:
	return warningCounter

func getInfoCount override as int:
	return infoCounter

func getDebugCount override as int:
	return debugCounter

func logError(message as string) override
{
	if showError && enableOutput:
		doPrintLine("ERROR", 91, currentPrefix, message)
	errorCounter ++
}

func logWarning(message as string) override
{
	if showWarning && enableOutput:
		doPrintLine("WARNING", 95, currentPrefix, message)
	warningCounter ++
}

func logInfo(message as string) override
{
	if showInfo && enableOutput:
		doPrintLine("INFO", -1, currentPrefix, message)
	infoCounter ++
}

func logDebug(message as string) override
{
	if showDebug && enableOutput:
		doPrintLine("DEBUG", 96, currentPrefix, message)
	debugCounter ++
}

func logStatus(message as string?) override
{
	if enableOutput && enableStatus {
		if currentPrefix && message {
			doPrintStatus("[" .. currentPrefix .. "] " .. message)
		}
		else {
			doPrintStatus(message)
		}
	}
}

func getApplicationDataDirectory override as File?:
	return getApplicationDataDirectoryForAppId(applicationName)

func getApplicationDataDirectoryForAppId(appId as string? = null) as File?
{
	var applicationName = appId
	if String.isEmpty(applicationName):
		applicationName = CurrentProcess.getProcessName()
	if String.isEmpty(applicationName):
		return null
	var v as File?
	var hd = CommonPath.getHomeDirectory()
	if hd:
		v = File.forRelativePath("." .. applicationName, hd)
	return v
}

func doPrintLine(type as string? #preserve, color as int #preserve, prefix as string? #preserve, message as string? #preserve) private
{
	if autoClearStatus:
		doPrintStatus(null)
	var sb = new StringBuilder()
	if lastStatus:
		sb.appendCharacter('\n')
	if type || prefix {
		sb.appendCharacter('[')
		if dumbMode == false && enableColor && color >= 0 {
			sb.appendCharacter(0x1b as char)
			sb.appendCharacter('[')
			sb.appendInteger(color)
			sb.appendCharacter('m')
		}
		if type {
			sb.appendString(type)
			if prefix:
				sb.appendCharacter(':')
		}
		if prefix:
			sb.appendString(prefix)
		if dumbMode == false && enableColor && color >= 0 {
			sb.appendCharacter(0x1b as char)
			sb.appendString("[39m")
		}
		sb.appendCharacter(']')
		sb.appendCharacter(' ')
	}
	if message:
		sb.appendString(message)
	sb.appendCharacter('\n')
	if stdout:
		stdout.print(sb.toString())
	lastStatus = false
}

func doPrintStatus(m as string? #preserve) private
{
	if showDebug && m {
		doPrintLine(null, -1, null, m)
		return
	}
	if dumbMode {
		if m == null:
			return
		if stdout:
			stdout.print(m .. "\n")
		return
	}
	if lastStatusLength < 1 && m == null {
		return
	}
	var sb #preserve = new StringBuilder()
	sb.appendCharacter('\r')
	for(var n = 0 ; n<lastStatusLength ; n++):
		sb.appendCharacter(' ')
	sb.appendCharacter('\r')
	var rm = m
	if rm {
		var width = 0
		if width > 0 && String.getLength(rm) >= width:
			rm = String.getSubString(rm, 0, width - 4) .. " .."
		sb.appendString(rm)
	}
	if stdout:
		stdout.print(sb.toString())
	if m && rm {
		lastStatusLength = String.getLength(rm)
	}
	else {
		lastStatusLength = 0
	}
	if rm == null {
		lastStatus = false
	}
	else {
		lastStatus = true
	}
}
