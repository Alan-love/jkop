
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class:

description [[
	Represents a single comment line argument and provides convenience methods for
	accessing its value.
]]

prop arg as string
prop parameter as string?
prop flag as string?
prop key as string?
prop value as string?

func isParameter as bool
{
	if parameter:
		return true
	return false
}

func isAnyFlag as bool
{
	if flag:
		return true
	return false
}

func isAnyOption as bool
{
	if key:
		return true
	return false
}

func isFlag(text as string?) as bool
{
	if text && String.equalsIgnoreCase(text, flag):
		return true
	return false
}

func getFlagOrNull as string?:
	return flag

func getFlagOrThrowError throws Exception as string
{
	var v = getFlagOrNull()
	if not v:
		Error.throw("flagValueMissing", this)
	return v
}

func isOption(text as string?) as bool
{
	if text && String.equalsIgnoreCase(text, key):
		return true
	return false
}

func hasValue as bool
{
	if value:
		return true
	return false
}

func getComplete as string:
	return arg

func getKeyOrNull as string?:
	return key

func getKeyOrThrowError throws Exception as string
{
	var v = getKeyOrNull()
	if not v:
		Error.throw("keyValueMissing", this)
	return v
}

func getStringValueOrNull as string?:
	return value

func getStringValueOrThrowError throws Exception as string
{
	var v = getStringValueOrNull()
	if not v:
		Error.throw("valueMissing", this)
	return v
}

func getIntegerValue throws Exception as int:
	return Integer.asValueOrThrowError(value)

func getBooleanValue throws Exception as bool:
	return Boolean.asValueOrThrowError(value)

func getParameterOrThrowError throws Exception as string
{
	var v = parameter
	if not v:
		Error.throw("parameterValueMissing", this)
	return v
}

func reportAsUnsupported(ctx as LoggingContext):
	Log.error(ctx, "Unsupported command line parameter: `" .. arg .. "'")
