
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class abstract:

description [[
	Represents the text mode terminal and provides functionality for raw input and
	customized drawing features.
]]

IFDEF "target_dotnet_cs"
{
	class TerminalForDotnetCS is parent static
	{
		func clear override:
			lang "cs" {{{
				System.Console.Clear();
			}}}

		func moveTo(x as int, y as int) override
		{
			lang "cs" {{{
				System.Console.CursorLeft = x;
				System.Console.CursorTop = y;
			}}}
		}

		func print(text as string) override:
			lang "cs" {{{
				System.Console.Write(text);
			}}}

		func printTo(x as int, y as int, text as string) override
		{
			lang "cs" {{{
				System.Console.CursorLeft = x;
				System.Console.CursorTop = y;
				System.Console.Write(text);
			}}}
		}

		func readKey override as int
		{
			var v as int
			lang "cs" {{{
				v = (int)System.Console.ReadKey(true).KeyChar;
			}}}
			return v
		}

		func readLine override as string:
			return lang "cs" as string {{{ System.Console.ReadLine() }}}

		func readLineWithoutEcho override as string
		{
			var sb = new StringBuilder()
			loop {
				lang "cs" {{{
					var key = System.Console.ReadKey(true);
					if(key.Key == System.ConsoleKey.Enter) {
						break;
					}
					if(key.Key == System.ConsoleKey.Backspace) {
						sb.removeLastCharacter();
						continue;
					}
					sb.appendCharacter(key.KeyChar);
				}}}
			}
			return sb.toString()
		}
	}
}

func getIfAvailable static as this?
{
	IFDEF "target_dotnet_cs" {
		return new TerminalForDotnetCS()
	}
	ELSE IFDEF "target_kotlin" {
		return new TerminalForKotlin()
	}
	ELSE IFDEF "target_swift" {
		return new TerminalForSwift()
	}
	ELSE IFDEF "target_node_js" {
		return new TerminalForNodeJS()
	}
	ELSE {
		return null
	}
}

func clear abstract
func moveTo(x as int, y as int) abstract
func print(text as string) abstract
func printTo(x as int, y as int, text as string) abstract
func readKey abstract as int
func readLine abstract as string
func readLineWithoutEcho abstract as string
