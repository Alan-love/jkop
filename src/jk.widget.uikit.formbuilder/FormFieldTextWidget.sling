
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.uikit.core
import jk.widget.uikit.boxicons

class is WidgetWithValue #widget:

ui FormFieldWidget
{
	VerticalBoxWidget {
		AlignWidget alignTop {
			LabelWidget topLabel : 0.5, 0.5 {
				fontSize = context.getStylePixels("jkop-kit", "regularFont")
				textColor = context.getStyleColor("jkop-kit", "textColor", "#000000")
				fontFamily = context.getStyleString("jkop-kit", "fontFamilyRegular", "Arial")
			}
		}
		HorizontalBoxWidget {
			spacing = context.getHeightValue("4mm")
			AlignWidget alignw : 0.4 {
				LabelWidget label : 1.0, 0.5 {
					fontSize = context.getStylePixels("jkop-kit", "regularFont")
					textColor = context.getStyleColor("jkop-kit", "textColor", "#000000")
					fontFamily = context.getStyleString("jkop-kit", "fontFamilyRegular", "Arial")
				}
			}
			LayerWidget : 1.0 {
				TextFieldWidget input {
					inputFieldListener = this
				}
				AlignWidget container {
					LayerWidget con : 1.0, 0.5 {
						marginRight = context.getHeightValue("2mm")
					}
				}
			}
		}
	}
}

pvar isTopLabel as bool
pvar widgetValidator as function<Error, string>

const TYPE_DEFAULT = 0
const TYPE_NAME = 2
const TYPE_PASSWORD = 6

const ALIGN_LEFT = 1
const ALIGN_RIGHT = 2
const ALIGN_CENTER = 3

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

func setWidgetFormLabel(value as string) as this
{
	if isTopLabel {
		topLabel.setWidgetText(value)
		Widget.removeFromParent(alignw)
	}
	else {
		label.setWidgetText(value)
	}
	return this
}

func setWidgetFormValue(value as string) as this
{
	input.setWidgetText(value)
	return this
}

func setWidgetAlignLabel(align as int #notLiteral) as this
{
	if align == ALIGN_LEFT {
		alignw.setAlignForIndex(0, 0.0, 0.5)
	}
	else if align == ALIGN_RIGHT {
		alignw.setAlignForIndex(0, 1.0, 0.5)
	}
	else if align == ALIGN_CENTER {
		alignw.setAlignForIndex(0, 0.5, 0.5)
	}
	return this
}

func setWidgetPlaceholder(value as string) as this
{
	input.setWidgetPlaceholder(value)
	return this
}

func setWidgetRemoveLabel(remove as bool)
{
	if remove:
		Widget.removeFromParent(alignw)
	labelDisabled = remove
}

func setWidgetValue(value as object):
	setWidgetFormValue(String.asString(value))

func getWidgetValue as object:
	return input.getWidgetText()

func setWidgetType(type as int) as this
{
	input.setWidgetType(type)
	return this
}

func validateInputValue override as Error
{
	assert widgetValidator
	return widgetValidator(input.getWidgetText())
}

func validFeedback override
{
	input.setWidgetOutlineColor(Color.instance("#34c38f"))
}

func invalidFeedback override
{
	input.setWidgetOutlineColor(Color.instance("#f46a6a"))
}

func createWidgetEyeBallIcon
{
	if not con:
		forceCreateWidget()
	var isText = Boolean.asObject(true)
	var hIcon = new BoxIconWidget(context)
	var sIcon = new BoxIconWidget(context)
	sIcon.setWidgetIcon("Show")
	con.addWidget(sIcon)
	Widget.setWidgetClickHandler(con, func {
		if isText.toBoolean() {
			Widget.removeFromParent(sIcon)
			hIcon.setWidgetIcon("Hide")
			con.addWidget(hIcon)
			input.setWidgetType(TYPE_DEFAULT)
			isText.setValue(false)
		}
		else {
			Widget.removeFromParent(hIcon)
			sIcon.setWidgetIcon("Show")
			con.addWidget(sIcon)
			input.setWidgetType(TYPE_PASSWORD)
			isText.setValue(true)
		}
	})
}

func setWidgetOnLoseFocusHandler(handler as function) as this
{
	input.setWidgetOnLoseFocusHandler(handler)
	return this
}
