
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.uikit.core
import jk.widget
import jk.widget.common

class is WidgetWithValue #widget:

ui FormFieldWidget
{
	HorizontalBoxWidget {
		spacing = context.getHeightValue("4mm")
		AlignWidget : 0.4 {
			LabelWidget label : 1.0, 0.5 {
				fontSize = context.getStylePixels("jkop-kit", "regularFont")
				textColor = context.getStyleColor("jkop-kit", "textColor", "#000000")
				fontFamily = context.getStyleString("jkop-kit", "fontFamilyRegular", "Arial")
			}
		}
		AutoSuggestTextFieldWidget input : 1.0 {
			inputFieldListener = this
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

pvar widgetValidator as function<Error, string>

func initializeWidget override
{
	base.initializeWidget()
	input.setWidgetNoRecordFoundError(func(errorText as string) {
		if errorContainer:
			Widget.removeFromParent(errorContainer)
		assert String.isNotEmpty(errorText)
		var errorLabel = LabelWidget.forText(context, errorText)
		errorLabel.setWidgetTextColor(context.getStyleColor("jkop-kit", "formFieldErrorTextColor", "#f46a6a"))
		errorLabel.setWidgetFontSize(context.getStylePixels("jkop-kit", "formFieldErrorTextFontSize", "2500um"))
		errorContainer = new FormFieldBlankContainerWidget(context)
		errorContainer.setWidgetLabelDisabled(false)
		errorContainer.addWidget(errorLabel)
		addWidget(errorContainer)
		invalidFeedback()
	})
}

func setWidgetOnLoseFocusHandler(handler as function)
{
	assert input
	input.setWidgetOnLoseFocusHandler(func {
		if handler:
			handler()
	})
}

func setWidgetValueChangeHandler(handler as function) as this
{
	if handler:
		input.setWidgetValueChangeHandler(handler)
	return this
}

func setWidgetSearchData(callback as function) as this
{
	input.setWidgetSearchData(callback)
	return this
}

func displaySuggestion(items as vector<string>) as this
{
	input.displaySuggestion(items)
	return this
}

func setWidgetPlaceholder(value as string) as this
{
	input.setWidgetPlaceholder(value)
	return this
}

func setWidgetItems(items as vector<string>):
	input.setWidgetItems(items)

func getWidgetItems as vector<string>:
	return input.getWidgetItems()

func setWidgetText(str as string):
	input.setWidgetText(str)

func getWidgetText as string:
	return input.getWidgetText()

func getSelectedItem as string:
	return input.getSelectedItem()

func setWidgetFormLabel(value as string) as this
{
	label.setWidgetText(value)
	return this
}

func setDefaultNoRecordMessage(errorMessage as string):
	input.setDefaultNoRecordMessage(errorMessage)

func setWidgetValue(value as object):
	input.setWidgetText(String.asString(value))

func getWidgetValue as object:
	return input.getWidgetText()

func validateInputValue override as Error
{
	assert widgetValidator
	return widgetValidator(input.getWidgetText())
}

func validFeedback override
{
	input.setWidgetOutlineColor(Color.instance("#34c38f"))
}

func invalidFeedback override
{
	input.setWidgetOutlineColor(Color.instance("#f46a6a"))
}

func closeAutoSuggestPopup:
	input.closeAutoSuggestPopup()
