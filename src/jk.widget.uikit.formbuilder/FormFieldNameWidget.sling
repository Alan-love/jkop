
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.uikit.core
import jk.widget
import jk.json

class is WidgetWithValue #widget:

ui HorizontalBoxWidget
{
	spacing = context.getHeightValue("4mm")
	AlignWidget : 0.4 {
		LabelWidget label : 1.0, 0.5 {
			fontSize = context.getStylePixels("jkop-kit", "regularFont")
			textColor = context.getStyleColor("jkop-kit", "textColor", "#000000")
			fontFamily = context.getStyleString("jkop-kit", "fontFamilyRegular", "Arial")
		}
	}
	HorizontalBoxWidget : 1.0 {
		spacing = context.getHeightValue("1mm")
		FormFieldTextWidget fname : 1.0 {
			placeholder = "First Name"
			removeLabel = true
		}
		FormFieldTextWidget lname : 1.0 {
			placeholder = "Last Name"
			removeLabel = true
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
	fname.setWidgetType(FormFieldTextWidget.TYPE_NAME)
	lname.setWidgetType(FormFieldTextWidget.TYPE_NAME)
}

func setWidgetValidator(fnValidator as function<Error, string>, lnValidator as function<Error, string>) as this
{
	fname.setWidgetValidator(fnValidator)
	lname.setWidgetValidator(lnValidator)
	return this
}

func setWidgetFormLabel(value as string) as this
{
	label.setWidgetText(value)
	return this
}

func getWidgetValue as object
{
	var data = new DynamicMap()
	data.setObject("firstName", fname.getWidgetValue())
	data.setObject("lastName", lname.getWidgetValue())
	return data
}

func setWidgetValue(val as object)
{
	var data as DynamicMap
	if val is DynamicMap {
		data = val as! DynamicMap
	}
	else {
		data = JSONParser.parseString(String.asString(val)) as DynamicMap
	}
	if not data:
		data = new DynamicMap()
	fname.setWidgetFormValue(data.getString("firstName"))
	lname.setWidgetFormValue(data.getString("lastName"))
}

func setWidgetId(fnId as string, lnId as string) as this
{
	Widget.setWidgetId(fname, fnId)
	Widget.setWidgetId(lname, lnId)
	return this
}

func setFormFieldNameIds(fnId as string, lnId as string)
{
	assert fnId
	assert lnId
	fname.setFormFieldId(fnId)
	lname.setFormFieldId(lnId)
}

func setFormFieldNameErrors(fnError as string, lnError as string)
{
	assert fnError
	assert lnError
	fname.setFormFieldError(fnError)
	lname.setFormFieldError(lnError)
}

func setWidgetRequired(fnRequired as bool, lnRequired as bool) as this
{
	fname.setRequired(fnRequired)
	lname.setRequired(lnRequired)
	return this
}

func setParentForm(widget as FormKitWidget)
{
	assert widget
	fname.setParentForm(widget)
	lname.setParentForm(widget)
}
