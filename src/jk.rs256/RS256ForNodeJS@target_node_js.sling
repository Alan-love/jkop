
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.lang.js

class is RS256:

func toPemFormat(key as string, type as string) private as string
{
	var sb = new StringBuilder()
	var begin = "-----BEGIN " .. type .. " KEY-----"
	sb.appendString(begin)
	sb.appendCharacter('\n')
	sb.appendString(key)
	sb.appendCharacter('\n')
	var end = "-----END " .. type .. " KEY-----"
	sb.appendString(end)
	return sb.toString()
}

func toPrivateFormat(key as string) as string:
	return toPemFormat(key, "PRIVATE")

func toPublicFormat(key as string) as string:
	return toPemFormat(key, "PUBLIC")

func generate(data as buffer, key as string) override throws Exception as buffer
{
	var crypto = JsCommonModule.require("crypto")
	var pem = toPrivateFormat(key)
	var privateKey = crypto.createPrivateKey!(pem)
	var sign = crypto.createSign!("RSA-SHA256")
	if not sign:
		Error.throw("failedToCreateRsaSha256Signer", null)
	sign.update!(data)
	var signature = sign.sign!(privateKey)
	var v = Buffer.asValueOrNull(signature)
	if not v:
		Error.throw("failedToGenerateRs256Hash", null)
	return v
}

func validate(data as buffer, signature as buffer, key as string) override throws Exception as bool
{
	var crypto = JsCommonModule.require("crypto")
	var verify = crypto.createVerify!("RSA-SHA256")
	if not verify:
		Error.throw("failedToCreateRsaSha256Verifier", null)
	verify.update!(data)
	var pem = toPublicFormat(key)
	var publicKey = crypto.createPublicKey!(pem)
	return verify.verify!(publicKey, signature, "base64")
}
