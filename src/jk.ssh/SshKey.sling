
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.os
import jk.fs
import jk.env
import jk.process

class:

func generate(passPhrase as string) static as this:
	return doGenerate(passPhrase, null)

func generatePem(passPhrase as string) static as this:
	return doGenerate(passPhrase, "PEM")

func generatePkcs8(passPhrase as string) static as this:
	return doGenerate(passPhrase, "PKCS8")

func doGenerate(passPhrase as string, format as string?) private static as this
{
	var keygen = ExternalCommand.getAndRequireCommandInPath("ssh-keygen")
	var pl = ProcessLauncher.forFile(keygen)
	var dir = TemporaryDirectory.create()
	pl.addToParams("-t")
	pl.addToParams("rsa")
	pl.addToParams("-f")
	pl.addToParams("sshkey")
	pl.addToParams("-N")
	pl.addToParams(passPhrase ? passPhrase : "")
	if String.isNotEmpty(format) {
		pl.addToParams("-m")
		pl.addToParams(format)
	}
	pl.cwd = dir
	pl.executeSilent()
	var v as this?
	var prfile = dir.entry("sshkey")
	var pufile = dir.entry("sshkey.pub")
	if prfile.isFile() && pufile.isFile():
		v = new this() {
			privateKey prfile.getContentsBuffer()
			publicKey pufile.getContentsBuffer()
		}
	dir.removeRecursive()
	if not v:
		Error.throw("failedToCreate", "SshKey")
	return v
}

func generateAndSave(keyName as string, passPhrase as string) static as this:
	return generate(passPhrase).save(keyName)

func generateDefault(passPhrase as string) static as this:
	return generate(passPhrase).save("id_rsa")

func get(name as string) static as this:
	return new this().load(name)

func getPublic(name as string) static as buffer:
	return new this().loadPublicKey(name)

func getDefaultPublic static as buffer:
	return getPublic("id_rsa")

prop privateKey as buffer?
prop publicKey as buffer?

func getDefaultStorageDirectory private as File
{
	var dd = CommonPath.getHomeDirectory()
	if dd:
		dd = dd.entry(".ssh")
	if not dd:
		Error.throw("noDefaultStorageDirectory", "SshKey")
	return dd
}

func save(keyName as string) as this
{
	if String.isEmpty(keyName):
		Error.throw("invalidKeyName", keyName)
	var dir = getDefaultStorageDirectory()
	dir.createDirectoryRecursive()
	if var privateKey = privateKey {
		var prfile = dir.entry(keyName)
		if prfile.exists():
			Error.throw("alreadyExists", prfile)
		prfile.setContentsBuffer(privateKey)
		if OS.isLinux() || OS.isMacOS():
			prfile.setMode(384)
	}
	if var publicKey = publicKey {
		var pufile = dir.entry(keyName .. ".pub")
		if pufile.exists():
			Error.throw("alreadyExists", pufile)
		pufile.setContentsBuffer(publicKey)
	}
	return this
}

func loadPublicKey(keyName as string) as buffer
{
	if String.isEmpty(keyName):
		Error.throw("invalidKeyName", keyName)
	var dir = getDefaultStorageDirectory()
	var pufile = dir.entry(keyName .. ".pub")
	return pufile.getContentsBuffer()
}

func load(keyName as string) as this
{
	if String.isEmpty(keyName):
		Error.throw("invalidKeyName", keyName)
	var dir = getDefaultStorageDirectory()
	var prfile = dir.entry(keyName)
	var pufile = dir.entry(keyName .. ".pub")
	var prdata = prfile.getContentsBuffer()
	var pudata = pufile.getContentsBuffer()
	privateKey = prdata
	publicKey = pudata
	return this
}
