
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.uikit.boxicons

class #widget:

IFDEF "target_html"
{
	func animateRotate(element as object, degree as int)
	{
		var str = "rotate(" .. String.forInteger(degree) .. "deg)"
		HTMLDOM.setStyle(element, "transform", str)
		HTMLDOM.setStyle(element, "webkitTransform", str)
		HTMLDOM.setStyle(element, "msTransform", str)
		HTMLDOM.setStyle(element, "oTransform", str)
		HTMLDOM.setStyle(element, "mozTransform", str)
		HTMLDOM.setStyle(element, "transition", "all 0.2s ease-in-out")
	}
}

ui LayerWithBackgroundColorWidget
{
	color = Color.white()
	outlineColor = Color.instance("#e6ecf5")
	outlineWidth = context.getHeightValue("1px")
	VerticalBoxWidget box {
		HorizontalBoxWidget hbox {
			margin = context.getStylePixels("jkop-kit", "expanderMargin", "6mm")
			AlignWidget : 1.0 {
				LabelWidget title : 0.0, 0.5, true {
					fontSize = context.getStylePixels("jkop-kit", "mediumFont")
					fontFamily = context.getStyleString("jkop-kit", "fontFamilyMedium")
				}
			}
			AlignWidget {
				BoxIconWidget icon {
					icon = "chevron-right"
				}
			}
		}
		LayerWidget container {
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
	created = true
}

pvar widgetContent as Widget
pvar onCloseContentHandler as function
var created = false
var visible = false
var contentMargin as int #notLiteral

func initializeWidget override
{
	base.initializeWidget()
	Widget.setWidgetClickHandler(hbox, func {
		toggle()
	})
}

func setWidgetTitle(value as string) as this
{
	title.setWidgetText(value)
	return this
}

func setWidgetTitleMargin(margin as int #notLiteral) as this
{
	hbox.setWidgetMargin(margin)
	return this
}

func setWidgetContentMargin(margin as int #notLiteral) as this
{
	contentMargin = margin
	return this
}

func toggle
{
	assert widgetContent
	var degree = 0
	var children = Widget.getChildren(container)
	if children && sizeof children > 0 {
		Widget.removeChildrenOf(container)
		container.setWidgetMargin(0)
		if onCloseContentHandler:
			onCloseContentHandler()
	}
	else {
		degree = 90
		if contentMargin > 0:
			container.setWidgetMargin(contentMargin)
		container.addWidget(widgetContent)
	}
	icon.setWidgetRotate(degree)
}
