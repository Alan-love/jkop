
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

class PopupContainerWidget is ContainerWidget #widget
{
	pvar widget as Widget

	func computeWidgetLayout(widthConstraint as int #notLiteral) override
	{
		foreach child in Widget.getChildren(this) {
			Widget.layout(child, -1)
			handleChild(child)
		}
		Widget.setLayoutSize(this, widthConstraint, Widget.getHeight(this))
	}

	func handleChild(child as Widget)
	{
		var dx = Widget.getAbsoluteX(widget) + Widget.getWidth(widget) - Widget.getWidth(child)
		var dy = Widget.getAbsoluteY(widget)
		Widget.move(child, dx, dy)
	}

	func hide:
		Widget.removeFromParent(this)
}

ui LayerWidget
{
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

var container as PopupContainerWidget
var visible = false

func initializeWidget override
{
	base.initializeWidget()
	Widget.setWidgetClickHandler(this, func {
		hide()
	})
}

func showWidgetBelow(w as Widget, widgetToShow as Widget)
{
	assert w
	assert widgetToShow
	var topMostLayer = LayerWidget.findTopMostLayerWidget(w)
	container = new PopupContainerWidget(context)
	container.setWidget(w)
	container.addWidget(widgetToShow)
	addWidget(container)
	topMostLayer.addWidget(this)
	visible = true
}

func hide
{
	assert container
	container.hide()
	Widget.removeFromParent(this)
	visible = false
}

func isShown as bool:
	return visible
