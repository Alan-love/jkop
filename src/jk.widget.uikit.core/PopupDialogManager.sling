
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.app.ui
import jk.widget
import jk.widget.common
import jk.gfx

class:

class BoxWidget #widget
{
	ui CardFrameWidget
	{
		widthRequest = context.getHeightValue("100mm")
		LayerWithBackgroundColorWidget content {
		}
	}

	ctor(ctx as GuiApplicationContext)
	{
		base(ctx)
		forceCreateWidget()
		created = true
	}

	pvar widgetPopup as PopupWidget
	var created = false

	func addWidget(w as Widget) override as ContainerWidget
	{
		if content && created {
			Widget.addChild(content, w)
			return this
		}
		return base.addWidget(w)
	}
}

var context static as GuiApplicationContext
var parent static as Widget

func initialize(ctx as GuiApplicationContext, parentWidget as Widget) static
{
	context = ctx
	parent = parentWidget
}

func showErrorPopup(message as string, handler as function = null) static:
	showMessagePopup(message, handler, false)

func showMessagePopup(message as string, handler as function = null, positive as bool = true) static
{
	var popup final = new PopupWidget(context)
	var hlr final = handler
	var box = new BoxWidget(context)
	box.setWidgetPopup(popup)
	var label = new LabelWidget(context)
		.setWidgetText(message)
		.setWidgetFontSize(context.getStylePixels("jkop-kit", "smallFont", "3000um"))
	var vbox = VerticalBoxWidget.forContext(context, context.getStylePixels("jkop-kit", "padding", "5mm"), context.getStylePixels("jkop-kit", "spacing", "2mm"))
	vbox.addWidget(label)
	var btn as ButtonFrameWidget
	if not positive {
		btn = new SecondaryButtonWidget(context)
	}
	else {
		btn = new PrimaryButtonWidget(context)
	}
	btn.setWidgetText("OK")
	btn.setWidgetClickHandler(func {
		popup.hidePopup()
		if hlr:
			hlr()
	})
	vbox.addWidget(btn)
	box.addWidget(vbox)
	popup.setWidgetContent(LayerWidget.forWidget(context, box, context.getStylePixels("jkop-kit", "padding", "2mm")))
	popup.showPopup(parent)
}

func showContentWidgetPopup(widget as Widget, sz as int = 0, autoHeight as bool = false) static as PopupWidget
{
	var popup final = new PopupWidget(context)
	var box = new BoxWidget(context)
	var ss = sz
	if ss <= 0:
		ss = context.getHeightValue("130mm")
	box.setWidgetWidthRequest(ss)
	if not autoHeight:
		box.setWidgetHeightRequest(context.getHeightValue("100mm"))
	box.setWidgetPopup(popup)
	box.addWidget(LayerWidget.forWidget(context, widget))
	if widget is DisplayAwareWidget:
		(widget as! DisplayAwareWidget).onWidgetDisplayed()
	popup.setWidgetContent(box)
	popup.showPopup(parent)
	return popup
}

func showConfirmPopup(message as string, posText as string, negText as string, posHandler as function, negHandler as function = null) static
{
	var content = new BoxWidget(context)
	var label = LabelWidget.forText(context, message)
	label.setWidgetFontFamily(context.getStyleString("jkop-kit", "fontRegular"))
	var vbox = VerticalBoxWidget.forContext(context, 0, context.getHeightValue("5mm"))
	vbox.addWidget(label)
	var popup final = new PopupWidget(context)
	content.setWidgetPopup(popup)
	var nhlr final = negHandler
	var hbox = HorizontalBoxWidget.forContext(context, 0, context.getStylePixels("jkop-kit", "spacing", "2mm"))
	hbox.addWidgetWithProperties(new SecondaryButtonWidget(context).setWidgetText(negText).setWidgetClickHandler(func {
		popup.hidePopup()
		if nhlr:
			nhlr()
	}), 1.0)
	var phlr final = posHandler
	hbox.addWidgetWithProperties(new PrimaryButtonWidget(context).setWidgetText(posText).setWidgetClickHandler(func {
		popup.hidePopup()
		if phlr:
			phlr()
	}), 1.0)
	vbox.addWidget(hbox)
	content.addWidget(LayerWidget.forWidget(context, vbox, context.getStylePixels("jkop-kit", "padding", "4mm")))
	popup.setWidgetContent(content)
	popup.showPopup(parent)
}

func showToastMessageDialog(message as string) static
{
	var popup final = new PopupWidget(context)
	var box = new BoxWidget(context)
	box.setWidgetPopup(popup)
	var label = new LabelWidget(context)
		.setWidgetText(message)
		.setWidgetFontSize(context.getStylePixels("jkop-kit", "smallFont", "3500um"))
	var vbox = VerticalBoxWidget.forContext(context, context.getStylePixels("jkop-kit", "padding", "6mm"), context.getStylePixels("jkop-kit", "spacing", "3mm"))
	vbox.addWidget(label)
	box.addWidget(vbox)
	popup.setWidgetContent(LayerWidget.forWidget(context, box, context.getStylePixels("jkop-kit", "padding", "2mm")))
	popup.showPopup(parent)
	context.startTimer(3000, func {
		popup.hidePopup()
	})
}
