
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

const ALIGN_LEFT = 0.0
const ALIGN_RIGHT = 1.0

ui LayerWithBackgroundColorWidget
{
	LayerWithBackgroundColorWidget layer {
		ImageWidget image {
			imageScaleMethod = ImageWidget.FIT
		}
	}
}

func setWidgetImageResource(resource as string) as this
{
	if not image:
		forceCreateWidget()
	image.setWidgetImageResource(resource)
	image.setWidgetImageHeight(context.getStylePixels("jkop-kit", "avatarHeight", "8mm"))
	return this
}

func setWidgetAvatarHeight(sz as int #notLiteral) as this
{
	image.setWidgetImageHeight(sz)
	layer.setWidgetHeightRequest(sz)
	return this
}

func setWidgetAvatarWidth(sz as int #notLiteral) as this
{
	image.setWidgetImageWidth(sz)
	layer.setWidgetWidthRequest(sz)
	return this
}

func setWidgetRounded(rounded as bool) as this
{
	IFDEF "target_html" {
		HTMLDOM.setStyle(this.element, "border-radius", "50%")
	}
	return this
}

func setWidgetBorderSize(sz as int #notLiteral) as this
{
	setWidgetOutlineWidth(sz)
	setWidgetMargin(sz)
	return this
}

func setWidgetBorderColor(color as Color) as this
{
	setWidgetOutlineColor(color)
	return this
}

func setWidgetBoxShadowColor(color as Color) as this
{
	assert color
	setWidgetMargin(context.getHeightValue("300um"))
	layer.setWidgetColor(Color.white())
	layer.setWidgetMargin(context.getHeightValue("300um"))
	IFDEF "target_html" {
		HTMLDOM.setStyle(layer.element, "box-shadow", "0 0 13px 0 " .. HTMLDOM.colorToRGBA(color))
	}
	return this
}
