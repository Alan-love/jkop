
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

IFDEF "target_html"
{
	is Widget

	func createElement override as object
	{
		var v = HTMLDOM.createElement("label")
		HTMLDOM.setAttribute(v, "class", "lbl")
		var i = HTMLDOM.createElement("input")
		HTMLDOM.setAttribute(i, "type", "checkbox")
		HTMLDOM.setStyle(i, "opacity", "0")
		HTMLDOM.addEventListener(i, "change", func {
			onCheckChangeListener()
		})
		var spn = HTMLDOM.createElement("span")
		HTMLDOM.setAttribute(spn, "class", "spn")
		var styleElement = HTMLDOM.createElement("style")
		HTMLDOM.setAttribute(styleElement, "id", VALUE "__THIS__")
		var style = [[
			.lbl .spn {
				position: absolute;
				top: 0px;
				left: 0px;
				height: 15px;
				width: 15px;
				background-color: transparent;
				border-radius: 5px;
				border: 2px solid #34c38f;
			}
			.lbl .spn::after {
				position: absolute;
				content: "";
				left: 12px;
				top: 12px;
				height: 0px;
				width: 0px;
				border-radius: 5px;
				border: solid #34c38f;
				border-width: 0 3px 3px 0;
				-webkit-transform: rotate(0deg) scale(0);
				-ms-transform: rotate(0deg) scale(0);
				transform: rotate(0deg) scale(0);
				opacity: 1;
			}
			.lbl input:checked ~ .spn {
				background-color: transparent;
				border-radius: 5px;
				-webkit-transform: rotate(0deg) scale(1);
				-ms-transform: rotate(0deg) scale(1);
				transform: rotate(0deg) scale(1);
				opacity: 1;
				border: 2px solid #34c38f;
			}
			.lbl input:checked ~ .spn::after {
				-webkit-transform: rotate(45deg) scale(1);
				-ms-transform: rotate(45deg) scale(1);
				transform: rotate(45deg) scale(1);
				opacity: 1;
				left: 4px;
				top: -1px;
				width: 5px;
				height: 10px;
				border: solid #34c38f;
				border-width: 0 3px 3px 0;
				background-color: transparent;
				border-radius: 0;
			}
		]]
		HTMLDOM.setTextContent(styleElement, style)
		if not HTMLDOM.getElementById(VALUE "__THIS__"):
			HTMLDOM.appendChild(HTMLDOM.getDocumentHead(), styleElement)
		HTMLDOM.appendChild(v, i)
		HTMLDOM.appendChild(v, spn)
		return v
	}
}

pvar widgetCheckHandler as function
var widgetContext as GuiApplicationContext

ctor(context as GuiApplicationContext):
	widgetContext = context

func getWidgetChecked as bool
{
	IFDEF "target_html" {
		return lang "js" bool {{{ this.element.firstChild.checked }}}
	}
	ELSE {
		return false
	}
}

func setWidgetChecked(x as bool)
{
	IFDEF "target_html" {
		var child #used = HTMLDOM.getChild(element, 0)
		var state = x
		lang "js" {{{
			child.checked = state
		}}}
	}
}

func setWidgetValue(value as object):
	setWidgetChecked(Boolean.asBoolean(value))

func getWidgetValue as object:
	return Boolean.asObject(getWidgetChecked())

func onCheckChangeListener private
{
	if widgetCheckHandler:
		widgetCheckHandler()
}
