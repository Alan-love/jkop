
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

IFDEF "target_html"
{
	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.setStyle(element, "box-shadow", "0 1px 1px 0 rgba(0, 0, 0, 0.14)")
		HTMLDOM.addEventListener(element, "mouseover", func {
			;
		})
		HTMLDOM.addEventListener(element, "mouseout", func {
			;
		})
	}
}

ui LayerWithBackgroundColorWidget
{
	color = context.getStyleColor("jkop-kit", "buttonColor", "#000000")
	roundingRadius = context.getStylePixels("jkop-kit", "buttonRoundingRadius", "4px")
	LayerWidget {
		margin = context.getStylePixels("jkop-kit", "buttonPadding", "2000um")
		LabelWidget label {
			textColor = context.getStyleColor("jkop-kit", "buttonTextColor", "#FFFFFF")
			textAlign = LabelWidget.ALIGN_CENTER
			fontSize = context.getStylePixels("jkop-kit", "buttonTextFontSize", "3000um")
			fontFamily = context.getStyleString("jkop-kit", "fontRegular")
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

var widgetClickHandler as function
var widgetTextColor as Color
var widgetBackgroundColor as Color
var widgetHoverBackgroundColor as Color
var enabled = true

func initializeWidget override
{
	base.initializeWidget()
	Widget.setWidgetClickHandler(this, func {
		if enabled {
			if widgetClickHandler:
				widgetClickHandler()
		}
	})
}

func setWidgetBackgroundColor(color as Color) as this
{
	widgetBackgroundColor = color
	setWidgetColor(color)
	return this
}

func setWidgetHoverBackgroundColor(color as Color) as this
{
	widgetHoverBackgroundColor = color
	return this
}

func setWidgetText(value as string) as this
{
	label.setWidgetText(String.toUpperCase(value))
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetTextColor(color as Color) as this
{
	widgetTextColor = color
	label.setWidgetTextColor(color)
	return this
}

func setWidgetFontSize(sz as int #notLiteral) as this
{
	label.setWidgetFontSize(sz)
	return this
}

func setWidgetFixWidth(sz as int #notLiteral) as this
{
	if sz > 0:
		setWidgetWidthRequest(sz)
	return this
}

func setWidgetClickHandler(handler as function) as this
{
	assert handler
	widgetClickHandler = handler
	return this
}

func setWidgetPaddingLeft(padding as int #notLiteral) as this
{
	label.setWidgetPaddingLeft(padding)
	return this
}

func setWidgetPaddingRight(padding as int #notLiteral) as this
{
	label.setWidgetPaddingRight(padding)
	return this
}

func setWidgetEnabled(v as bool) as this
{
	enabled = v
	if not enabled {
		Widget.setAlpha(this, 0.5)
	}
	else {
		Widget.setAlpha(this, 1.0)
	}
	return this
}

func isEnabled as bool:
	return enabled
