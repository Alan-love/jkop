
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.common
import jk.widget.uikit.boxicons

class is WidgetWithValue #widget:

ui LayerWithBackgroundColorWidget
{
	outlineColor = context.getStyleColor("jkop-kit", "inputFieldOutlineColor", "#CCCCCC")
	outlineWidth = context.getHeightValue("1px")
	HorizontalBoxWidget {
		marginLeft = context.getStylePixels("jkop-kit", "textFieldPaddingLeft", "800um")
		marginRight = context.getStylePixels("jkop-kit", "textFieldPaddingRight", "800um")
		marginTop = context.getStylePixels("jkop-kit", "textFieldPaddingTop", "800um")
		marginBottom = context.getStylePixels("jkop-kit", "textFieldPaddingBottom", "800um")
		SelectWidget input : 1.0 {
			padding = 0
			fontSize = context.getStylePixels("jkop-kit", "regularFont")
			textColor = Color.black()
			valueChangeHandler = func {
				onValueChanged()
			}
			onFocusHandler = func {
				onDetectFocusChange()
			}
			onLoseFocusHandler = func {
				onDetectFocusChange()
			}
		}
		AlignWidget {
			margin = context.getHeightValue("1mm")
			BoxIconWidget : 0.5, 0.5, true {
				icon = "chevron-down"
			}
		}
	}
}

var placeholder as string
var listener as InputFieldListener
var widgetValueChangeHandler as function
var focus = false
var widgetItems as KeyValueList<string, string>

func setWidgetInputFieldListener(l as InputFieldListener) as this
{
	listener = l
	return this
}

func setWidgetItems(items as KeyValueList<string, string>) as this
{
	input.setWidgetItemsAsKeyValueList(items)
	widgetItems = items
	return this
}

func setWidgetValueChangeHandler(handler as function) as this
{
	assert handler
	widgetValueChangeHandler = handler
	return this
}

func setWidgetValue(value as object) 
{
	input.setWidgetValue(value)
	onLoseFocus()
}

func getWidgetValue as object:
	return input.getWidgetValue()

func getSelectedWidgetIndex as int:
	return input.getSelectedWidgetIndex()

func getWidgetTextValue(index as int) as string
{
	assert widgetItems
	return widgetItems.getValue(index)
}

func onValueChanged private
{
	if widgetValueChangeHandler:
		widgetValueChangeHandler()
}

func onDetectFocusChange private
{
	focus = !focus
	if focus {
		setWidgetOutlineColor(context.getStyleColor("jkop-kit", "inputFieldFocusOutlineColor", "#000000"))
	}
	else {
		setWidgetOutlineColor(context.getStyleColor("jkop-kit", "inputFieldOutlineColor", "#CCCCCC"))
		onLoseFocus()
	}
}

func onLoseFocus private
{
	var value = input.getSelectedWidgetValue()
	var empty = false
	if String.isEmpty(value):
		empty = true
	if listener:
		listener.onValueChange(empty)
}

