
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.common

class #widget:

const TYPE_DEFAULT = 0
const TYPE_NAME = 2
const TYPE_PHONE_NUMBER = 5
const TYPE_PASSWORD = 6
const TYPE_INTEGER = 7

ui LayerWithBackgroundColorWidget
{
	outlineColor = context.getStyleColor("jkop-kit", "inputFieldOutlineColor", "#CCCCCC")
	outlineWidth = context.getHeightValue("1px")
	TextInputWidget input {
		fontSize = context.getStylePixels("jkop-kit", "regularFont")
		textColor = context.getStyleColor("jkop-kit", "textColor", "#000000")
		fontFamily = context.getStyleString("jkop-kit", "fontFamilyRegular", "Arial")
		padding = 0
		onFocusHandler = func {
			onDetectFocusChange()
		}
		onLoseFocusHandler = func {
			onDetectFocusChange()
		}
	}
}

var focus = false
var listener as InputFieldListener

func initializeWidget override
{
	base.initializeWidget()
	input.setWidgetPaddingAll(context.getStylePixels("jkop-kit", "textFieldPaddingLeft", "800um"), context.getStylePixels("jkop-kit", "textFieldPaddingTop", "2000um"), context.getStylePixels("jkop-kit", "textFieldPaddingRight", "800um"), context.getStylePixels("jkop-kit", "textFieldPaddingBottom", "2000um"))
}

func setInputMaxLength(len as int) as this
{
	var type = input.getWidgetType()
	if type == TYPE_PASSWORD {
		input.setWidgetMaxLength(len)
	}
	// encforcing maxlength attribute on input type number
	if type == TYPE_INTEGER {
		var v = input
		var attr = "if(this.value.length==" .. String.forInteger(len) .. ") return false;"
		lang "js" {{{
			v.element.setAttribute("onkeypress", attr)
		}}}
	}
	return this
}

func setInputMaxValue(val as int) as this
{
	var v = input
	var value = String.forInteger(val)
	lang "js" {{{
		v.element.setAttribute("max", value)
	}}}
	return this
}

func setInputMinValue(val as int) as this
{
	var v = input
	var value = String.forInteger(val)
	lang "js" {{{
		v.element.setAttribute("min", value)
	}}}
	return this
}

func setWidgetInputFieldListener(l as InputFieldListener) as this
{
	listener = l
	return this
}

func setWidgetPlaceholder(value as string) as this
{
	if not input:
		forceCreateWidget()
	input.setWidgetPlaceholder(value)
	return this
}

func setWidgetText(value as string) as this
{
	if not input:
		forceCreateWidget()
	input.setWidgetText(value)
	eventHandler()
	return this
}

func getWidgetText as string:
	return input.getWidgetText()

func setWidgetType(type as int) as this
{
	if not input:
		forceCreateWidget()
	IFDEF "target_browser" {
		var v = input
		if HTMLDOM.isFirefox() && type == TYPE_PHONE_NUMBER {
			lang "js" {{{
				v.element.addEventListener("keydown", function(e) {
					var k = e.which || e.keyCode;
					if (k != 46 && k > 31 && (k < 48 || k > 57)) {
						e.preventDefault();
					}
				})
			}}}
		}
		else if type == TYPE_NAME {
			var attr = "return ((event.charCode >= 65 && event.charCode <= 90) || (event.charCode >= 97 && event.charCode <= 122) || (event.charCode == 32) || (event.charCode == 46) || (event.charCode == 45));"
			lang "js" {{{
				v.element.setAttribute("onkeypress", attr)
			}}}
		}
	}
	input.setWidgetType(type)
	return this
}

func setWidgetTextChangeHandler(handler as function) as this
{
	input.setWidgetTextChangeHandler(handler)
	return this
}

func setWidgetOnLoseFocusHandler(handler as function) as this
{
	assert handler
	input.setWidgetOnLoseFocusHandler(handler)
	return this
}

func onDetectFocusChange private
{
	focus = !focus
	if focus {
		setWidgetOutlineColor(context.getStyleColor("jkop-kit", "inputFieldFocusOutlineColor", "#000000"))
	}
	else {
		setWidgetOutlineColor(context.getStyleColor("jkop-kit", "inputFieldOutlineColor", "#CCCCCC"))
		eventHandler()
	}
}

func eventHandler private
{
	var value = getWidgetText()
	var empty = false
	if String.isEmpty(value):
		empty = true
	if listener:
		listener.onValueChange(empty)
}
