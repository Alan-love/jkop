
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is File:

class MyFileReader is FileReader is SizedReader is Reader is Closable is SeekableReader public
{
	var file public as [magical:java.io.File]?
	var stream public as [magical:java.io.FileInputStream]?

	func initialize
	{
		if file == null:
			Error.throw("nullFile", null)
		lang "kotlin" {{{
			stream = java.io.FileInputStream(file)
		}}}
	}

	func read(buffer as buffer) as int
	{
		var ptr = buffer
		var sz = Buffer.getSize(buffer) as! int
		var v as int
		lang "kotlin" {{{
			try {
				v = stream!!.read(ptr!!.toByteArray(), 0, sz)
			}
			catch(e: Exception) {
				e.printStackTrace()
			}
		}}}
		return v
	}

	func getSize as long
	{
		var v as long
		lang "kotlin" {{{
			try {
				v = stream!!.available()
			}
			catch(e: Exception) {
				e.printStackTrace()
			}
		}}}
		return v
	}

	func close
	{
		lang "kotlin" {{{
			try {
				stream!!.close()
			}
			catch(e :Exception) {
				e.printStackTrace()
			}
		}}}
	}

	func setCurrentPosition(n as int64) as bool:
		return false

	func getCurrentPosition as int64:
		return 0
}

class MyFileWriter is FileWriter is Writer is Closable is SeekableWriter is FlushableWriter public
{
	pvar append as bool

	var stream public as [magical:java.io.FileOutputStream]?
	var file public as [magical:java.io.File]?

	func initialize
	{
		if file == null:
			Error.throw("nullFile", null)
		lang "kotlin" {{{
			stream = java.io.FileOutputStream(file)
		}}}
	}

	func write(buffer as buffer, size as int) as int
	{
		var ptr = buffer
		var sz = size
		if sz < 1:
			var sz = Buffer.getSize(buffer) as! int
		lang "kotlin" {{{
			try {
				stream!!.write(buffer!!.toByteArray(), 0, sz)
			}
			catch(e:Exception) {
				e.printStackTrace()
			}
		}}}
		return sz
	}

	func close
	{
		var stream as [magical:java.io.FileOutputStream]?
		var file as [magical:java.io.File]?
		lang "kotlin" {{{
			try {
				stream!!.close()
			}
			catch(e:Exception) {
				e.printStackTrace()
			}
		}}}
	}

	func setCurrentPosition(n as int64) as bool:
		return false

	func getCurrentPosition as int64:
		return 0

	func flush
	{
		lang "kotlin" {{{
			try {
				stream!!.flush()
			}
			catch(e:Exception) {
				e.printStackTrace()
			}
		}}}
	}
}

var path as string?

func forPath(path as string) static as File
{
	var v = new this()
	v.setPath(path)
	return v
}

func setPath(newPath as string):
	this.path = newPath

func getPath override as string
{
	if not path:
		return ""
	return path
}

func createDirectoryRecursive override throws Exception
{
	var v as bool
	lang "kotlin" {{{
		var f = java.io.File(path)
		v = f.mkdirs()
	}}}
	if not v:
		Error.throw("failedToCreateDirectoryRecursive", path)
}

func read override throws Exception as FileReader
{
	var v = new MyFileReader()
	lang "kotlin" {{{
		v?.file = java.io.File(path)
	}}}
	v.initialize()
	return v
}

func write override throws Exception as FileWriter
{
	var v = new MyFileWriter()
	lang "kotlin" {{{
		v?.file = java.io.File(path)
	}}}
	v.initialize()
	return v
}

func append override throws Exception as FileWriter
{
	var v = new MyFileWriter().setAppend(true)
	lang "kotlin" {{{
		v?.file = java.io.File(path)
	}}}
	v.initialize()
	return v
}

func createDirectory override throws Exception
{
	var v as bool
	lang "kotlin" {{{
		var f = java.io.File(path)
		v = f.mkdir()
	}}}
	if not v:
		Error.throw("failedToCreateDirectory", path)
}

func remove override throws Exception
{
	var v as bool
	lang "kotlin" {{{
		var f = java.io.File(path)
		v = f.delete()
	}}}
	if not v:
		Error.throw("failedToRemoveFile", path)
}

func isExecutable override as bool
{
	var v as bool
	lang "kotlin" {{{
		var f = java.io.File(path)
		v = f.canExecute()
	}}}
	return v
}

func touch override throws Exception
{
	var v as bool
	lang "kotlin" {{{
		var f = java.io.File(path)
		v = f.createNewFile()
	}}}
	if not v:
		Error.throw("failedToTouchFile", path)
}

func move(dest as File, replace as bool) override throws Exception
{
	if dest.exists() {
		if not replace:
			Error.throw("fileAlreadyExists", dest)
		dest.remove()
	}
	var destpath = dest.getPath()
	var v as bool
	lang "kotlin" {{{
		var src = java.io.File(path)
		var dst = java.io.File(destpath)
		v = src.renameTo(dst)
	}}}
	if not v:
		Error.throw("failedToMoveFile", this)
}

func stat override as FileInfo
{
	var f = lang "kotlin" as [magical:java.io.File] {{{ new java.io.File(path) }}}
	var exists as bool = f.exists()
	var v = new FileInfo() {
		file this
		exists exists
	}
	if exists {
		v.size = f.length() as! int
		v.modifyTime = f.lastModifier() as! long
		if f.isDirectory() as! bool {
			v.type = FileInfo.FILE_TYPE_DIR
		}
		else if f.isFile() as! bool {
			v.type = FileInfo.FILE_TYPE_FILE
		}
	}
	return v
}

func entry(name as string) override as File
{
	if String.isEmpty(name):
		return this
	var v = new this()
	v.path = path .. "/" .. name
	return v
}

func makeExecutable override stub throws Exception
func removeDirectory override stub throws Exception
func entries override stub throws Exception as Iterator<File>
