
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is File private:

class MyReader is FileReader is Reader is SizedReader is Closable is SeekableReader
{
	pvar handle as [magical:@[NSFileHandle*]]?
	pvar size as int

	func close
	{
		if handle == null:
			return
		lang "objc" {{{
			[handle closeFile];
		}}}
		handle = null
	}

	func setCurrentPosition(n as int64) as bool
	{
		if handle == null:
			return false
		var v = true
		lang "objc" {{{
			@try {
				[handle seekToFileOffset:n];
			}
			@catch(NSException* e) {
				v = false;
			}
		}}}
		return v
	}

	func getCurrentPosition as int64
	{
		if handle == null:
			return 0
		var v as int64 = 0
		lang "objc" {{{
			@try {
				v = [handle offsetInFile];
			}
			@catch(NSException* e) {
				v = 0;
			}
		}}}
		return v
	}

	func read(buf as buffer) as int
	{
		if buf == null || handle == null:
			return 0
		var data as buffer?
		var mx = lang "objc" as int {{{ [buf length] }}}
		lang "objc" {{{
			data = [handle readDataOfLength:mx];
		}}}
		if data == null:
			return 0
		var dlen = lang "objc" as int {{{ [data length] }}}
		if dlen < 1:
			return 0
		lang "objc" {{{
			[buf setData:data];
		}}}
		return dlen
	}

	func readAll as buffer:
		return lang "objc" as buffer {{{ [handle readDataToEndOfFile] }}}
}

class MyWriter is FileWriter is Writer is Closable is SeekableWriter
{
	pvar handle as [magical:@[NSFileHandle*]]?

	func write(buffer as buffer, size as int) as int
	{
		if buffer == null:
			return 0
		var ptr = buffer
		if size >= 0 && size != Buffer.getSize(ptr):
			ptr = Buffer.getSubBuffer(ptr, 0, size)
		var v = Buffer.getSize(ptr)
		lang "objc" {{{
			@try {
				[handle writeData:ptr];
			}
			@catch(NSException* e) {
				v = -1;
			}
		}}}
		return v as! int
	}

	func setCurrentPosition(n as int64) as bool
	{
		if handle == null:
			return false
		var v = true
		lang "objc" {{{
			@try {
				[handle seekToFileOffset:n];
			}
			@catch(NSException* e) {
				v = false;
			}
		}}}
		return v
	}

	func getCurrentPosition as int64
	{
		if handle == null:
			return 0
		var v as int64 = 0
		lang "objc" {{{
			@try {
				v = [handle offsetInFile];
			}
			@catch(NSException* e) {
				v = 0;
			}
		}}}
		return v
	}

	func close
	{
		if handle == null:
			return
		lang "objc" {{{
			[handle closeFile];
		}}}
		handle = null
	}
}

func forPath(path as string) static as File:
	return new this(path)

var path as string?
var manager as [magical:@[NSFileManager*]]?

ctor(path as string)
{
	this.path = lang "objc" as string {{{ [path stringByStandardizingPath] }}}
	lang "objc" {{{
		manager = [NSFileManager defaultManager];
	}}}
}

func entry(name as string) override as File:
	return new this(path .. "/" .. name)

func write override throws Exception as FileWriter:
	return getMyWriter(true)

func append override throws Exception as FileWriter:
	return getMyWriter(false)

func entries override throws Exception as Iterator<File>
{
	var v = new vector<File>
	var files as array<string>?
	lang "objc" {{{
		files = [manager contentsOfDirectoryAtPath:path error:nil];
	}}}
	if files: foreach p as string in files:
		Vector.appendValue(v, new this(this.path .. "/" .. p))
	return Vector.iterate(v)
}

func move(dest as File, replace as bool) override stub throws Exception
func touch override stub throws Exception
func setMode(mode as int) override stub throws Exception
func setOwnerUser(uid as int) override stub throws Exception
func setOwnerGroup(gid as int) override stub throws Exception
func makeExecutable override stub throws Exception

func stat override as FileInfo
{
	var v = new FileInfo() {
		file this
	}
	var dict as [magical:@[NSDictionary*]]?
	lang "objc" {{{
		dict = [manager attributesOfItemAtPath:path error:nil];
		[v setSize:[[dict objectForKey:NSFileSize] integerValue]];
		[v setCreateTime:[[dict objectForKey:NSFileCreationDate] timeIntervalSince1970]];
		[v setAccessTime:0];
		[v setModifyTime:[[dict objectForKey:NSFileModificationDate] timeIntervalSince1970]];
		[v setOwnerUser:[[dict objectForKey:NSFileOwnerAccountID] integerValue]];
		[v setOwnerGroup:[[dict objectForKey:NSFileGroupOwnerAccountID] integerValue]];
		[v setMode:0];
		if([manager isExecutableFileAtPath:path]) {
			[v setExecutable:YES];
		}
		if([NSFileTypeSymbolicLink isEqualToString:[dict objectForKey:NSFileType]]) {
			[v setLink:YES];
		}
	}}}
	if isFile() {
		v.type = FileInfo.FILE_TYPE_FILE
		v.exists = true
	}
	else if isDirectory() {
		v.type = FileInfo.FILE_TYPE_DIR
		v.exists = true
	}
	else if isLink() {
		v.exists = true
	}
	else {
		v.exists = false
	}
	return v
}

func getMyReader private as MyReader
{
	var handle as [magical:@[NSFileHandle*]]?
	lang "objc" {{{
		handle = [NSFileHandle fileHandleForReadingAtPath:path];
	}}}
	if handle == null:
		Error.throw("failedToOpenFileForReading", path)
	var v = new MyReader()
	v.setSize(getSize())
	v.setHandle(handle)
	return v
}

func getMyWriter(truncate as bool) private as MyWriter
{
	if exists() == false:
		lang "objc" {{{
			[manager createFileAtPath:path contents:nil attributes:nil];
		}}}
	var handle as [magical:@[NSFileHandle*]]?
	lang "objc" {{{
		handle = [NSFileHandle fileHandleForWritingAtPath:path];
	}}}
	if handle == null:
		Error.throw("failedToOpenFileForWriting", path)
	if truncate:
		lang "objc" {{{
			[handle truncateFileAtOffset:0];
		}}}
	var v = new MyWriter()
	v.setHandle(handle)
	return v
}

func read override throws Exception as FileReader:
	return getMyReader()

func exists override as bool:
	return lang "objc" as bool {{{ [manager fileExistsAtPath:path] }}}

func isExecutable override as bool:
	return lang "objc" as bool {{{ [manager isExecutableFileAtPath:path] }}}

func isFile override as bool
{
	var v as bool
	var isdir as bool
	lang "objc" {{{
		v = [manager fileExistsAtPath:path isDirectory:&isdir];
	}}}
	if v == false:
		return false
	return not isdir
}

func isDirectory override as bool
{
	var v as bool
	var isdir as bool
	lang "objc" {{{
		v = [manager fileExistsAtPath:path isDirectory:&isdir];
	}}}
	if v == false:
		return false
	return isdir
}

func createDirectory override throws Exception
{
	var v = lang "objc" as bool {{{ [manager createDirectoryAtPath:path withIntermediateDirectories:NO attributes:nil error:nil] }}}
	if not v:
		Error.throw("failedToCreateDirectory", path)
}

func isLink override stub as bool
func createDirectoryRecursive override stub throws Exception
func removeDirectory override stub throws Exception as bool

func getPath override as string
{
	if not path:
		return ""
	return path
}

func remove override throws Exception
{
	if not lang "objc" as bool {{{ [manager removeItemAtPath:path error:nil] }}}:
		Error.throw("failedToRemoveFile", path)
}

func getBasename override as string:
	return String.safeString(lang "objc" as string {{{ [manager displayNameAtPath:path] }}})

func getContentsBuffer override as buffer
{
	var rr = getMyReader()
	return rr.readAll()
}
