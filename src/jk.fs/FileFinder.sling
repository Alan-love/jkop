
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Iterator<File>:

class Pattern
{
	var pattern as string?
	var suffix as string?
	var prefix as string?

	func setPattern(pattern as string) as this
	{
		this.pattern = pattern
		if String.startsWith(pattern, "*"):
			suffix = String.getEndOfString(pattern, 1)
		if String.endsWith(pattern, "*"):
			prefix = String.getSubString(pattern, 0, String.getLength(pattern) - 1)
		return this
	}

	func match(check as string) as bool
	{
		if pattern == check:
			return true
		if suffix && String.endsWith(check, suffix):
			return true
		if prefix && String.startsWith(check, prefix):
			return true
		return false
	}
}

func forRoot(root as File) static as this:
	return new this() {
		root root
	}

prop root as File
prop includeMatchingDirectories = false
prop includeDirectories = false

var patterns = new vector<Pattern>
var excludePatterns = new vector<Pattern>
var stack as Stack<Iterator<File>>?
var nextValue as File?

func addPattern(pattern as string) as this
{
	patterns += new Pattern().setPattern(pattern)
	return this
}

func addExcludePattern(pattern as string) as this
{
	excludePatterns += new Pattern().setPattern(pattern)
	return this
}

func matchPattern(file as File) as bool
{
	if Vector.getSize(patterns) < 1:
		return true
	var filename = file.getBasename()
	foreach pattern in patterns {
		if pattern.match(filename):
			return true
	}
	return false
}

func matchExcludePattern(file as File) as bool
{
	if Vector.getSize(excludePatterns) < 1:
		return false
	var filename = file.getBasename()
	foreach pattern in excludePatterns {
		if pattern.match(filename):
			return true
	}
	return false
}

func tryGetNextValue as File?
{
	if not stack {
		stack = new Stack<Iterator<File>>()
		stack.push(root.entries())
	}
	loop {
		var entries = stack.peek()
		if not entries:
			break
		if entries.hasNext() == false {
			stack.pop()
			continue
		}
		var e = entries.next()
		if matchExcludePattern(e) {
			nop // skip
		}
		else if e.isFile() {
			if matchPattern(e):
				return e
		}
		else if includeMatchingDirectories && e.isDirectory() && matchPattern(e) {
			return e
		}
		else if e.isDirectory() && e.isLink() == false {
			var ees = e.entries()
			stack.push(ees)
			if includeDirectories:
				return e
		}
	}
	return null
}

func next as File
{
	if nextValue {
		var v = nextValue
		nextValue = null
		return v
	}
	var v = tryGetNextValue()
	if not v:
		Error.throw("noMoreFilesFound", null)
	return v
}

func hasNext as bool
{
	if not nextValue:
		nextValue = tryGetNextValue()
	if nextValue:
		return true
	return false
}
