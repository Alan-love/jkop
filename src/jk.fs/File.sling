
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.os
import jk.io

class is StringObject abstract:

description [[
	The File class is used to access and manipulate the filesystem of the current
	environment. Despite the name of the class, this class is used to manipulate all
	kinds of filesystem entries, including files, directories, symbolic links, block
	devices, etc., depending on the underlying platform.
]]

func asValueOrNull(obj as dynamic?) static as this?
{
	description [[
		Convert or cast the given parameter object to a File object. Returns null if
		conversion is not possible.
	]]
	if obj == null:
		return null
	if obj is this:
		return obj as! this
	var ss = String.asValueOrNull(obj)
	if ss:
		return forPath(ss)
	return null
}

func asValueOrThrowError(o as dynamic?) static as this
{
	description [[
		Convert or cast the given parameter object to a File object. Throws an exception
		if conversion is not possible.
	]]
	var v = asValueOrNull(o)
	if not v:
		Error.throw("notFileObject", o)
	return v
}

func asValueVectorOrNull(obj as dynamic?) static as vector<File>?
{
	description [[
		Convert or cast the given parameter object to a vector of File objects. Returns
		null if the conversion is not possible.
	]]
	if obj == null:
		return null
	var it = assert DynamicObject.iterate(obj)
	var v = new vector<File>
	foreach oo in it {
		var ff = asValueOrNull(oo)
		if ff:
			v += ff
	}
	return v
}

func asValueVectorOrThrowError(o as dynamic) static as vector<File>
{
	description [[
		Convert or cast the given parameter object to a vector of File objects. Throws
		an exception if the conversion is not possible.
	]]
	var it = DynamicObject.iterate(o)
	if not it:
		Error.throw("notIterateable", o)
	var v = new vector<File>
	foreach oo in it:
		v += asValueOrThrowError(oo)
	return v
}

func forPath(path as string) static as this
{
	description [[
		Creates a new instance of the File object, representing the given path,
		utilizing the path naming notation of the underlying platform. Essentially, this
		means that a path name like "C:\Users\Me\this.txt" would be valid on Windows,
		and a path name like "/home/me/this.txt" would be valid on a Unix-like operating
		system, such as macOS or Linux. Throws an exception in case of errors.
	]]
	IFDEF "target_java" {
		return FileForJava.forPath(path)
	}
	ELSE IFDEF "target_dotnet_cs" {
		return FileForDotnetCS.forPath(path)
	}
	ELSE IFDEF "target_objc" {
		return FileForObjC.forPath(path)
	}
	ELSE IFDEF "target_node_js" {
		return FileForNodeJS.forPath(path)
	}
	ELSE IFDEF "target_sushi" {
		return FileForSushi.forPath(path)
	}
	ELSE IFDEF "target_kotlin" {
		return FileForKotlin.forPath(path)
	}
	ELSE IFDEF "target_swift" {
		return FileForSwift.forPath(path)
	}
	ELSE IFDEF "target_browser_js" {
		return FileForBrowserJS.forPath(path)
	}
	ELSE {
		ERROR "notImplemented"
	}
}

func forRawPath(path as string) static as this
{
	description [[
		Creates a new instance of the File object for the given path and keeps the given
		path. While the forPath() method will attempt to follow symbolic links, this
		method does not and will preserve the given path even if it points to a symbolic
		link rather than the actual file.
	]]
	IFDEF "target_sushi" {
		return FileForSushi.forRawPath(path)
	}
	ELSE {
		return forPath(path)
	}
}

func forRelativePath(path as string, relativeTo as this, alwaysSupportWindowsPathnames as bool = false) static as this
{
	description [[
		Creates a new instance of the File object, representing the given path that can
		be found inside (or relative to) the given "relativeTo" file object. Eg. if you
		pass a path value "test.txt" and a relativeTo file instance representing the
		directory "C:\Users\Me", the created file object would now be representative of
		"C:\Users\Me\test.txt". This function can support both Windows-style (backslash)
		and Unix-style (forward slash) pathname notations: Forward-slash notation always
		works automatically on all platforms, and backslash-notation on Windows-based
		platforms. To support backslash-notation on non-Windows-platforms, supply "true"
		as the value for the "alwaysSupportWindowsPathnames" parameter. Throws an
		exception in case of errors.
	]]
	if PathInfo.isAbsolutePath(path):
		return forPath(path)
	var sep = PathInfo.getPathSeparator()
	// Trick here: This way we can support forward slashes even on Windows
	if sep != '/' {
		if String.getIndexOfCharacter(path, sep) < 0 && String.getIndexOfCharacter(path, '/') >= 0:
			sep = '/'
	}
	else {
		// Trick here: This way we can support backslashes even on non-Windows
		if alwaysSupportWindowsPathnames {
			if String.getIndexOfCharacter(path, sep) < 0 && String.getIndexOfCharacter(path, '\\') >= 0:
				sep = '\\'
		}
	}
	var f = relativeTo
	var comps = String.split(path, sep)
	foreach comp in comps {
		if String.isEmpty(comp):
			continue
		f = f.entry(comp)
	}
	return f
}

func entry(name as string) abstract as this
{
	description [[
		Returns a new file object that represents a file with a given name that is
		inside the directory represented by the current object. NOTE: The given file
		name should not include file separator characters (either backslash or forward
		slash, depending on the current platform). Rather, to access nested directories,
		one should call entry() multiple times. Eg. not like this: myDir.entry("a/b/c"),
		but like this: myDir.entry("a").entry("b").entry("c")
	]]
}

func rawEntry(name as string) virtual as this
{
	description [[
		Returns a new file object that represents a file with a given name that is
		inside the directory represented by the current object, very much like the
		similar entry() method. However, while entry() will try to follow symbolic
		links, this method does not, and rather keeps the given filename as is, without
		modifications.
	]]
	return entry(name)
}

func entries abstract as Iterator<this>
{
	description [[
		Returns an Iterator object that represents all filesystem entries inside the
		directory represented by the current object. Each entry given by the Iterator
		represents a file or directory that was found inside the directory.
	]]
}

func move(dest as this, replace as bool) abstract
{
	description [[
		Moves the filesystem entry represented by the current object to a new location
		that is represented by the "dest" parameter. If "replace" is "true", then any
		existing filesystem entry will be deleted and replaced with the current one.
		Otherwise an error status will occur.
	]]
}

func touch abstract
{
	description [[
		Touches the currently represented filesystem entry. This means: If the entry
		currently exists, then its "last modified" timestamp value will be updated to
		reflect the current time. Otherwise, the entry is created. In either case, the
		modification timestamp will reflect the current time after this operation.
	]]
}

func read abstract as FileReader
{
	description [[
		Starts reading the contents of the file, and returns a FileReader object that
		can be used to access the contents.
	]]
}

func write abstract as FileWriter
{
	description [[
		Starts writing to the contents of the file, and returns a FileWriter object that
		can be used to perform write operations. This method always truncates the file
		if it has existing contents.
	]]
}

func append abstract as FileWriter
{
	description [[
		Starts writing to the contents of the file, and returns a FileWriter object that
		can be used to perform write operations. If the file has existing contents, they
		will be preserved, and any contents written using the FileWriter object will be
		appended to the existing contents.
	]]
}

func stat abstract as FileInfo
{
	description [[
		Queries for detailed information about the file, and returns a FileInfo object
		that can be used to access the information. NOTE: This method will always return
		a valid FileInfo object (never a null value). To test if a file exists, call the
		exists() method of the returned object.
	]]
}

func createDirectory abstract
{
	description [[
		Creates a new directory on the filesystem using the path represented by the
		current object. If any parent directory is not yet existing, this method will
		fail. To automatically create also parent directories, see
		createDirectoryRecursive()
	]]
}

func createDirectoryRecursive abstract
{
	description [[
		Creates a new directory on the filesystem using the path represented by the
		current object. Will also create all parent directories that may not yet be
		existing.
	]]
}

func removeDirectory abstract
{
	description [[
		Removes the directory represented by the current object. If the filesystem entry
		does not exist or is not a directory, this method will fail.
	]]
}

func getPath abstract as string
{
	description [[
		Gets a string representation of the fully qualified pathname that this File
		object represents.
	]]
}

func remove abstract
{
	description [[
		Removes the file or other non-directory filesystem entry that this object points
		to. If the entry does not exist or is a directory, this method will fail.
	]]
}

func makeExecutable abstract
{
	description [[
		Makes the current file executable, if possible with regards to the semantics of
		the underlying platform. In practice, this means setting the +x (executable)
		attribute on Unix-like operating systems.
	]]
}

func getRelativePath(baseFile as this, prefix as string?) virtual as string?
{
	description [[
		Gets a string representation of the pathname that this File object represents.
		The returned string is returned as relative to the base directory that is given
		as a parameter (if this file is indeed inside the base directory) or null if
		this file is not inside the given directory. If the prefix parameter is not
		null, then any occurrence of the base directory in the beginning of the path
		will be replaced with the contents of the prefix parameter.
	]]
	var vp = getPath()
	var bp = baseFile.getPath()
	while String.endsWith(bp, "/") || String.endsWith(bp, "\\"):
		bp = String.getSubString(bp, 0, String.getLength(bp) - 1)
	if String.startsWith(vp, bp .. "/") || String.startsWith(vp, bp .. "\\") {
		if prefix:
			return prefix .. String.getEndOfString(vp, String.getLength(bp))
		return String.getEndOfString(vp, String.getLength(bp) + 1)
	}
	return null
}

func getRelativePathOrBasename(baseFile as this, prefix as string?) virtual as string
{
	description [[
		Gets a string representation of the pathname that this File object represents.
		The returned string is returned as relative to the base directory that is given
		as a parameter (if this file is indeed inside the base directory) or only the
		basename of the file if this file is not inside the given directory. If the
		prefix parameter is not null, then any occurrence of the base directory in the
		beginning of the path will be replaced with the contents of the prefix
		parameter.
	]]
	var v = getRelativePath(baseFile, prefix)
	if v:
		return v
	return getBasename()
}

func rename(newname as string, replace as bool) virtual
{
	description [[
		Renames the current filesystem entry, and changes its name to the string given
		as parameter "newname". If a filesystem entry with that name already exists and
		"replace" parameter is "true", then the existing entry will be replaced with the
		current entry.
	]]
	move(forRelativePath(newname, getParent()), replace)
}

func writeFromReader(reader as Reader, doAppend as bool) virtual
{
	description [[
		Writes to the current file, getting the contents from the given reader object.
		This will read from the reader until EOF (until read() returns less than 1), and
		writes all contents to the current file. If doAppend is not true, the contents
		of the current file will be truncated prior to writing.
	]]
	var buffer = Buffer.allocate(1024)
	var writer as FileWriter?
	if doAppend {
		writer = append()
	}
	else {
		writer = write()
	}
	loop {
		var r = reader.read(buffer)
		if r < 1:
			break
		var w = writer.write(buffer, r)
		if w < r {
			writer.close()
			Error.throw("failedToWriteToFile", this)
		}
	}
	writer.close()
}

func createFifo virtual
{
	description [[
		Creates a filesystem entry for the currently repre.issented object as a special
		"FIFO" type file (first in, first out) on platforms that support it (which are
		generally Unix-like operating systems).
	]]
	ERROR "notImplemented"
}

func isExecutable virtual as bool
{
	description [[
		Returns true if the file represented by the current object is possible to be
		executed on the current platform (ie. if a ProcessLauncher instance can be used
		to execute the file). Eg. on Windows, this would be dependent on the file name
		extension, and on Unix-based platforms, would be depenedent on the "execute"
		flag on the file attributes.
	]]
	IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_android" {
		return stat().executable
	}
	ELSE IFDEF "target_darwin" {
		return stat().executable
	}
	ELSE {
		if OS.isWindows():
			return hasExtension("exe") || hasExtension("bat") || hasExtension("cmd") || hasExtension("com")
		return stat().executable
	}
}

func exists virtual as bool
{
	description [[
		Checks if the filesystem entry represented by the current object is existing in
		the filesystem. This method returns true if any type of filesystem entry exists,
		whether it is a file, directory, or some other type of entry.
	]]
	var fi = stat()
	return fi.type != FileInfo.FILE_TYPE_UNKNOWN
}

func isIdentical(file as this) virtual as bool
{
	description [[
		Checks if the contents of the current file and the one given as parameter are
		completely matching (byte per byte comparison).
	]]
	assert exists()
	assert file.exists()
	var myrd = read()
	var oord = file.read()
	var mybuf = Buffer.allocate(1024)
	var oobuf = Buffer.allocate(1024)
	var v = true
	while v {
		var myr = myrd.read(mybuf)
		var oor = oord.read(oobuf)
		if myr != oor {
			v = false
		}
		else {
			if myr < 1:
				break
			for(var n = 0 ; n < myr ; n++) {
				IFDEF "target_objc" {
					if Buffer.getByte(mybuf, n) != Buffer.getByte(oobuf, n):
						v = false
				}
				ELSE IFDEF "target_kotlin" {
					v = lang "kotlin" as bool {{{ if (mybuf!!.get(n) != oobuf!!.get(n)) false else true }}}
				}
				ELSE {
					if mybuf[n] != oobuf[n]:
						v = false
				}
			}
		}
	}
	myrd.close()
	oord.close()
	return v
}

class ReadLineIterator is Iterator<string>
{
	prop reader as PrintReader

	func next as string
	{
		var v = reader.readLine()
		if v == null {
			reader.close()
			Error.throw("noMoreLinesToRead", reader)
		}
		return v
	}

	func hasNext as bool:
		return not reader.hasEnded()
}

func readLines as Iterator<string>
{
	description [[
		Reads the complete file contents, treats the contents as a UTF-8 encoded file,
		and returns the complete contents as an Iterator that returns a series of
		strings, each string representing one line of text in the file. The line
		delimiter character '\n' determines where the lines are separated.
	]]
	return new ReadLineIterator() {
		reader PrintReader.forReader(read())
	}
}

func readLinesVector as vector<string>
{
	description [[
		Reads the complete file contents, treats the contents as a UTF-8 encoded file,
		and returns the complete conents as a vector of strings, each string
		representing one line of text in the file. The line delimiter character '\n'
		determines where the lines are separated.
	]]
	var v = new vector<string>
	foreach line in readLines():
		v += line
	return v
}

func hasChangedSince(originalTimeStamp as long) as bool
{
	description [[
		Checks if the file has been modified since the given timestamp.
	]]
	var nts = getLastModifiedTimeStamp()
	if nts > originalTimeStamp:
		return true
	return false
}

func getLastModifiedTimeStamp as long
{
	description [[
		Gets the last modification timestamp of this file as a Unix timestamp (number of
		seconds since January 1, 1970).
	]]
	if isFile() == false:
		return 0
	return stat().modifyTime
}

func compareModificationTime(bf as this) virtual as int
{
	description [[
		Compares the last modification time of the current object to that of the other
		object given as parameter. Returns -1 if the current file was modified prior to
		that given as parameter, 0 if the modification timestamps of both files are
		equals, or 1 if the current file was modified after that given as parameter.
	]]
	var myts = getLastModifiedTimeStamp()
	var bfts = bf.getLastModifiedTimeStamp()
	if myts < bfts:
		return -1
	if myts > bfts:
		return 1
	return 0
}

func isNewerThan(bf as this) virtual as bool
{
	description [[
		Checks if this file is newer than the one specified as a parameters (compares
		the modification timestamps of the two files).
	]]
	return compareModificationTime(bf) > 0
}

func isOlderThan(bf as this) virtual as bool
{
	description [[
		Checks if this file is older than the one specified as a parameters (compares
		the modification timestamps of the two files).
	]]
	return compareModificationTime(bf) < 0
}

func isSame(file as this) virtual as bool
{
	description [[
		Checks if this file represents the same file as the one given as parameter.
		NOTE: This checks if the two objects are referencing the same exact file. This
		does not compare the contents of the files (for that, use isIdentical()).
	]]
	var path = getPath()
	if path == file.getPath():
		return true
	return false
}

func removeRecursive virtual
{
	description [[
		Removes the filesystem entry that is referenced by this object, including any
		children, contained files or subdirectories it may have.
	]]
	var finfo = stat()
	if finfo.isDirectory() == false || finfo.isLink() == true {
		remove()
		return
	}
	foreach f in entries():
		f.removeRecursive()
	removeDirectory()
}

func isFile virtual as bool
{
	description [[
		Returns true if this object points to an existing file on the filesystem.
	]]
	var st = stat()
	return st.isFile()
}

func isDirectory virtual as bool
{
	description [[
		Returns true if this object points to an existing directory on the filesystem.
	]]
	var st = stat()
	return st.isDirectory()
}

func isLink virtual as bool
{
	description [[
		Returns true if this object points to an existing symbolic link on the
		filesystem (if symbolic links are at all supported on the current operating
		system).
	]]
	var st = stat()
	return st.isLink()
}

func getSize virtual as long
{
	description [[
		Returns the size in bytes of the current file.
	]]
	return stat().size
}

func setMode(mode as int) virtual
{
	description [[
		Sets the mode permissions of this file. The implementation and functionality of
		this is system-dependent, and generally would refer to the Unix style permission
		flags.
	]]
	ERROR "notImplemented"
}

func setOwnerUser(uid as int) virtual
{
	description [[
		Sets the user id (uid) of the owner of this file. Only applicable if the
		underlying platform supports numerical user ids (usually Unix-like operating
		systems).
	]]
	ERROR "notImplemented"
}

func setOwnerGroup(gid as int) virtual
{
	description [[
		Sets the group id (gid) of the owner of this file. Only applicable if the
		underlying platform supports numerical group ids (usually Unix-like operating
		systems).
	]]
	ERROR "notImplemented"
}

func withExtension(ext as string) virtual as this
{
	description [[
		Returns a new file object that represents the same path as the current object,
		but with a given filename extension added to the file name. Eg. the following
		would be true: File.forPath("super").withExtension("txt") = "super.txt".
	]]
	var bn = getBasename()
	return getSibling(bn .. "." .. ext)
}

func asExecutable virtual as this
{
	description [[
		Returns a new file object that represents the same path as the current object,
		but converted into executable format of the same, if applicable. In practice,
		this adds the executable filename extension "exe", "com", "bat" or "cmd" on a
		Windows based platform, if such a file exists. While this would have no effect
		on a Unix-like operating system, you can use this for cross platform
		compatibility between Windows and other operating systems.
	]]
	IFDEF "target_android" {
		return this
	}
	ELSE IFDEF "target_darwin" {
		return this
	}
	ELSE IFDEF "target_browser" {
		return this
	}
	ELSE {
		if OS.isWindows() {
			if hasExtension("exe") == false && hasExtension("bat") == false && hasExtension("cmd") == false && hasExtension("com") == false {
				var exe = withExtension("exe")
				if exe.isFile():
					return exe
				var bat = withExtension("bat")
				if bat.isFile():
					return bat
				var cmd = withExtension("cmd")
				if cmd.isFile():
					return cmd
				var com = withExtension("com")
				if com.isFile():
					return com
				return exe
			}
		}
		return this
	}
}

func getParent virtual as this
{
	description [[
		Returns the parent directory of the currently referenced file or directory.
	]]
	return forPath(directoryName())
}

func getSibling(name as string) virtual as this
{
	description [[
		Returns a new file object that references another file in the same directory as
		the current one, but with a different name, as supplied in the parameter. If
		name is null, then returns the parent directory.
	]]
	return getParent().entry(name)
}

func extension virtual as string?
{
	description [[
		Returns the filename extension (if any) of the current file as a string. Eg.
		File.forPath("test.exe").extension() would return "exe". Returns null if the
		file has no extension.
	]]
	var bn = getBasename()
	var dot = String.getLastIndexOfCharacter(bn, '.')
	if dot < 0:
		return null
	return String.getEndOfString(bn, dot + 1)
}

func hasExtension(ext as string) virtual as bool
{
	description [[
		Checks if this filename has the given extension. Eg.
		File.forPath("test.exe").hasExtension("exe") would return true.
	]]
	var xx = assert extension()
	return String.equalsIgnoreCase(xx, ext)
}

func directoryName virtual as string
{
	description [[
		Returns the name of the directory (as a string) where the current file is in.
	]]
	var path = getPath()
	var delim = PathInfo.getPathSeparator()
	var dp = String.getLastIndexOfCharacter(path, delim)
	if delim != '/' {
		var sdp = String.getLastIndexOfCharacter(path, '/')
		if sdp > dp:
			dp = sdp
	}
	if dp < 0:
		return "."
	return String.getSubString(path, 0, dp)
}

func getBasename virtual as string
{
	description [[
		Returns the name of the current file, excluding the directory path.
	]]
	var path = getPath()
	var delim = PathInfo.getPathSeparator()
	if String.endsWith(path, String.forCharacter(delim)):
		path = String.getSubString(path, 0, String.getLength(path) - 1)
	if delim != '/' && String.endsWith(path, "/"):
		path = String.getSubString(path, 0, String.getLength(path) - 1)
	var dp = String.getLastIndexOfCharacter(path, delim)
	if delim != '/' {
		var sdp = String.getLastIndexOfCharacter(path, '/')
		if sdp > dp:
			dp = sdp
	}
	if dp < 0:
		return path
	return String.getEndOfString(path, dp + 1)
}

func getBasenameWithoutExtension virtual as string
{
	description [[
		Returns the name of the current file, excluding the directory path and also
		excluding the file extension, if any.
	]]
	var bn = getBasename()
	var dot = String.getLastIndexOfCharacter(bn, '.')
	if dot < 0:
		return bn
	return String.getSubString(bn, 0, dot)
}

func copyFileTo(dest as this)
{
	description [[
		Copies the currently referenced file to a new given file, defined by the "dest"
		parameter. NOTE: As the name suggests, this does not copy directories. This
		method is intended solely to copy an individual file.
	]]
	if this.isSame(dest):
		return
	var reader as FileReader?
	var writer as FileWriter?
	try {
		var buf = Buffer.allocate(4096 * 4)
		reader = this.read()
		writer = dest.write()
		var n = 0
		while (n = reader.read(buf)) > 0 {
			var nr = writer.write(buf, n)
			if nr != n {
				dest.remove()
				Error.throw("failedToWriteAllBytes", null)
			}
		}
		var fi = this.stat()
		var mode = fi.mode
		if mode != 0:
			dest.setMode(mode)
	}
	catch e {
		throw e
	}
	finally {
		var rc = reader as Closable
		if rc:
			rc.close()
		var wc = writer as Closable
		if wc:
			wc.close()
	}
}

func copyFileOrDirectoryTo(dest as this)
{
	description [[
		Copies the currently referenced File object (which may be either a file or a
		directory) to a new given target path, defined by the "dest" parameter.
	]]
	if isFile() {
		copyFileTo(dest)
		return
	}
	if isDirectory() {
		dest.createDirectoryRecursive()
		foreach nsrc in entries() {
			var ndest = dest.entry(nsrc.getBasename())
			nsrc.copyFileOrDirectoryTo(ndest)
		}
		return
	}
	Error.throw("notFileOrDirectory", this)
}

func setContentsString(str as string, encoding as string) virtual
{
	description [[
		Truncates and replaces the contents of the given filesystem entry. after
		successful completion, the contents of the "str" variable will become the new
		contents of the file. The file contents will be encoded using the character
		encoding specified.
	]]
	setContentsBuffer(String.toBuffer(str, encoding))
}

func setContentsUTF8(str as string) virtual
{
	description [[
		Truncates and replaces the contents of the given filesystem entry. after
		successful completion, the contents of the "str" variable will become the new
		contents of the file, encoded using the UTF-8 character encoding.
	]]
	setContentsBuffer(String.toUTF8Buffer(str))
}

func setContentsBuffer(buffer as buffer) virtual
{
	description [[
		Truncates and replaces the contents of the given filesystem entry. after
		successful completion, the contents of the "buffer" variable will become the new
		contents of the file.
	]]
	var writer = write()
	var sz = (sizeof buffer) as! int
	if writer.write(buffer, sz) < sz {
		writer.close()
		Error.throw("failedToWriteAllBytes", this)
	}
	writer.close()
}

func getContentsString(encoding as string) virtual as string
{
	description [[
		Reads the entire contents of the file and returns them as a string object. The
		file contents are decoded using the specified character encoding.
	]]
	return String.forBuffer(getContentsBuffer(), encoding)
}

func getContentsUTF8 virtual as string
{
	description [[
		Reads the entire contents of the file and returns them as a string object. The
		file contents are decoded using the UTF-8 character encoding. If the file does
		not exist or if any other error is encountered, this method throws an error.
	]]
	return String.forUTF8Buffer(getContentsBuffer())
}

func tryGetContentsUTF8 virtual as string?
{
	description [[
		Reads the entire contents of the file and returns them as a string object. The
		file contents are decoded using the UTF-8 character encoding. If the file does
		not exist or if any other error is encountered, this method returns null.
	]]
	try {
		return getContentsUTF8()
	}
	catch e {
	}
	return null
}

func getContentsBuffer virtual as buffer
{
	description [[
		Reads the entire contents of the file and returns them as a buffer object. If
		the file does not exist or if any other error is encountered, this method throws
		an error. This method will return a valid null value if the file exists and is
		readable but does not have any contents (zero-size file). This is not an error
		condition.
	]]
	var reader = read()
	var sz = reader.getSize()
	if sz < 1 {
		reader.close()
		return Buffer.allocate(0)
	}
	var b = Buffer.allocate(sz)
	var rsz = reader.read(b)
	reader.close()
	if rsz < sz:
		Error.throw("failedToReadFromFile", this)
	return b
}

func getContentsBufferIfExists virtual as buffer?
{
	description [[
		Reads the entire contents of the file and returns them as a buffer object. If
		the file does not exist, this method returns null instead of throwing an error.
		Any other errors are still thrown the same way as with getContentsBuffer().
	]]
	if not exists():
		return null
	return getContentsBuffer()
}

func toString as string
{
	description [[
		Returns the representation of this object as a string.
	]]
	return getPath()
}
