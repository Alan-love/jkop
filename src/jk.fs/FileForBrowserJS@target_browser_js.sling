
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is File private:

class MyFileReader is Reader is FileReader
{
	pvar key as string?

	var buffReader as BufferReader?

	func read(buffer as buffer) implement throws Exception as int
	{
		var data as string?
		if not buffReader {
			lang "js" {{{
				data = window.localStorage.getItem(this.key);
			}}}
			if not data:
				Error.throw("failedToReadFile", key)
			var buf = String.toUTF8Buffer(data)
			buffReader = BufferReader.forBuffer(buf)
		}
		return buffReader.read(buffer)
	}
}

class MyFileWriter is Writer is FileWriter
{
	pvar key as string?
	pvar isAppend as bool

	var buffWriter as BufferWriter?

	func write(buf as buffer, size as int) implement throws Exception as int
	{
		if not buffWriter:
			buffWriter = new BufferWriter()
		return buffWriter.write(buf, size)
	}

	func close implement
	{
		assert buffWriter
		lang "js" {{{
			if(this.isAppend == true) {
				var data = window.localStorage.getItem(this.key);
				var buffer = JkLangBuffer.append(JkLangString.toUTF8Buffer(data), this.buffWriter.getBuffer());
				window.localStorage.setItem(this.key, JkLangString.forUTF8Buffer(buffer));
			}
			else {
				window.localStorage.setItem(this.key, this.buffWriter.getBuffer());
			}
		}}}
	}
}

pvar key as string?

func forPath(path as string) static as File
{
	var v = new this()
	v.setKey(path)
	return v
}

func read override throws Exception as FileReader
{
	if lang "js" as bool {{{ typeof(Storage) == "undefined" }}}:
		Error.throw("noStorageSupport")
	var v = new MyFileReader()
	v.setKey(key)
	return v
}

func write override throws Exception as FileWriter
{
	if lang "js" as bool {{{ typeof(Storage) == "undefined" }}}:
		Error.throw("noStorageSupport")
	var v = new MyFileWriter()
	v.setKey(key)
	return v
}

func append override throws Exception as FileWriter
{
	if lang "js" as bool {{{ typeof(Storage) == "undefined" }}}:
		Error.throw("noStorageSupport")
	var v = new MyFileWriter()
	v.setKey(key)
	v.setIsAppend(true)
	return v
}

func entry(name as string) override as File:
	ERROR NOT_IMPLEMENTED

func makeExecutable override throws Exception:
	ERROR NOT_IMPLEMENTED

func move(dest as File, replace as bool) override throws Exception:
	ERROR NOT_IMPLEMENTED

func touch override throws Exception:
	ERROR NOT_IMPLEMENTED

func stat override as FileInfo:
	ERROR NOT_IMPLEMENTED

func exists override as bool:
	ERROR NOT_IMPLEMENTED

func isExecutable override as bool:
	return false

func createFifo override throws Exception:
	ERROR NOT_SUPPORTED

func createDirectory override throws Exception:
	ERROR NOT_IMPLEMENTED

func createDirectoryRecursive override throws Exception:
	ERROR NOT_IMPLEMENTED

func removeDirectory override throws Exception:
	ERROR NOT_IMPLEMENTED

func getPath override as string:
	ERROR NOT_IMPLEMENTED

func remove override throws Exception:
	ERROR NOT_IMPLEMENTED

func removeRecursive override throws Exception:
	ERROR NOT_IMPLEMENTED

func entries override throws Exception as Iterator<File>:
	ERROR NOT_IMPLEMENTED

func setMode(mode as int) override throws Exception:
	ERROR NOT_SUPPORTED

func setOwnerUser(uid as int) override throws Exception:
	ERROR NOT_SUPPORTED

func setOwnerGroup(gid as int) override throws Exception:
	ERROR NOT_SUPPORTED
