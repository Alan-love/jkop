
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is File:

class MyReader is FileReader is Reader is SizedReader is Closable is SeekableReader
{
	prop filename as string
	prop handle as [magical:FileHandle]
	prop size as long

	func getSize implement as long:
		return size

	func close implement:
		lang "swift" {{{
			handle.closeFile()
		}}}

	func setCurrentPosition(n as int64) implement as bool
	{
		lang "swift" (n) {{{
			handle.seek(toFileOffset: UInt64(n))
		}}}
		return true
	}

	func getCurrentPosition implement as int64:
		return lang "swift" as int64 {{{ Int64(bitPattern: handle.offsetInFile) }}}

	func read(buf as buffer) implement throws Exception as int
	{
		var mx = lang "swift" (buf) as int {{{ buf.getSize() }}}
		var fdata as [magical:Foundation.Data]?
		try {
			fdata = lang "swift" (handle, mx) as [magical:Foundation.Data]? {{{ try handle.read(upToCount: mx) }}}
		}
		catch e {
			Error.throw("failedToReadFromFile", filename, e)
		}
		if fdata == null:
			return 0
		var data = lang "swift" (fdata) as buffer {{{ JkLang.BufferValue.forData(fdata!) }}}
		var dlen = lang "swift" (data) as int {{{ data.getSize() }}}
		if dlen < 1:
			return 0
		Buffer.copyFrom(buf, data, 0, 0, dlen)
		return dlen
	}

	func readAll throws Exception as buffer
	{
		var fdata as [magical:Foundation.Data]?
		try {
			fdata = lang "swift" (handle) as [magical:Foundation.Data]? {{{ try handle.readToEnd() }}}
		}
		catch e {
			Error.throw("failedToReadFromFile", filename, e)
		}
		if fdata == null:
			return Buffer.allocate(0)
		return lang "swift" (fdata) as buffer {{{ JkLang.BufferValue.forData(fdata!) }}}
	}
}

class MyWriter is FileWriter is Writer is Closable is SeekableWriter
{
	prop filename as string
	prop handle as [magical:FileHandle]

	func write(buffer as buffer, size as int) implement throws Exception as int
	{
		var ptr = buffer
		if size >= 0 && size < Buffer.getSize(ptr):
			ptr = Buffer.getSubBuffer(ptr, 0, size)
		var v = Buffer.getSize(ptr)
		try {
			lang "swift" {{{
				try handle.write(contentsOf: ptr.data)
			}}}
		}
		catch e {
			Error.throw("failedToWriteToFile", filename, e)
		}
		return v
	}

	func setCurrentPosition(n as int64) implement as bool
	{
		lang "swift" (n) {{{
			handle.seek(toFileOffset: UInt64(n))
		}}}
		return true
	}

	func getCurrentPosition implement as int64:
		return lang "swift" as int64 {{{ Int64(bitPattern: handle.offsetInFile) }}}

	func close implement:
		lang "swift" {{{
			handle.closeFile()
		}}}
}

func forPath(path as string) static as File:
	return new this(path)

var path as string
var manager as [magical:FileManager]

ctor(path as string)
{
	this.path = lang "swift" (path) as string {{{ path.standardizingPath }}}
	this.manager = lang "swift" as [magical:FileManager] {{{ FileManager.default }}}
}

func entry(name as string) override as File:
	return new this(path .. "/" .. name)

func write override throws Exception as FileWriter:
	return getMyWriter(true)

func append override throws Exception as FileWriter:
	return getMyWriter(false)

func getMyReader private throws Exception as MyReader
{
	var handle = lang "swift" as [magical:FileHandle]? {{{ FileHandle(forReadingAtPath: path) }}}
	if not handle:
		Error.throw("failedToOpenFileForReading", path)
	return new MyReader() {
		filename path
		size getSize()
		handle handle
	}
}

func getMyWriter(truncate as bool) private throws Exception as MyWriter
{
	if truncate && exists():
		remove()
	if lang "swift" (path) as bool {{{ manager.createFile(atPath: path, contents: nil) }}} == false:
		Error.throw("failedToCreateFile", path)
	var handle = lang "swift" as [magical:FileHandle]? {{{ FileHandle(forWritingAtPath: path) }}}
	if not handle:
		Error.throw("failedToOpenFileForWriting", path)
	return new MyWriter() {
		filename path
		handle handle
	}
}

func read override throws Exception as FileReader:
	return getMyReader()

func getPath override as string:
	return path

func getContentsBuffer override throws Exception as buffer:
	return getMyReader().readAll()

func exists override as bool:
	return lang "swift" as bool {{{ manager.fileExists(atPath: path) }}}

func isExecutable override as bool:
	return lang "swift" as bool {{{ manager.isExecutableFile(atPath: path) }}}

func remove override throws Exception
{
	if isDirectory():
		Error.throw("cannotRemoveDirectory", path)
	try {
		lang "swift" {{{
			try manager.removeItem(atPath: path)
		}}}
	}
	catch e {
		Error.throw("failedToRemoveFile", path, e)
	}
}

func createDirectory override throws Exception
{
	try {
		lang "swift" {{{
			try manager.createDirectory(atPath: path, withIntermediateDirectories: false, attributes: nil)
		}}}
	}
	catch e {
		Error.throw("failedToCreateDirectory", path, e)
	}
}

func isDirectory override as bool
{
	var v as bool #mutated
	var dir as bool #mutated
	lang "swift" {{{
		var isDir: ObjCBool = false
		v = manager.fileExists(atPath:path, isDirectory:&isDir)
		dir = isDir.boolValue
	}}}
	if not v:
		return false
	return dir
}

func isFile override as bool
{
	var v as bool #mutated
	var dir as bool #mutated
	lang "swift" {{{
		var isDir: ObjCBool = false
		v = manager.fileExists(atPath:path, isDirectory:&isDir)
		dir = isDir.boolValue
	}}}
	if not v:
		return false
	if dir:
		return false
	return true
}

func stat override as FileInfo
{
	var exists as bool #mutated
	var isdir as bool #mutated
	lang "swift" {{{
		var isDirBool: ObjCBool = false
		exists = manager.fileExists(atPath:path, isDirectory:&isDirBool)
		isdir = isDirBool.boolValue
	}}}
	var v = new FileInfo() {
		file this
		exists exists
	}
	if exists {
		if isdir {
			v.type = FileInfo.FILE_TYPE_DIR
		}
		else {
			v.type = FileInfo.FILE_TYPE_FILE
		}
		lang "swift" {{{
			let adict = try? manager.attributesOfItem(atPath: path)
			if (adict != nil) {
				let dict = adict!
				let size = dict[FileAttributeKey.size] as? Int64
				if (size != nil) {
					v.size = size!
				}
				let creationDate = dict[FileAttributeKey.creationDate] as? Date
				if (creationDate != nil) {
					v.createTime = Swift.Int64(creationDate!.timeIntervalSince1970)
				}
				v.accessTime = 0
				let modificationDate = dict[FileAttributeKey.modificationDate] as? Date
				if (modificationDate != nil) {
					v.modifyTime = Swift.Int64(modificationDate!.timeIntervalSince1970)
				}
				let ownerAccountID = dict[FileAttributeKey.ownerAccountID] as? Int
				if (ownerAccountID != nil) {
					v.ownerUser = ownerAccountID!
				}
				let groupOwnerAccountID = dict[FileAttributeKey.groupOwnerAccountID] as? Int
				if (groupOwnerAccountID != nil) {
					v.ownerGroup = groupOwnerAccountID!
				}
				let posixPermissions = dict[FileAttributeKey.posixPermissions] as? NSNumber
				if (posixPermissions != nil) {
					v.mode = Int(posixPermissions!.int16Value)
				}
				v.executable = manager.isExecutableFile(atPath: path)
				let type = dict[FileAttributeKey.type] as? Swift.String
				if (type != nil && type! == FileAttributeType.typeSymbolicLink.rawValue) {
					v.link = true
				}
				else {
					v.link = false
				}
			}
		}}}
	}
	return v
}

func entries override throws Exception as Iterator<File>
{
	var v = new vector<File>
	try {
		lang "swift" {{{
			for ee in try manager.contentsOfDirectory(atPath: path) {
				v.append(entry(ee))
			}
		}}}
	}
	catch e {
		Error.throw("failedToReadDirectoryEntries", path, e)
	}
	return Vector.iterate(v)
}

func createDirectoryRecursive override throws Exception
{
	try {
		lang "swift" {{{
			try manager.createDirectory(atPath: path, withIntermediateDirectories: true, attributes: nil)
		}}}
	}
	catch e {
		Error.throw("failedToCreateDirectory", path, e)
	}
}

func removeDirectory override throws Exception
{
	if not isDirectory():
		Error.throw("notDirectory", path)
	var ee = entries()
	if ee.hasNext():
		Error.throw("directoryIsNotEmpty", path)
	removeRecursive()
}

func removeRecursive override throws Exception
{
	try {
		lang "swift" {{{
			try manager.removeItem(atPath: path)
		}}}
	}
	catch e {
		Error.throw("failedToRemoveRecursive", path, e)
	}
}

func move(dest as File, replace as bool) override throws Exception
{
	if dest.exists() {
		if replace == false:
			Error.throw("fileAlreadyExists", dest)
		dest.remove()
	}
	try {
		lang "swift" (path, dest) {{{
			try manager.moveItem(atPath: path, toPath: dest.getPath())
		}}}
	}
	catch e {
		Error.throw("failedToMoveFile", path, e)
	}
}

func touch override throws Exception
{
	if not exists() {
		setContentsUTF8("")
	}
	else {
		try {
			lang "swift" {{{
				try manager.setAttributes([FileAttributeKey.modificationDate: NSDate()], ofItemAtPath: path)
			}}}
		}
		catch e {
			Error.throw("failedToUpdateModificationTimeStamp", path, e)
		}
	}
}

func setMode(mode as int) override throws Exception:
	ERROR NOT_IMPLEMENTED

func setOwnerUser(uid as int) override throws Exception:
	ERROR NOT_IMPLEMENTED

func setOwnerGroup(gid as int) override throws Exception:
	ERROR NOT_IMPLEMENTED

func makeExecutable override throws Exception:
	ERROR NOT_IMPLEMENTED

func createFifo override throws Exception:
	ERROR NOT_IMPLEMENTED
