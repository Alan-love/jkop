
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class IconDirEntry
{
	var width public as uint8
	var height public as uint8
	var colors public as uint8
	var colorPlanes public as uint16
	var bitsPerPixel public as uint16
	var size public as int
	var offset public as int
}

func read(file as File) static as vector<RGBAImageBuffer>
{
	assert file
	assert file.hasExtension("ico")
	return read(file.getContentsBuffer())
}

func read(buffer as buffer) static as vector<RGBAImageBuffer>
{
	var data = buffer
	var size = SIZE data
	assert size > 6

	// Reading icon header

	var res1 = (data[1] << 8) | data[0] as uint16
	assert res1 == 0
	var type = (data[3] << 8) | data[2] as uint16
	var inum = (data[5] << 8) | data[4] as uint16
	assert size > (6 + (inum * 16))
	var n = 0
	var c = 6
	var entries = new vector<RGBAImageBuffer>
	loop {
		if n >= inum:
			break

		// Reading icon dir entry

		var iw = data[c+0] as uint8
		var ih = data[c+1] as uint8
		var cc = data[c+2] as uint8
		var rs = data[c+3] as uint8
		var cp = (data[c+5] << 8) | data[c+4] as uint16
		var bp = (data[c+7] << 8) | data[c+6] as uint16
		var sz = (data[c+11] << 24) | (data[c+10] << 16) | (data[c+9] << 8) | data[c+8] as int
		var of = (data[c+15] << 24) | (data[c+14] << 16) | (data[c+13] << 8) | data[c+12] as int
		c += 16
		n ++
		if rs != 0:
			continue
		var ee = new IconDirEntry()
		ee.width = iw
		ee.height = ih
		ee.colors = cc
		ee.colorPlanes = cp
		ee.bitsPerPixel = bp
		ee.size = sz
		ee.offset = of
		var buf = processEntry(ee, data)
		if buf {
			var ib = new RGBAImageBuffer()
			ib.setBuffer(buf)
			entries += ib
		}
	}
	return entries
}

func processEntry(entry as IconDirEntry, buffer as buffer) private static as buffer
{
	var size = entry.size
	var data = MALLOC size
	Buffer.copyFrom(data, buffer, entry.offset, 0, size)

	// Reading bitmap info header

	assert size > 40
	var c = 0
	var hs = (data[c+3] << 24) | (data[c+2] << 16) | (data[c+1] << 8) | data[c+0] as int
	var hw = (data[c+7] << 24) | (data[c+6] << 16) | (data[c+5] << 8) | data[c+4] as int
	var hh = (data[c+11] << 24) | (data[c+10] << 16) | (data[c+9] << 8) | data[c+8] as int
	var hp = (data[c+13] << 8) | data[c+12] as uint16
	var hb = (data[c+15] << 8) | data[c+14] as uint16
	var hc = (data[c+19] << 24) | (data[c+18] << 16) | (data[c+17] << 8) | data[c+16] as int
	var hi = (data[c+23] << 24) | (data[c+22] << 16) | (data[c+21] << 8) | data[c+20] as int
	var hx = (data[c+27] << 24) | (data[c+26] << 16) | (data[c+25] << 8) | data[c+24] as int
	var hy = (data[c+31] << 24) | (data[c+30] << 16) | (data[c+29] << 8) | data[c+28] as int
	var hu = (data[c+35] << 24) | (data[c+34] << 16) | (data[c+33] << 8) | data[c+32] as int
	var hm = (data[c+39] << 24) | (data[c+38] << 16) | (data[c+37] << 8) | data[c+36] as int
	c += 40
	assert hb == 8
	var nn = c + (256 * 4)
	var iw = entry.width
	var ih = entry.height
	var dd = MALLOC(iw * ih * 4)
	var pd = iw % 4 as int
	for(var y = 0; y < ih; y++) {
		for(var x = 0; x < iw; x++) {
			var ix = data[nn] as uint8
			var cx = c + ix * 4
			var ap = (x + y * iw) * 4
			Buffer.setByte(dd, ap+0, data[cx+2] as uint8)
			Buffer.setByte(dd, ap+1, data[cx+1] as uint8)
			Buffer.setByte(dd, ap+2, data[cx+0] as uint8)
			Buffer.setByte(dd, ap+3, 0x00)
			nn ++
		}
		nn += pd
	}
	if ih != hh {
		// FIXME
	}
	return dd
}
