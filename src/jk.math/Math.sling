
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

description [[
	The Math class provides various mathematical methods, functions and numerical
	constants.
]]

IFDEF "target_kotlin"
{
	depend "kotlin-import:kotlin.math.pow"
}

const M_PI = 3.14159265358979323846 // Constant value for PI
const M_PI_2 = 1.57079632679489661923 // Constant value for PI / 2
const M_PI_4 = 0.78539816339744830962 // Constant value for PI / 4
const M_1_PI = 0.31830988618379067154 // Constant value for 1 / PI
const M_2_PI = 0.63661977236758134308 // Constant value for 2 / PI
const M_2_SQRTPI = 1.12837916709551257390 // Constant value for 2 / sqrt(PI)
const M_SQRT2 = 1.41421356237309504880 // Constant value for sqrt(2)
const M_SQRT1_2 = 0.70710678118654752440 // Constant value for 1 / sqrt(2)
const HALF_AWAY_FROM_ZERO = 0 // Rounding mode for rounding halfway values away from zero
const HALF_TOWARD_ZERO = 1 // Rounding mode for rounding halfway values towards zero
const HALF_NEAREST_EVEN = 2 // Rounding mode for rounding halfway values to the nearest even number
const HALF_POSITIVE = 3 // Rounding mode for rounding halfway values towards positive infinite
const HALF_NEGATIVE = 4 // Rounding mode for rounding halfway values towards negative infinite

func toRadians(d as double) static as double
{
	description [[
		Convert degrees to radians.
	]]
	return (M_PI / 180) * d
}

func toDegrees(r as double) static as double
{
	description [[
		Convert radians to degrees.
	]]
	return (M_PI * r) / 180
}

func abs(d as double) static as double
{
	description [[
		Get the absolute value of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Abs(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.abs(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.abs(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ abs(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.abs(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Swift.abs(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:abs(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func absFloat(f as float) static as float
{
	description [[
		Get the absolute value of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (f) as float {{{ System.Math.Abs(f) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (f) as float {{{ java.lang.Math.abs(f) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (f) as float {{{ Math.abs(f) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (f) as float {{{ abs(f) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (f) as float {{{ kotlin.math.abs(f) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (f) as float {{{ Swift.abs(f) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (f) as float {{{ _math:fabs(f) }}}
	}
	ELSE {
		nop f
		ERROR NOT_IMPLEMENTED
	}
}

func absInt32(i as int32) static as int32
{
	description [[
		Get the absolute value of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (i) as int32 {{{ System.Math.Abs(i) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (i) as int32 {{{ java.lang.Math.abs(i) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (i) as int32 {{{ Math.abs(i) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (i) as int32 {{{ abs(i) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (i) as int32 {{{ kotlin.math.abs(i) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (i) as int32 {{{ Swift.abs(i) }}}
	}
	ELSE {
		nop i
		ERROR NOT_IMPLEMENTED
	}
}

func absInt64(l as int64) static as int64
{
	description [[
		Get the absolute value of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (l) as int64 {{{ System.Math.Abs(l) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (l) as int64 {{{ java.lang.Math.abs(l) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (l) as int64 {{{ Math.abs(l) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (l) as int64 {{{ abs(l) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (l) as int64 {{{ kotlin.math.abs(l) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (l) as int64 {{{ Swift.abs(l) }}}
	}
	ELSE {
		nop l
		ERROR NOT_IMPLEMENTED
	}
}

func acos(d as double) static as double
{
	description [[
		Get the inverse cosine of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Acos(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.acos(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as int64 {{{ Math.acos(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ acos(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.acos(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.acos(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:acos(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func asin(d as double) static as double
{
	description [[
		Get the inverse sine of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Asin(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.asin(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.asin(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ asin(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.asin(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.asin(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:asin(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func atan(d as double) static as double
{
	description [[
		Get the inverse tangent of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Atan(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.atan(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.atan(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ atan(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.atan(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.atan(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:atan(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func atan2(y as double, x as double) static as double
{
	description [[
		Returns the four-quadrant inverse tangent of the given numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (y, x) as double {{{ System.Math.Atan2(y,x) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (y, x) as double {{{ java.lang.Math.atan2(y,x) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (y, x) as double {{{ Math.atan2(y,x) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (y, x) as double {{{ atan2(y, x) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (y, x) as double {{{ kotlin.math.atan2(y, x) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (y, x) as double {{{ Foundation.atan2(y, x) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (y, x) as double {{{ _math:atan2(y, x) }}}
	}
	ELSE {
		nop y
		nop x
		ERROR NOT_IMPLEMENTED
	}
}

func ceil(d as double) static as double
{
	description [[
		Returns the smallest integer greater than or equal to the given number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Ceiling(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.ceil(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.ceil(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ ceil(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.ceil(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.ceil(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:ceil(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func cos(d as double) static as double
{
	description [[
		Returns the cosine of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Cos(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.cos(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.cos(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ cos(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.cos(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.cos(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:cos(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func cosh(d as double) static as double
{
	description [[
		Returns the hyperbolic cosine of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Cosh(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.cosh(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.cosh(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ cosh(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.cosh(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.cosh(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:cosh(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func exp(d as double) static as double
{
	description [[
		Returns e raised to the specified power.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Exp(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.exp(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.exp(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ exp(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.exp(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.exp(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:exp(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func floor(d as double) static as double
{
	description [[
		Returns the largest integer less than or equal to the given number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Floor(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.floor(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.floor(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ floor(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.floor(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.floor(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:floor(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func remainder(x as double, y as double) static as double
{
	description [[
		Returns the remainder resulting from the division of a specified number by
		another specified number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (x, y) as double {{{ System.Math.IEEERemainder (x,y) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (x, y) as double {{{ java.lang.Math.IEEEremainder(x,y) }}}
	}
	ELSE IFDEF "target_js" {
		var z as double
		z = (x % y)
		return z
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (x, y) as double {{{ fmod(x, y) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (x, y) as double {{{ Foundation.fmod(x, y) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (x, y) as double {{{ _math:remainder(x, y) }}}
	}
	ELSE {
		nop x
		nop y
		ERROR NOT_IMPLEMENTED
	}
}

func log(d as double) static as double
{
	description [[
		Returns the logarithm of a specified number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Log(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.log(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.log(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ log(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.log(d, kotlin.math.E) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.log(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:log(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func log10(d as double) static as double
{
	description [[
		Returns the base 10 logarithm of a specified number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Log10(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.log10(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.log10(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ log10(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.log10(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.log10(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:log10(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func max(d1 as double, d2 as double) static as double
{
	description [[
		Returns the larger of two specified numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d1, d2) as double {{{ System.Math.Max(d1,d2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d1, d2) as double {{{ java.lang.Math.max(d1,d2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d1, d2) as double {{{ Math.max(d1,d2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = d1
		if d1 < d2:
			v = d2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d1, d2) as double {{{ kotlin.math.max(d1, d2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = d1
		if d1 < d2:
			v = d2
		return v
	}
	ELSE {
		nop d1
		nop d2
		ERROR NOT_IMPLEMENTED
	}
}

func maxFloat(f1 as float, f2 as float) static as float
{
	description [[
		Returns the larger of two specified numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (f1, f2) as float {{{ System.Math.Max(f1,f2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (f1, f2) as float {{{ java.lang.Math.max(f1,f2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (f1, f2) as float {{{ Math.max(f1,f2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = f1
		if f1 < f2:
			v = f2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (f1, f2) as float {{{ kotlin.math.max(f1, f2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = f1
		if f1 < f2:
			v = f2
		return v
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (f1, f2) as float {{{ _math:max_float(f1, f2) }}}
	}
	ELSE {
		nop f1
		nop f2
		ERROR NOT_IMPLEMENTED
	}
}

func maxInt32(i1 as int32, i2 as int32) static as int32
{
	description [[
		Returns the larger of two specified numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (i1, i2) as int32 {{{ System.Math.Max(i1,i2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (i1, i2) as int32 {{{ java.lang.Math.max(i1,i2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (i1, i2) as int32 {{{ Math.max(i1,i2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = i1
		if i1 < i2:
			v = i2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (i1, i2) as int32 {{{ kotlin.math.max(i1, i2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = i1
		if i1 < i2:
			v = i2
		return v
	}
	ELSE {
		nop i1
		nop i2
		ERROR NOT_IMPLEMENTED
	}
}

func maxInt64(l1 as int64, l2 as int64) static as int64
{
	description [[
		Returns the larger of two specified numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (l1, l2) as int64 {{{ System.Math.Max(l1,l2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (l1, l2) as int64 {{{ java.lang.Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (l1, l2) as int64 {{{ Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = l1
		if l1 < l2:
			v = l2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (l1, l2) as int64 {{{ kotlin.math.max(l1, l2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = l1
		if l1 < l2:
			v = l2
		return v
	}
	ELSE {
		nop l1
		nop l2
		ERROR NOT_IMPLEMENTED
	}
}

func min(d1 as double, d2 as double) static as double
{
	description [[
		Returns the smaller of two numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d1, d2) as double {{{ System.Math.Min(d1,d2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d1, d2) as double {{{ java.lang.Math.min(d1,d2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d1, d2) as double {{{ Math.min(d1,d2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = d1
		if d1 > d2:
			v = d2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d1, d2) as double {{{ kotlin.math.min(d1, d2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = d1
		if d1 > d2:
			v = d2
		return v
	}
	ELSE {
		nop d1
		nop d2
		ERROR NOT_IMPLEMENTED
	}
}

func minFloat(f1 as float, f2 as float) static as float
{
	description [[
		Returns the smaller of two numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (f1, f2) as float {{{ System.Math.Min(f1,f2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (f1, f2) as float {{{ java.lang.Math.min(f1,f2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (f1, f2) as float {{{ Math.min(f1,f2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = f1
		if f1 > f2:
			v = f2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (f1, f2) as float {{{ kotlin.math.min(f1, f2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = f1
		if f1 > f2:
			v = f2
		return v
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (f1, f2) as float {{{ _math:min_float(f1, f2) }}}
	}
	ELSE {
		nop f1
		nop f2
		ERROR NOT_IMPLEMENTED
	}
}

func minInt32(i1 as int32, i2 as int32) static as int32
{
	description [[
		Returns the smaller of two numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (i1, i2) as int32 {{{ System.Math.Min(i1,i2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (i1, i2) as int32 {{{ java.lang.Math.min(i1,i2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (i1, i2) as int32 {{{ Math.min(i1,i2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = i1
		if i1 > i2:
			v = i2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (i1, i2) as int32 {{{ kotlin.math.min(i1, i2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = i1
		if i1 > i2:
			v = i2
		return v
	}
	ELSE {
		nop i1
		nop i2
		ERROR NOT_IMPLEMENTED
	}
}

func minInt64(l1 as int64, l2 as int64) static as int64
{
	description [[
		Returns the smaller of two numbers.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (l1, l2) as int64 {{{ System.Math.Min(l1,l2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (l1, l2) as int64 {{{ java.lang.Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (l1, l2) as int64 {{{ Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = l1
		if l1 > l2:
			v = l2
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (l1, l2) as int64 {{{ kotlin.math.min(l1, l2) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = l1
		if l1 > l2:
			v = l2
		return v
	}
	ELSE {
		nop l1
		nop l2
		ERROR NOT_IMPLEMENTED
	}
}

func pow(x as double, y as double) static as double
{
	description [[
		Returns a specified number raised to the specified power.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (x, y) as double {{{ System.Math.Pow(x,y) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (x, y) as double {{{ java.lang.Math.pow(x,y) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (x, y) as double {{{ Math.pow(x,y) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (x, y) as double {{{ pow(x, y) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (x, y) as double {{{ x.toDouble().pow(y) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (x, y) as double {{{ Foundation.pow(x, y) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (x, y) as double {{{ _math:pow(x, y) }}}
	}
	ELSE {
		nop x
		nop y
		ERROR NOT_IMPLEMENTED
	}
}

func round(n as double) static as double
{
	description [[
		Rounds the given number to the nearest integer. For halfway cases where the
		difference from both possible values is exactly 0.5, this function uses the
		default mechanism of the underlying platform. This means that the exact behavior
		of halways cases varies between platforms. To have complete control over this,
		use the other round() method and specify the desired halfway behavior using the
		"mode" parameter.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (n) as double {{{ System.Math.Round(n) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (n) as double {{{ java.lang.Math.round(n) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (n) as double {{{ Math.round(n) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (n) as double {{{ round(n) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (n) as double {{{ kotlin.math.round(n) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (n) as double {{{ Foundation.round(n) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (n) as double {{{ _math:round(n) }}}
	}
	ELSE {
		nop n
		ERROR NOT_IMPLEMENTED
	}
}

func roundWithMode(d as double, mode as int) static as double
{
	description [[
		Rounds the given number to the nearest integer. For halway cases where the
		difference from both possible values is exactly 0.5, this function can behave in
		different ways, depending on the "mode" parameter that is given (see rounding
		mode constants).
	]]
	IFDEF "target_dotnet_cs" {
		if mode == HALF_AWAY_FROM_ZERO {
			return lang "cs" (d) as double {{{ System.Math.Round(d, System.MidpointRounding.AwayFromZero) }}}
		}
		else if mode == HALF_NEAREST_EVEN {
			return lang "cs" (d) as double {{{ System.Math.Round(d, System.MidpointRounding.ToEven) }}}
		}
	}
	ELSE IFDEF "target_java" {
		if mode == HALF_POSITIVE {
			return lang "java" (d) as double {{{ java.lang.Math.round(d) }}}
		}
		else if mode == HALF_NEAREST_EVEN {
			return lang "java" (d) as double {{{ java.lang.Math.rint(d) }}}
		}
	}
	ELSE IFDEF "target_js" {
		if mode == HALF_POSITIVE:
			return lang "js" (d) as double {{{ Math.round(d) }}}
	}
	ELSE IFDEF "target_objc" {
		if mode == HALF_AWAY_FROM_ZERO:
			return lang "objc" (d) as double {{{ round(d) }}}
	}
	ELSE IFDEF "target_swift" {
		if mode == HALF_AWAY_FROM_ZERO:
			return lang "swift" (d) as double {{{ Foundation.round(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		if mode == HALF_NEAREST_EVEN:
			return lang "lua" (d, mode) as double {{{ _math:round_with_mode(d, mode) }}}
	}
	var fd = floor(d)
	var dp = d - fd
	if dp < 0.5:
		return fd
	if dp > 0.5:
		return ceil(d)
	if mode == HALF_AWAY_FROM_ZERO {
		if d < 0:
			return fd
		return ceil(d)
	}
	if mode == HALF_TOWARD_ZERO {
		if d < 0:
			return ceil(d)
		return fd
	}
	if mode == HALF_NEAREST_EVEN {
		if ((fd as! int) % 2) == 0:
			return fd
		return ceil(d)
	}
	if mode == HALF_POSITIVE:
		return ceil(d)
	if mode == HALF_NEGATIVE:
		return fd
	return d
}

func sin(d as double) static as double
{
	description [[
		Returns the sine of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Sin(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.sin(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.sin(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ sin(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.sin(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.sin(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:sin(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func sinh(d as double) static as double
{
	description [[
		Returns the hyperbolic sine of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Sinh(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.sinh(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.sinh(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ sinh(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.sinh(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.sinh(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:sinh(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func sqrt(d as double) static as double
{
	description [[
		Returns the square root of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Sqrt(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.sqrt(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.sqrt(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ sqrt(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.sqrt(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.sqrt(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:sqrt(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func tan(d as double) static as double
{
	description [[
		Returns the tangent of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Tan(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.tan(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.tan(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ tan(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.tan(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.tan(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:tan(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func tanh(d as double) static as double
{
	description [[
		Returns the hyperbolic tangent of a number.
	]]
	IFDEF "target_dotnet_cs" {
		return lang "cs" (d) as double {{{ System.Math.Tanh(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" (d) as double {{{ java.lang.Math.tanh(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" (d) as double {{{ Math.tanh(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" (d) as double {{{ tanh(d) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" (d) as double {{{ kotlin.math.tanh(d) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" (d) as double {{{ Foundation.tanh(d) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" (d) as double {{{ _math:tanh(d) }}}
	}
	ELSE {
		nop d
		ERROR NOT_IMPLEMENTED
	}
}

func computeQuinticInEasing(t as double, b as double, c as double, d as double) static as double
{
	description [[
		Computes the quintic-in easing for the given t(current time), b(beginning
		value), c(change in value) and d(duration).
	]]
	var x = t / d as! double
	return c * x * x * x * x * x + b as! double
}

func computeQuinticOutEasing(t as double, b as double, c as double, d as double) static as double
{
	description [[
		Computes the quintic-out easing for the given t(current time), b(beginning
		value), c(change in value) and d(duration).
	]]
	var x = t / d - 1 as! double
	return c * (x * x * x * x * x + 1) + b as! double
}

func computeQuinticInOutEasing(t as double, b as double, c as double, d as double) static as double
{
	description [[
		Computes the quintic-in-out easing for the given t(current time), b(beginning
		value), c(change in value) and d(duration).
	]]
	var x = t / d / 2 as! double
	if x < 1.0:
		return c / 2 * x * x * x * x * x + b
	x = x - 2
	return c / 2 * (x * x * x * x * x + 2) + b
}

// TODO : Add quadratic easing
// TODO : Add cubic easing
// TODO : Add quartic easing
// TODO : Add sinusoidal easing
// TODO : Add exponential easing
// TODO : Add circular easing
