
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2024 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_dotnet_cs"
{
	depend "nuget:System.Threading.Thread@4.3.*"
}

func sleepSeconds(seconds as int) static
{
	IFDEF "target_sushi" {
		lang "lua" {{{
			_os:sleep_seconds(seconds)
		}}}
	}
	ELSE {
		sleepMilliSeconds(seconds * 1000)
	}
}

func sleepMicroSeconds(uSeconds as int) static
{
	IFDEF "target_sushi" {
		lang "lua" {{{
			_os:sleep_microseconds(uSeconds)
		}}}
	}
	ELSE {
		sleepMilliSeconds(uSeconds / 1000)
	}
}

func sleepMilliSeconds(mSeconds as int) static
{
	IFDEF "target_sushi" {
		lang "lua" (mSeconds) {{{
			_os:sleep_milliseconds(mSeconds)
		}}}
	}
	ELSE IFDEF "target_uwp_cs" {
		lang "cs" (mSeconds) {{{
			var v = System.Threading.Tasks.Task.Delay(mSeconds * 1000);
			v.RunSynchronously();
		}}}
	}
	ELSE IFDEF "target_dotnet_cs" {
		lang "cs" (mSeconds) {{{
			System.Threading.Thread.Sleep(mSeconds);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" (mSeconds) {{{
			try {
				java.lang.Thread.sleep(mSeconds);
			}
			catch(java.lang.InterruptedException e) {
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" (mSeconds) {{{
			java.lang.Thread.sleep(mSeconds.toLong())
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" (mSeconds) {{{
			let ms = Swift.Double(mSeconds / 1000)
			Foundation.Thread.sleep(forTimeInterval: ms)
		}}}
	}
	ELSE IFDEF "target_node_js" {
		lang "js" (mSeconds) {{{
			Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, mSeconds);
		}}}
	}
	ELSE {
		nop mSeconds
		ERROR NOT_IMPLEMENTED
	}
}

func sleepSecondsAsync(seconds as int) async static:
	await sleepMilliSecondsAsync(seconds * 1000)

func sleepMicroSecondsAsync(uSeconds as int) async static:
	await sleepMilliSecondsAsync(uSeconds / 1000)

func sleepMilliSecondsAsync(mSeconds as int) async static
{
	IFDEF "target_node_js" {
		lang "js" (mSeconds) {{{
			return new Promise((resolve) => {
				setTimeout(() => resolve(), mSeconds);
			});
		}}}
	}
	ELSE IFDEF "target_browser_js" {
		lang "js" (mSeconds) {{{
			return new Promise((resolve) => {
				setTimeout(() => resolve(), mSeconds);
			});
		}}}
	}
	ELSE {
		nop mSeconds
		ERROR NOT_IMPLEMENTED
	}
}
