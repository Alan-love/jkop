
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class:

func getOutputWriter static as Writer
{
	var fd = lang "lua" int {{{ _pipefd }}}
	if fd < 0:
		return null
	return FileDescriptorWriter.forFileDescriptor(fd)
}

func getInputBuffer static as buffer:
	return lang "lua" buffer {{{ _input }}}

func forCode(code as buffer) static as this
{
	assert code
	var v = new this()
	v.setCode(code)
	return v
}

pvar code as buffer

func start(input as buffer) as bool
{
	var code = this.code
	var v = lang "lua" int {{{ _os:start_thread(code, input, 0) }}}
	if v != 0:
		return false
	return true
}

func startPiped(input as buffer) as Reader
{
	var code = this.code
	var v = lang "lua" int {{{ _os:start_thread(code, input, 1) }}}
	if v < 0:
		return null
	var reader = new FileDescriptorReader()
	reader.setFd(v)
	return reader
}
